{"version":3,"sources":["../../../apps/probono_site/src/components/social-link.tsx","../src/cva.ts","../src/paper/paper-variants.tsx","../src/paper/paper.tsx","../src/table/table-column-header.tsx","../src/table/table-header-row.tsx","../src/table/table-row-group.tsx","../src/table/table-row.tsx","../src/checkbox.tsx","../src/table/table-select-all-cell.tsx","../src/table/table-cell.tsx","../src/table/table-checkbox-cell.tsx","../src/table/table.tsx","../src/map/index.ts","../src/modal/modal.tsx","../src/modal/modal-context.ts","../src/button/button-variants.tsx","../src/button/button.tsx","../src/modal/modal-trigger.tsx","../src/text-field.tsx","../src/hooks/use-fuse.ts","../src/hooks/use-immutable-list-data.ts","../src/hooks/use-searchable-list-data.ts","../src/search-field.tsx","../src/list-box.tsx","../src/popover.tsx","../src/select.tsx","../src/separator.tsx","../src/sidebar.tsx","../src/sidebar-trigger.tsx","../src/switch.tsx","../src/toast.tsx","../src/hash-spy-toaster.tsx","../src/hooks/use-reorderable-list-state.ts","../src/spacer.tsx","../src/list-prioritizer.tsx","../src/list.tsx","../src/loading-spinner.tsx","../src/number-field.tsx","../src/popover-button-trigger.tsx","../src/animated-layout-container.tsx","../src/tag-group.tsx","../src/combo-box.tsx","../src/combo-box-tag-multi-select.tsx","../src/button/a-link-button.tsx","../src/dialog.tsx","../src/dropdown.tsx","../src/file-drop-zone.tsx","../../../apps/probono_site/src/components/social-link.tsx","../src/cva.ts","../src/paper/paper-variants.tsx","../src/paper/paper.tsx","../src/table/table-column-header.tsx","../src/table/table-header-row.tsx","../src/table/table-row-group.tsx","../src/table/table-row.tsx","../src/checkbox.tsx","../src/table/table-select-all-cell.tsx","../src/table/table-cell.tsx","../src/table/table-checkbox-cell.tsx","../src/table/table.tsx","../src/map/index.ts","../src/modal/modal.tsx","../src/modal/modal-context.ts","../src/button/button-variants.tsx","../src/button/button.tsx","../src/modal/modal-trigger.tsx","../src/text-field.tsx","../src/hooks/use-fuse.ts","../src/hooks/use-immutable-list-data.ts","../src/hooks/use-searchable-list-data.ts","../src/search-field.tsx","../src/list-box.tsx","../src/popover.tsx","../src/select.tsx","../src/separator.tsx","../src/sidebar.tsx","../src/sidebar-trigger.tsx","../src/switch.tsx","../src/toast.tsx","../src/hash-spy-toaster.tsx","../src/hooks/use-reorderable-list-state.ts","../src/spacer.tsx","../src/list-prioritizer.tsx","../src/list.tsx","../src/loading-spinner.tsx","../src/number-field.tsx","../src/popover-button-trigger.tsx","../src/animated-layout-container.tsx","../src/tag-group.tsx","../src/combo-box.tsx","../src/combo-box-tag-multi-select.tsx","../src/button/a-link-button.tsx","../src/dialog.tsx","../src/dropdown.tsx","../src/file-drop-zone.tsx","../../../apps/probono_site/src/components/social-link.tsx","../src/cva.ts","../src/paper/paper-variants.tsx","../src/paper/paper.tsx","../src/checkbox.tsx","../src/table/table-checkbox-cell.tsx","../src/table/table-column-header.tsx","../src/table/table-header-row.tsx","../src/table/table-row-group.tsx","../src/table/table-row.tsx","../src/table/table-select-all-cell.tsx","../src/table/table-cell.tsx","../src/table/table.tsx","../src/hooks/use-fuse.ts","../src/hooks/use-immutable-list-data.ts","../src/hooks/use-searchable-list-data.ts","../src/map/index.ts","../src/modal/modal-context.ts","../src/modal/modal.tsx","../src/button/button-variants.tsx","../src/button/button.tsx","../src/modal/modal-trigger.tsx","../src/switch.tsx","../src/text-field.tsx","../src/search-field.tsx","../src/list-box.tsx","../src/popover.tsx","../src/select.tsx","../src/separator.tsx","../src/sidebar.tsx","../src/sidebar-trigger.tsx","../src/social-link.tsx","../src/toast.tsx","../src/hash-spy-toaster.tsx","../src/hooks/use-reorderable-list-state.ts","../src/spacer.tsx","../src/list-prioritizer.tsx","../src/list.tsx","../src/loading-spinner.tsx","../src/number-field.tsx","../src/popover-button-trigger.tsx","../src/animated-layout-container.tsx","../src/tag-group.tsx","../src/combo-box.tsx","../src/combo-box-tag-multi-select.tsx","../src/button/a-link-button.tsx","../src/dialog.tsx","../src/dropdown.tsx","../src/file-drop-zone.tsx"],"sourcesContent":["import React from 'react';\nimport Image, {type StaticImageData} from 'next/image';\nimport {cx} from 'geostats-ui';\n\nexport type SocialLinkProps = {\n\treadonly image: StaticImageData;\n\treadonly name: string;\n\treadonly href: string;\n\treadonly size?: number;\n\treadonly className?: string;\n};\nexport function SocialLink(props: SocialLinkProps) {\n\tconst {image, href, name, className, size = 24} = props;\n\treturn (\n\t\t<a\n\t\t\thref={href}\n\t\t\tclassName={cx('flex justify-center items-center', className)}\n\t\t\ttarget='_blank'\n\t\t\trel='noreferrer'\n\t\t>\n\t\t\t<Image src={image} alt={name} height={size} width={size} />\n\t\t</a>\n\t);\n}\n","import {defineConfig} from 'cva';\nimport {twMerge} from 'tailwind-merge';\n\nexport {type VariantProps} from 'cva';\n\nexport const {cva, compose, cx} = defineConfig({\n\thooks: {\n\t\tonComplete: className => twMerge(className),\n\t},\n});\n","import {type VariantProps} from 'cva';\nimport {cva} from '@/cva.ts';\n\nconst paperVariants = cva({\n\tbase: 'rounded border border-stone-800 bg-black/40 text-stone-300 backdrop-blur transition-all',\n\tvariants: {\n\t\thoverEffect: {\n\t\t\ttrue: 'duration-500 hover:scale-[101%] hover:border-stone-700 hover:glow-sm',\n\t\t\tfalse: '',\n\t\t},\n\t\tspacing: {\n\t\t\tnone: 'p-0',\n\t\t\txs: 'p-1',\n\t\t\tsm: 'p-2',\n\t\t\tmd: 'p-4',\n\t\t\tlg: 'p-8',\n\t\t\txl: 'p-16',\n\t\t},\n\t},\n\tdefaultVariants: {\n\t\tspacing: 'md',\n\t\thoverEffect: false,\n\t},\n});\n\nexport type PaperVariantProps = VariantProps<typeof paperVariants>;\n\nexport default paperVariants;\n","import React, {type ComponentProps} from 'react';\nimport {omit} from 'lodash';\nimport paperVariants, {\n\ttype PaperVariantProps,\n} from '@/paper/paper-variants.tsx';\n\nexport type PaperProps = ComponentProps<'div'> & PaperVariantProps;\n\nexport function Paper(props: PaperProps) {\n\treturn (\n\t\t<div\n\t\t\t{...omit(props, ['hoverEffect', 'spacing'])}\n\t\t\tclassName={paperVariants(props)}\n\t\t/>\n\t);\n}\n","import type {GridNode} from '@react-types/grid';\nimport type {TableState} from 'react-stately';\nimport React, {useRef} from 'react';\nimport {mergeProps, useFocusRing, useTableColumnHeader} from 'react-aria';\nimport {cx} from '@/cva.ts';\n\nexport type TableColumnHeaderProps<T> = {\n\treadonly column: GridNode<T>;\n\treadonly state: TableState<T>;\n};\n\nexport function TableColumnHeader<T>(props: TableColumnHeaderProps<T>) {\n\tconst {column, state} = props;\n\tconst headerRef = useRef<HTMLTableHeaderCellElement>(null);\n\n\tconst {columnHeaderProps} = useTableColumnHeader(\n\t\t{node: column},\n\t\tstate,\n\t\theaderRef,\n\t);\n\n\tconst {isFocusVisible, focusProps} = useFocusRing();\n\tconst arrowIcon =\n\t\tstate.sortDescriptor?.direction === 'ascending' ? '▲' : '▼';\n\n\treturn (\n\t\t<th\n\t\t\t{...mergeProps(columnHeaderProps, focusProps)}\n\t\t\tref={headerRef}\n\t\t\tcolSpan={column.colspan}\n\t\t\tclassName={cx(\n\t\t\t\t'p-4 outline-none cursor-default',\n\t\t\t\tisFocusVisible && 'shadow-stone-50',\n\t\t\t\t(column.colspan ?? 0) > 1 ? 'text-center' : 'text-left',\n\t\t\t)}\n\t\t>\n\t\t\t{column.rendered}\n\t\t\t{column.props.allowsSorting && (\n\t\t\t\t<span\n\t\t\t\t\taria-hidden='true'\n\t\t\t\t\tclassName={cx(\n\t\t\t\t\t\t'px-0 py-1 ',\n\t\t\t\t\t\tstate.sortDescriptor?.column === column.key\n\t\t\t\t\t\t\t? 'visible'\n\t\t\t\t\t\t\t: 'hidden',\n\t\t\t\t\t)}\n\t\t\t\t>\n\t\t\t\t\t{arrowIcon}\n\t\t\t\t</span>\n\t\t\t)}\n\t\t</th>\n\t);\n}\n","'use client';\nimport React, {type ReactNode, useRef} from 'react';\nimport {useTableHeaderRow} from 'react-aria';\nimport type {GridNode} from '@react-types/grid';\nimport type {TableState} from 'react-stately';\n\nexport type TableHeaderRowProps<T> = {\n\treadonly item: GridNode<T>;\n\treadonly state: TableState<T>;\n\treadonly children: ReactNode;\n};\n\nexport function TableHeaderRow<T>(props: TableHeaderRowProps<T>) {\n\tconst {item, state, children} = props;\n\n\tconst headerRef = useRef<HTMLTableRowElement>(null);\n\n\tconst {rowProps} = useTableHeaderRow({node: item}, state, headerRef);\n\n\treturn (\n\t\t<tr {...rowProps} ref={headerRef}>\n\t\t\t{children}\n\t\t</tr>\n\t);\n}\n","import React, {type ReactNode} from 'react';\nimport {useTableRowGroup} from 'react-aria';\nimport {cx} from '@/cva.ts';\n\nexport type TableRowGroupProps = {\n\treadonly type: keyof HTMLElementTagNameMap;\n\treadonly children: ReactNode;\n};\n\nexport function TableRowGroup(props: TableRowGroupProps) {\n\tconst {type: Element, children} = props;\n\n\tconst {rowGroupProps} = useTableRowGroup();\n\n\treturn (\n\t\t<Element\n\t\t\t{...rowGroupProps}\n\t\t\tclassName={cx(\n\t\t\t\tElement === 'thead' && 'border-b border-stone-700 bg-stone-900',\n\t\t\t)}\n\t\t>\n\t\t\t{children}\n\t\t</Element>\n\t);\n}\n","import React, {type ReactNode, useRef} from 'react';\nimport {type GridNode} from '@react-types/grid';\nimport {type TableState} from 'react-stately';\nimport {useTableRow} from 'react-aria';\nimport {cx} from '@/cva.ts';\n\nexport type TableRowProps<T> = {\n\treadonly item: GridNode<T>;\n\treadonly children: ReactNode;\n\treadonly state: TableState<T>;\n};\n\nexport function TableRow<T>(props: TableRowProps<T>) {\n\tconst {item, children, state} = props;\n\tconst rowRef = useRef<HTMLTableRowElement>(null);\n\tconst isSelected = state.selectionManager.isSelected(item.key);\n\n\tconst {rowProps} = useTableRow({node: item}, state, rowRef);\n\n\treturn (\n\t\t<tr\n\t\t\t{...rowProps}\n\t\t\tref={rowRef}\n\t\t\tclassName={cx(\n\t\t\t\t'outline-none cursor-default',\n\t\t\t\tisSelected && 'text-stone-50 bg-stone-900',\n\t\t\t)}\n\t\t>\n\t\t\t{children}\n\t\t</tr>\n\t);\n}\n","import React, {useRef} from 'react';\nimport {\n\ttype AriaCheckboxProps,\n\tmergeProps,\n\tuseCheckbox,\n\tuseFocusRing,\n\tusePress,\n\tVisuallyHidden,\n} from 'react-aria';\nimport {useToggleState, type ToggleProps} from 'react-stately';\nimport {cx} from './cva.ts';\n\nexport type CheckboxProps = {\n\treadonly className?: string;\n} & AriaCheckboxProps &\n\tToggleProps;\n\nexport function Checkbox(props: CheckboxProps) {\n\tconst {children, className} = props;\n\tconst ref = useRef<HTMLInputElement>(null);\n\tconst state = useToggleState(props);\n\tconst {inputProps} = useCheckbox(props, state, ref);\n\tconst {focusProps} = useFocusRing();\n\tconst {pressProps} = usePress({isDisabled: props.isDisabled});\n\n\treturn (\n\t\t<label className={cx('flex gap-2 text-stone-300', className)}>\n\t\t\t<VisuallyHidden>\n\t\t\t\t<input {...mergeProps(inputProps, focusProps)} ref={ref} />\n\t\t\t</VisuallyHidden>\n\t\t\t<div\n\t\t\t\tclassName='size-6 cursor-pointer rounded border border-stone-700 p-1'\n\t\t\t\taria-hidden='true'\n\t\t\t>\n\t\t\t\t<svg\n\t\t\t\t\t{...pressProps}\n\t\t\t\t\tclassName='fill-none stroke-stone-50 stroke-2'\n\t\t\t\t\tviewBox='0 0 18 18'\n\t\t\t\t>\n\t\t\t\t\t<polyline\n\t\t\t\t\t\tclassName='transition-all duration-200'\n\t\t\t\t\t\tpoints='1 9 7 14 15 4'\n\t\t\t\t\t\tstrokeDasharray={24}\n\t\t\t\t\t\tstrokeDashoffset={state.isSelected ? 48 : 72}\n\t\t\t\t\t/>\n\t\t\t\t</svg>\n\t\t\t</div>\n\t\t\t{children}\n\t\t</label>\n\t);\n}\n","import React, {useRef} from 'react';\nimport {type GridNode} from '@react-types/grid';\nimport {type TableState} from 'react-stately';\nimport {\n\tuseTableColumnHeader,\n\tuseTableSelectAllCheckbox,\n\tVisuallyHidden,\n} from 'react-aria';\nimport {Checkbox} from '@/checkbox.tsx';\n\nexport type TableSelectAllCellProps<T> = {\n\treadonly column: GridNode<T>;\n\treadonly state: TableState<T>;\n};\n\nexport function TableSelectAllCell<T>(props: TableSelectAllCellProps<T>) {\n\tconst {column, state} = props;\n\tconst cellRef = useRef<HTMLTableHeaderCellElement>(null);\n\tconst {columnHeaderProps} = useTableColumnHeader(\n\t\t{node: column},\n\t\tstate,\n\t\tcellRef,\n\t);\n\tconst {checkboxProps} = useTableSelectAllCheckbox(state);\n\n\treturn (\n\t\t<th {...columnHeaderProps} ref={cellRef} className='px-4'>\n\t\t\t{state.selectionManager.selectionMode === 'single' ? (\n\t\t\t\t<VisuallyHidden>{checkboxProps['aria-label']}</VisuallyHidden>\n\t\t\t) : (\n\t\t\t\t<Checkbox {...checkboxProps} />\n\t\t\t)}\n\t\t</th>\n\t);\n}\n","import React, {useRef} from 'react';\nimport {type GridNode} from '@react-types/grid';\nimport {type TableState} from 'react-stately';\nimport {mergeProps, useFocusRing, useTableCell} from 'react-aria';\nimport {cx} from '@/cva.ts';\n\nexport type TableCellProps<T> = {\n\treadonly cell: GridNode<T>;\n\treadonly state: TableState<T>;\n};\n\nexport function TableCell<T>(props: TableCellProps<T>) {\n\tconst {cell, state} = props;\n\n\tconst cellRef = useRef<HTMLTableCellElement>(null);\n\n\tconst {gridCellProps} = useTableCell({node: cell}, state, cellRef);\n\n\tconst {isFocusVisible, focusProps} = useFocusRing();\n\n\treturn (\n\t\t<td\n\t\t\t{...mergeProps(gridCellProps, focusProps)}\n\t\t\tref={cellRef}\n\t\t\tclassName={cx(\n\t\t\t\t'p-4 outline-none border-y border-stone-800',\n\t\t\t\tisFocusVisible && 'shadow-stone-500',\n\t\t\t)}\n\t\t>\n\t\t\t{cell.rendered}\n\t\t</td>\n\t);\n}\n","'use client';\nimport React, {useRef} from 'react';\nimport {type GridNode} from '@react-types/grid';\nimport {type TableState} from 'react-stately';\nimport {useTableCell, useTableSelectionCheckbox} from 'react-aria';\nimport {Checkbox} from '@/checkbox.tsx';\n\nexport type TableCheckboxCellProps<T> = {\n\treadonly cell: GridNode<T>;\n\treadonly state: TableState<T>;\n};\n\nexport function TableCheckboxCell<T>(props: TableCheckboxCellProps<T>) {\n\tconst {cell, state} = props;\n\tconst cellRef = useRef<HTMLTableCellElement>(null);\n\tconst {gridCellProps} = useTableCell({node: cell}, state, cellRef);\n\n\tconst {checkboxProps} = useTableSelectionCheckbox(\n\t\t{\n\t\t\tkey: cell.parentKey!,\n\t\t},\n\t\tstate,\n\t);\n\n\treturn (\n\t\t<td\n\t\t\t{...gridCellProps}\n\t\t\tref={cellRef}\n\t\t\tclassName='border-y border-stone-800 px-4'\n\t\t>\n\t\t\t<Checkbox {...checkboxProps} />\n\t\t</td>\n\t);\n}\n","import React, {useRef} from 'react';\nimport {type AriaTableProps, useTable} from 'react-aria';\nimport {type TableStateProps, useTableState} from 'react-stately';\nimport {TableRowGroup} from '@/table/table-row-group.tsx';\nimport {TableHeaderRow} from '@/table/table-header-row.tsx';\nimport {TableSelectAllCell} from '@/table/table-select-all-cell.tsx';\nimport {TableColumnHeader} from '@/table/table-column-header.tsx';\nimport {TableRow} from '@/table/table-row.tsx';\nimport {TableCheckboxCell} from '@/table/table-checkbox-cell.tsx';\nimport {TableCell} from '@/table/table-cell.tsx';\nimport {cx} from '@/cva.ts';\n\nexport type TableProps<T> = {\n\treadonly className?: string;\n} & AriaTableProps &\n\tTableStateProps<T>;\n\nexport function Table<T extends object>(props: TableProps<T>) {\n\tconst {className} = props;\n\n\tconst state = useTableState<T>(props);\n\n\tconst tableRef = useRef<HTMLTableElement>(null);\n\n\tconst {collection} = state;\n\n\tconst {gridProps} = useTable(props, state, tableRef);\n\n\treturn (\n\t\t<table\n\t\t\t{...gridProps}\n\t\t\tref={tableRef}\n\t\t\tclassName={cx('border-collapse', className)}\n\t\t>\n\t\t\t<TableRowGroup type='thead'>\n\t\t\t\t{collection.headerRows.map(headerRow => (\n\t\t\t\t\t<TableHeaderRow\n\t\t\t\t\t\tkey={headerRow.key}\n\t\t\t\t\t\titem={headerRow}\n\t\t\t\t\t\tstate={state}\n\t\t\t\t\t>\n\t\t\t\t\t\t{[...collection.getChildren!(headerRow.key)].map(\n\t\t\t\t\t\t\tcolumn =>\n\t\t\t\t\t\t\t\tcolumn.props.isSelectionCell ? (\n\t\t\t\t\t\t\t\t\t<TableSelectAllCell\n\t\t\t\t\t\t\t\t\t\tkey={column.key}\n\t\t\t\t\t\t\t\t\t\tcolumn={column}\n\t\t\t\t\t\t\t\t\t\tstate={state}\n\t\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t\t) : (\n\t\t\t\t\t\t\t\t\t<TableColumnHeader\n\t\t\t\t\t\t\t\t\t\tkey={column.key}\n\t\t\t\t\t\t\t\t\t\tcolumn={column}\n\t\t\t\t\t\t\t\t\t\tstate={state}\n\t\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t\t),\n\t\t\t\t\t\t)}\n\t\t\t\t\t</TableHeaderRow>\n\t\t\t\t))}\n\t\t\t</TableRowGroup>\n\t\t\t<TableRowGroup type='tbody'>\n\t\t\t\t{\n\t\t\t\t\t// The following is deprecated, but the body's children are not accesible via collection.getChildren\n\t\t\t\t\t[...collection.body.childNodes].map(row => (\n\t\t\t\t\t\t<TableRow key={row.key} item={row} state={state}>\n\t\t\t\t\t\t\t{[...collection.getChildren!(row.key)].map(cell =>\n\t\t\t\t\t\t\t\tcell.props.isSelectionCell ? (\n\t\t\t\t\t\t\t\t\t<TableCheckboxCell\n\t\t\t\t\t\t\t\t\t\tkey={cell.key}\n\t\t\t\t\t\t\t\t\t\tcell={cell}\n\t\t\t\t\t\t\t\t\t\tstate={state}\n\t\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t\t) : (\n\t\t\t\t\t\t\t\t\t<TableCell\n\t\t\t\t\t\t\t\t\t\tkey={cell.key}\n\t\t\t\t\t\t\t\t\t\tcell={cell}\n\t\t\t\t\t\t\t\t\t\tstate={state}\n\t\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t\t),\n\t\t\t\t\t\t\t)}\n\t\t\t\t\t\t</TableRow>\n\t\t\t\t\t))\n\t\t\t\t}\n\t\t\t</TableRowGroup>\n\t\t</table>\n\t);\n}\n","import dynamic from 'next/dynamic';\nimport {ComponentType} from 'react';\n\nexport const GeostatsTileLayer: ComponentType = dynamic(\n\t() => import('./geostats-tile-layer.tsx'),\n\t{\n\t\tssr: false,\n\t},\n);\n","import React, {type ReactNode} from 'react';\nimport {type AriaModalOverlayProps, Overlay, useModalOverlay} from 'react-aria';\nimport {type OverlayTriggerState} from 'react-stately';\n\nexport type ModalProps = {\n\treadonly state: OverlayTriggerState;\n\treadonly children: ReactNode;\n} & AriaModalOverlayProps;\n\nexport function Modal(props: ModalProps) {\n\tconst {state, children} = props;\n\tconst ref = React.useRef<HTMLDivElement>(null);\n\tconst {modalProps, underlayProps} = useModalOverlay(props, state, ref);\n\n\treturn (\n\t\t<Overlay>\n\t\t\t<div\n\t\t\t\t{...underlayProps}\n\t\t\t\tclassName='fixed inset-0 z-50 flex items-center justify-center bg-black/50'\n\t\t\t>\n\t\t\t\t<div\n\t\t\t\t\t{...modalProps}\n\t\t\t\t\tref={ref}\n\t\t\t\t\tclassName='rounded border border-stone-800 bg-stone-950 p-4'\n\t\t\t\t>\n\t\t\t\t\t{children}\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t</Overlay>\n\t);\n}\n","'use client';\nimport {createContext, useContext} from 'react';\n\nexport const modalContext = createContext<(() => void) | null>(null);\n\nexport function useCloseModal(): () => void {\n\tconst closeModal = useContext(modalContext);\n\n\tif (!closeModal) {\n\t\tthrow new Error('useCloseModal not used within a modal');\n\t}\n\n\treturn closeModal;\n}\n","import {type VariantProps} from 'cva';\nimport {cva} from '@/cva.ts';\n\nexport const buttonVariants = cva({\n\tbase: 'flex size-fit items-center gap-1 truncate rounded fill-current font-bold transition-colors disabled:cursor-default',\n\tvariants: {\n\t\tsize: {\n\t\t\txs: 'text-xs',\n\t\t\tsm: 'p-1 text-sm',\n\t\t\tmd: 'p-2',\n\t\t\tlg: 'p-3 text-lg',\n\t\t\txl: 'p-4 text-xl',\n\t\t},\n\t\tvariant: {\n\t\t\tprimary:\n\t\t\t\t'bg-stone-100 text-stone-950 hover:bg-stone-300 hover:text-stone-800 disabled:bg-stone-500 disabled:text-stone-800',\n\t\t\tsecondary:\n\t\t\t\t'border border-stone-700 bg-stone-900  text-stone-200 hover:bg-stone-800 disabled:bg-stone-700 disabled:text-stone-800 ',\n\t\t\toutlined:\n\t\t\t\t'border border-stone-700 text-stone-300 hover:bg-stone-900 disabled:border-stone-800 disabled:bg-transparent disabled:text-stone-600',\n\t\t\tdestructive:\n\t\t\t\t'border border-red-600 bg-red-600 text-stone-50 hover:bg-red-500 disabled:border-stone-700 disabled:bg-stone-700 disabled:text-stone-800',\n\t\t\ttext: 'text-stone-300',\n\t\t},\n\t},\n\tdefaultVariants: {\n\t\tvariant: 'primary',\n\t\tsize: 'md',\n\t},\n});\n\nexport type ButtonVariantProps = VariantProps<typeof buttonVariants>;\n","'use client';\nimport React, {type ReactNode, type RefObject} from 'react';\nimport {type AriaButtonOptions, useButton, useObjectRef} from 'react-aria';\nimport {type VariantProps} from '@/cva.ts';\nimport {buttonVariants} from '@/button/button-variants.tsx';\n\nexport type ButtonProps = {\n\treadonly children?: ReactNode;\n\treadonly className?: string;\n\treadonly buttonRef?: RefObject<HTMLButtonElement>;\n} & AriaButtonOptions<'button'> &\n\tVariantProps<typeof buttonVariants>;\n\nexport function Button(props: ButtonProps) {\n\tconst {children, buttonRef} = props;\n\tconst ref = useObjectRef<HTMLButtonElement>(buttonRef);\n\tconst {buttonProps} = useButton(\n\t\t{\n\t\t\t...props,\n\t\t\t// Workaround for react/react-aria #1513\n\t\t\tonPress(event) {\n\t\t\t\tif (\n\t\t\t\t\tevent.pointerType === 'mouse' ||\n\t\t\t\t\tevent.pointerType === 'keyboard'\n\t\t\t\t) {\n\t\t\t\t\tprops.onPress?.(event);\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tsetTimeout(() => {\n\t\t\t\t\tprops.onPress?.(event);\n\t\t\t\t}, 1);\n\t\t\t},\n\t\t},\n\t\tref,\n\t);\n\treturn (\n\t\t<button\n\t\t\t{...buttonProps}\n\t\t\tref={buttonRef}\n\t\t\tclassName={buttonVariants(props)}\n\t\t>\n\t\t\t{children}\n\t\t</button>\n\t);\n}\n","'use client';\nimport React, {type ReactElement, type ReactNode} from 'react';\nimport {type OverlayTriggerProps, useOverlayTriggerState} from 'react-stately';\nimport {useOverlayTrigger} from 'react-aria';\nimport {Modal, type ModalProps} from '@/modal/modal.tsx';\nimport {Button} from '@/button/button.tsx';\nimport {type ButtonVariantProps} from '@/button/button-variants.tsx';\nimport {modalContext} from '@/modal/modal-context.ts';\n\nexport type ModalTriggerProps = {\n\treadonly className?: string;\n\treadonly children: ReactElement;\n\treadonly label: ReactNode;\n} & OverlayTriggerProps &\n\tOmit<ModalProps, 'state' | 'children'> &\n\tButtonVariantProps;\n\nexport function ModalTrigger(props: ModalTriggerProps) {\n\tconst {children, label, className} = props;\n\tconst state = useOverlayTriggerState(props);\n\tconst {triggerProps, overlayProps} = useOverlayTrigger(\n\t\t{type: 'dialog'},\n\t\tstate,\n\t);\n\n\treturn (\n\t\t<>\n\t\t\t<Button {...props} {...triggerProps} className={className}>\n\t\t\t\t{label}\n\t\t\t</Button>\n\t\t\t{state.isOpen && (\n\t\t\t\t<Modal state={state}>\n\t\t\t\t\t{React.cloneElement(\n\t\t\t\t\t\t<modalContext.Provider value={state.close}>\n\t\t\t\t\t\t\t{children}\n\t\t\t\t\t\t</modalContext.Provider>,\n\t\t\t\t\t\toverlayProps,\n\t\t\t\t\t)}\n\t\t\t\t</Modal>\n\t\t\t)}\n\t\t</>\n\t);\n}\n","import React, {type RefObject, type ReactNode} from 'react';\nimport {type AriaTextFieldProps, useTextField, useObjectRef} from 'react-aria';\nimport {cx} from './cva.ts';\n\nexport type TextFieldProps = {\n\treadonly className?: string;\n\treadonly icon?: ReactNode;\n\treadonly inputRef?: RefObject<HTMLInputElement>;\n} & AriaTextFieldProps;\n\nexport function TextField(props: TextFieldProps) {\n\tconst {label, isDisabled, className, description, icon, isRequired} = props;\n\tconst inputRef = useObjectRef(props.inputRef);\n\tconst {\n\t\tlabelProps,\n\t\tinputProps,\n\t\tdescriptionProps,\n\t\terrorMessageProps,\n\t\tisInvalid,\n\t\tvalidationErrors,\n\t} = useTextField(\n\t\t{\n\t\t\tvalidationBehavior: 'native',\n\t\t\t...props,\n\t\t},\n\t\tinputRef,\n\t);\n\n\treturn (\n\t\t<div data-disabled={isDisabled} className={cx('group', className)}>\n\t\t\t{label && (\n\t\t\t\t<label\n\t\t\t\t\t{...labelProps}\n\t\t\t\t\tclassName={cx(\n\t\t\t\t\t\t'text-stone-400 text-sm block mb-1 group-focus-within:text-stone-50 group-data-[disabled=true]:text-stone-500 transition-colors',\n\t\t\t\t\t\tisRequired && 'after:content-[\"*\"] after:ml-0.5',\n\t\t\t\t\t)}\n\t\t\t\t>\n\t\t\t\t\t{label}\n\t\t\t\t</label>\n\t\t\t)}\n\n\t\t\t<div className='flex items-center gap-2 rounded border border-stone-700 px-2 shadow-stone-800 transition-all group-focus-within:border-stone-50 group-focus-within:glow-sm group-data-[disabled=true]:border-stone-800'>\n\t\t\t\t{icon}\n\t\t\t\t<input\n\t\t\t\t\t{...inputProps}\n\t\t\t\t\tref={inputRef}\n\t\t\t\t\tclassName='min-w-0 grow bg-transparent py-2 text-stone-100 outline-none placeholder:text-stone-500 disabled:cursor-not-allowed disabled:text-stone-600'\n\t\t\t\t/>\n\t\t\t</div>\n\t\t\t{description === undefined ? null : (\n\t\t\t\t<div {...descriptionProps}>{description}</div>\n\t\t\t)}\n\t\t\t{isInvalid && (\n\t\t\t\t<div\n\t\t\t\t\t{...errorMessageProps}\n\t\t\t\t\tclassName='mt-1 text-xs text-red-400'\n\t\t\t\t>\n\t\t\t\t\t{validationErrors.join(' ')}\n\t\t\t\t</div>\n\t\t\t)}\n\t\t</div>\n\t);\n}\n","import {useEffect, useRef} from 'react';\nimport {type List} from 'immutable';\nimport type Fuse from 'fuse.js';\nimport {type IFuseOptions} from 'fuse.js';\n\n/**\n * Creates and initializes a Fuse instance lazily using the provided collection and options.\n *\n * @template T - The type of elements in the collection.\n *\n * @param {Array<T>} items - The collection to be searched.\n * @param {IFuseOptions<T>} [options] - The options to customize the search behavior.\n *\n * @returns {Fuse<T> | undefined} - The initialized Fuse instance, or undefined if the Fuse instance is not yet available.\n */\nexport function useFuse<T>(\n\titems: List<T>,\n\toptions?: IFuseOptions<T>,\n): Fuse<T> | undefined {\n\tconst fuseRef = useRef<Fuse<T>>();\n\n\tuseEffect(() => {\n\t\tvoid (async () => {\n\t\t\tconst fuse = await import('fuse.js');\n\t\t\tfuseRef.current = new fuse.default<T>(items.toArray(), options);\n\t\t})();\n\t\t// eslint-disable-next-line react-hooks/exhaustive-deps\n\t}, [items]);\n\treturn fuseRef.current;\n}\n","import {\n\ttype Key,\n\ttype ListData,\n\ttype ListOptions,\n\tuseListData,\n} from 'react-stately';\nimport {List, Set} from 'immutable';\nimport {useMemo} from 'react';\n\nexport type ImmutableListOptions<T> = Omit<ListOptions<T>, 'initialItems'> & {\n\treadonly initialItems?: Iterable<T>;\n};\n\nexport type ImmutableListData<T> = Omit<\n\tListData<T>,\n\t'items' | 'selectedKeys' | 'setSelectedKeys'\n> & {\n\treadonly items: List<T>;\n\treadonly selectedKeys: Set<Key> | 'all';\n\treadonly setSelectedKeys: (keys: Set<Key> | 'all') => void;\n};\n\nexport function useImmutableListData<T>(\n\toptions: ImmutableListOptions<T>,\n): ImmutableListData<T> {\n\tconst listData = useListData<T>({\n\t\t...options,\n\t\tinitialItems:\n\t\t\toptions.initialItems === undefined\n\t\t\t\t? undefined\n\t\t\t\t: [...options.initialItems],\n\t});\n\n\tconst items = useMemo(() => List(listData.items), [listData.items]);\n\n\tconst selectedKeys = useMemo(() => {\n\t\tconst {selectedKeys} = listData;\n\t\tif (selectedKeys === 'all') {\n\t\t\treturn 'all';\n\t\t}\n\n\t\treturn Set(selectedKeys);\n\t}, [listData]);\n\n\treturn {\n\t\t...listData,\n\t\titems,\n\t\tselectedKeys,\n\t\tsetSelectedKeys(keys: 'all' | Set<Key>) {\n\t\t\tif (keys === 'all') {\n\t\t\t\tlistData.setSelectedKeys('all');\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\t// @ts-expect-error should not need the string conversion symbol\n\t\t\tlistData.setSelectedKeys(keys);\n\t\t},\n\t};\n}\n","import {useMemo} from 'react';\nimport {type Collection, OrderedSet, Seq, type Set} from 'immutable';\nimport {type Key} from 'react-stately';\nimport {useFuse} from '@/hooks/use-fuse.ts';\nimport {\n\tuseImmutableListData,\n\ttype ImmutableListData,\n\ttype ImmutableListOptions,\n} from './use-immutable-list-data';\n\nexport type SearchableListOptions<T> = {\n\treadonly searchKeys?: Collection.Indexed<string>;\n} & ImmutableListOptions<T>;\n\nexport type SearchableListData<T> = {\n\treadonly filteredKeys: Set<Key>;\n} & ImmutableListData<T>;\n\nexport default function useSearchableListData<\n\tT extends Record<string, unknown>,\n>(options: SearchableListOptions<T>): SearchableListData<T> {\n\tconst {\n\t\tsearchKeys,\n\t\tgetKey = (value: T) => {\n\t\t\tif (Object.hasOwn(value, 'id')) {\n\t\t\t\treturn value.id as Key;\n\t\t\t}\n\n\t\t\tif (Object.hasOwn(value, 'key')) {\n\t\t\t\treturn value.key as Key;\n\t\t\t}\n\n\t\t\tthrow new Error(\n\t\t\t\t'searchable list data item does not have an id or key attribute, and getKey is undefined',\n\t\t\t);\n\t\t},\n\t} = options;\n\n\tconst listData = useImmutableListData(options);\n\n\tconst {items, selectedKeys, filterText} = listData;\n\n\tconst fuse = useFuse(items, {\n\t\tkeys: searchKeys?.toArray(),\n\t});\n\n\tconst filteredKeys = useMemo(() => {\n\t\tif (selectedKeys === 'all') {\n\t\t\treturn OrderedSet<Key>();\n\t\t}\n\n\t\tif (fuse === undefined || filterText === '') {\n\t\t\treturn Seq(items)\n\t\t\t\t.map(item => getKey(item))\n\t\t\t\t.toOrderedSet()\n\t\t\t\t.subtract(selectedKeys);\n\t\t}\n\n\t\tconst results = OrderedSet(\n\t\t\tfuse.search(filterText).map(result => getKey(result.item)),\n\t\t);\n\n\t\treturn results.subtract(selectedKeys);\n\t}, [selectedKeys, fuse, filterText, items, getKey]);\n\n\treturn {\n\t\t...listData,\n\t\tfilteredKeys,\n\t};\n}\n","import React, {useRef} from 'react';\nimport {type AriaSearchFieldProps, useSearchField} from 'react-aria';\nimport {\n\ttype SearchFieldProps as SearchFieldStateProps,\n\tuseSearchFieldState,\n} from 'react-stately';\n// @ts-expect-error bad typings\nimport Search from '@material-design-icons/svg/round/search.svg';\n// @ts-expect-error bad typings\nimport Close from '@material-design-icons/svg/round/close.svg';\nimport {Button} from './button/button.tsx';\nimport {cx} from './cva.ts';\n\nexport type SearchFieldProps = {\n\treadonly className: string;\n} & AriaSearchFieldProps &\n\tSearchFieldStateProps;\n\nexport function SearchField(props: SearchFieldProps) {\n\tconst {label, className} = props;\n\tconst state = useSearchFieldState(props);\n\tconst inputRef = useRef<HTMLInputElement>(null);\n\tconst {labelProps, inputProps, clearButtonProps} = useSearchField(\n\t\tprops,\n\t\tstate,\n\t\tinputRef,\n\t);\n\n\treturn (\n\t\t<div className={cx('group', className)}>\n\t\t\t<label\n\t\t\t\t{...labelProps}\n\t\t\t\tclassName='text-stone-300 group-focus-within:text-stone-50'\n\t\t\t>\n\t\t\t\t{label}\n\t\t\t</label>\n\t\t\t<div className='flex items-center gap-1 rounded border border-stone-700 px-1 group-focus-within:border-stone-50'>\n\t\t\t\t<Search className='fill-stone-500 group-focus-within:fill-stone-50' />\n\t\t\t\t<input\n\t\t\t\t\t{...inputProps}\n\t\t\t\t\tref={inputRef}\n\t\t\t\t\tclassName='grow bg-transparent py-1 text-stone-200 outline-none'\n\t\t\t\t/>\n\t\t\t\t{state.value === '' ? null : (\n\t\t\t\t\t<Button {...clearButtonProps} variant='text'>\n\t\t\t\t\t\t<Close />\n\t\t\t\t\t</Button>\n\t\t\t\t)}\n\t\t\t</div>\n\t\t</div>\n\t);\n}\n","'use client';\nimport React, {useRef, type RefObject} from 'react';\nimport {\n\ttype AriaListBoxProps,\n\tmergeProps,\n\tuseFocusRing,\n\tuseListBox,\n\tuseListBoxSection,\n\tuseOption,\n} from 'react-aria';\nimport {type Node} from '@react-types/shared';\nimport {type ListProps, type ListState, useListState} from 'react-stately';\nimport {twMerge} from 'tailwind-merge';\nimport {cx} from './cva.ts';\n\nexport type ListBoxProps<T extends Record<string, unknown>> =\n\t| StatefulListBoxProps<T>\n\t| BaseListBoxProps<T>;\n\nexport function ListBox<T extends Record<string, unknown>>(\n\tprops: ListBoxProps<T>,\n) {\n\treturn 'state' in props ? (\n\t\t<BaseListBox {...props} />\n\t) : (\n\t\t<StatefulListBox {...props} />\n\t);\n}\n\ntype StatefulListBoxProps<T extends Record<string, unknown>> = ListProps<T> &\n\tOmit<BaseListBoxProps<T>, 'state'>;\n\nfunction StatefulListBox<T extends Record<string, unknown>>(\n\tprops: StatefulListBoxProps<T>,\n) {\n\tconst state = useListState<T>(props);\n\n\treturn <BaseListBox {...props} state={state} />;\n}\n\nexport type BaseListBoxProps<T extends Record<string, unknown>> = {\n\treadonly className?: string;\n\treadonly listBoxRef?: RefObject<HTMLUListElement>;\n\treadonly state: ListState<T>;\n} & AriaListBoxProps<T>;\n\nexport function BaseListBox<T extends Record<string, unknown>>(\n\tprops: BaseListBoxProps<T>,\n) {\n\tconst {label, state, className} = props;\n\n\tconst listBoxRef = useRef<HTMLUListElement>(null);\n\tconst {listBoxProps, labelProps} = useListBox<T>(props, state, listBoxRef);\n\n\treturn (\n\t\t<>\n\t\t\t{label ? (\n\t\t\t\t<label\n\t\t\t\t\t{...labelProps}\n\t\t\t\t\tclassName='mb-2 block px-2 text-xl text-stone-200'\n\t\t\t\t>\n\t\t\t\t\t{label}\n\t\t\t\t</label>\n\t\t\t) : null}\n\n\t\t\t<ul\n\t\t\t\t{...listBoxProps}\n\t\t\t\tref={listBoxRef}\n\t\t\t\tclassName={twMerge(\n\t\t\t\t\t'rounded overflow-y-auto scroll-smooth scrollbar-track-transparent scrollbar-thumb-stone-50 scrollbar-thin scrollbar-thumb-rounded',\n\t\t\t\t\tclassName,\n\t\t\t\t)}\n\t\t\t>\n\t\t\t\t{[...state.collection].map(item =>\n\t\t\t\t\titem.type === 'section' ? (\n\t\t\t\t\t\t<ListBoxSection\n\t\t\t\t\t\t\tkey={item.key}\n\t\t\t\t\t\t\tsection={item}\n\t\t\t\t\t\t\tstate={state}\n\t\t\t\t\t\t/>\n\t\t\t\t\t) : (\n\t\t\t\t\t\t<Option key={item.key} item={item} state={state} />\n\t\t\t\t\t),\n\t\t\t\t)}\n\t\t\t</ul>\n\t\t</>\n\t);\n}\n\nexport type ListBoxSectionProps<T> = {\n\treadonly section: Node<T>;\n\treadonly state: ListState<T>;\n};\n\nfunction ListBoxSection<T extends Record<string, unknown>>(\n\tprops: ListBoxSectionProps<T>,\n) {\n\tconst {section, state} = props;\n\n\tconst {itemProps, headingProps, groupProps} = useListBoxSection({\n\t\theading: section.rendered,\n\t\t'aria-label': section['aria-label'],\n\t});\n\t// If the section is not the first, add a separator element to provide visual separation.\n\t// The heading is rendered inside an <li> element, which contains\n\t// a <ul> with the child items.\n\treturn (\n\t\t<li {...itemProps} className='p-2'>\n\t\t\t{section.rendered && (\n\t\t\t\t<div\n\t\t\t\t\t{...headingProps}\n\t\t\t\t\tclassName={cx(\n\t\t\t\t\t\t'font-semibold py-2 text-sm text-stone-200 top-0',\n\t\t\t\t\t\tsection.key !== state.collection.getFirstKey() &&\n\t\t\t\t\t\t\t'mt-2',\n\t\t\t\t\t)}\n\t\t\t\t>\n\t\t\t\t\t{section.rendered}\n\t\t\t\t</div>\n\t\t\t)}\n\t\t\t<ul {...groupProps}>\n\t\t\t\t{[...state.collection.getChildren!(section.key)].map(node => (\n\t\t\t\t\t<Option key={node.key} item={node} state={state} />\n\t\t\t\t))}\n\t\t\t</ul>\n\t\t</li>\n\t);\n}\n\nexport type OptionProps<T extends Record<string, unknown>> = {\n\treadonly item: Node<T>;\n\treadonly state: ListState<T>;\n};\n\nfunction Option<T extends Record<string, unknown>>(props: OptionProps<T>) {\n\tconst {item, state} = props;\n\n\t// Get props for the option element\n\tconst ref = React.useRef(null);\n\tconst {isSelected, optionProps, isFocused, allowsSelection} = useOption(\n\t\t{key: item.key},\n\t\tstate,\n\t\tref,\n\t);\n\n\t// Determine whether we should show a keyboard\n\t// focus ring for accessibility\n\tconst {isFocusVisible, focusProps} = useFocusRing();\n\n\treturn (\n\t\t<li\n\t\t\t{...mergeProps(optionProps, focusProps)}\n\t\t\tref={ref}\n\t\t\tclassName={cx(\n\t\t\t\t'text-stone-300 p-2 border rounded border-transparent outline-none cursor-pointer data-[focus-visible=true]:border-stone-50',\n\t\t\t\tisSelected && 'bg-stone-50 text-stone-800',\n\t\t\t\tallowsSelection && !isSelected && 'hover:bg-stone-800',\n\t\t\t\tallowsSelection && isFocused && !isSelected && 'bg-stone-900',\n\t\t\t)}\n\t\t\tdata-focus-visible={isFocusVisible}\n\t\t>\n\t\t\t{item.rendered}\n\t\t</li>\n\t);\n}\n","import React, {type ForwardedRef, forwardRef} from 'react';\nimport {\n\ttype AriaPopoverProps,\n\tDismissButton,\n\tOverlay,\n\tusePopover,\n\tuseObjectRef,\n} from 'react-aria';\nimport type {OverlayTriggerState} from 'react-stately';\n\ntype PopoverProps = {\n\treadonly children: React.ReactNode;\n\treadonly state: OverlayTriggerState;\n} & Omit<AriaPopoverProps, 'popoverRef'>;\n\nconst Popover = forwardRef(function Popover(\n\tprops: PopoverProps,\n\tref: ForwardedRef<HTMLDivElement>,\n) {\n\tconst {children, state, offset = 8} = props;\n\n\tconst popoverRef = useObjectRef(ref);\n\n\tconst {popoverProps, underlayProps, arrowProps, placement} = usePopover(\n\t\t{\n\t\t\t...props,\n\t\t\toffset,\n\t\t\tpopoverRef,\n\t\t},\n\t\tstate,\n\t);\n\n\t// Const combinedOverlayStyle = {\n\t// \t...popoverProps.style,\n\t// \toverflow: 'visible',\n\t// };\n\t// style={combinedOverlayStyle}\n\n\treturn (\n\t\t<Overlay>\n\t\t\t<div {...underlayProps} className='fixed inset-0' />\n\t\t\t<div\n\t\t\t\t{...popoverProps}\n\t\t\t\tref={popoverRef}\n\t\t\t\tclassName='scroll-smooth rounded border border-stone-500 bg-stone-900 scrollbar-thin scrollbar-track-transparent scrollbar-thumb-stone-50 scrollbar-thumb-rounded'\n\t\t\t>\n\t\t\t\t<svg\n\t\t\t\t\t{...arrowProps}\n\t\t\t\t\tclassName='absolute size-4 fill-stone-900 stroke-stone-500 stroke-[0.5px] data-[placement=bottom]:bottom-full\n\t\t\t\t\t data-[placement=left]:left-full\n\t\t\t\t\t data-[placement=right]:right-full data-[placement=top]:top-full data-[placement=bottom]:-translate-x-1/2\n\t\t\t\t\t data-[placement=bottom]:rotate-180 data-[placement=left]:-rotate-90\n\t\t\t\t\t data-[placement=right]:rotate-90'\n\t\t\t\t\tdata-placement={placement}\n\t\t\t\t\tviewBox='0 0 12 12'\n\t\t\t\t>\n\t\t\t\t\t<path d='M0 0 L6 6 L12 0' />\n\t\t\t\t</svg>\n\t\t\t\t<DismissButton onDismiss={state.close} />\n\t\t\t\t{children}\n\t\t\t\t<DismissButton onDismiss={state.close} />\n\t\t\t</div>\n\t\t</Overlay>\n\t);\n});\n\nexport {Popover};\n","import React, {type ReactNode, RefObject} from 'react';\nimport {useSelectState, type SelectStateOptions} from 'react-stately';\nimport {\n\tuseSelect,\n\ttype AriaSelectProps,\n\tHiddenSelect,\n\ttype Placement,\n\tuseObjectRef,\n} from 'react-aria';\n// @ts-expect-error bad typings\nimport ArrowDropDown from '@material-design-icons/svg/round/arrow_drop_down.svg';\nimport {Button} from './button/button.tsx';\nimport {Popover} from './popover.tsx';\nimport {ListBox} from './list-box.tsx';\nimport {cx} from './cva.ts';\n\nexport type SelectProps<T extends Record<string, unknown>> = {\n\treadonly className?: string;\n\treadonly placeholder?: ReactNode;\n\treadonly popoverPlacement?: Placement;\n\treadonly selectRef?: RefObject<HTMLButtonElement>;\n} & AriaSelectProps<T> &\n\tSelectStateOptions<T>;\n\nexport function Select<T extends Record<string, unknown>>(\n\tprops: SelectProps<T>,\n) {\n\tconst {\n\t\tclassName,\n\t\tlabel,\n\t\tisDisabled,\n\t\tname,\n\t\tplaceholder,\n\t\tisRequired,\n\t\tselectRef,\n\t\tpopoverPlacement = 'bottom start',\n\t} = props;\n\tconst state = useSelectState({\n\t\tvalidationBehavior: 'native',\n\t\t...props,\n\t});\n\tconst {selectedItem, isFocused, isOpen} = state;\n\n\tconst triggerRef = useObjectRef(selectRef);\n\n\tconst {\n\t\tlabelProps,\n\t\ttriggerProps,\n\t\tvalueProps,\n\t\tmenuProps,\n\t\tisInvalid,\n\t\tvalidationErrors,\n\t\terrorMessageProps,\n\t} = useSelect(\n\t\t{\n\t\t\tvalidationBehavior: 'native',\n\t\t\t...props,\n\t\t},\n\t\tstate,\n\t\ttriggerRef,\n\t);\n\n\treturn (\n\t\t<div className={cx('w-fit group', className)}>\n\t\t\t{label && (\n\t\t\t\t<div\n\t\t\t\t\t{...labelProps}\n\t\t\t\t\tdata-disabled={isDisabled}\n\t\t\t\t\tclassName={cx(\n\t\t\t\t\t\t'text-stone-400 text-sm mb-1 data-[disabled=true]:text-stone-500 transition-color',\n\t\t\t\t\t\t(isFocused || isOpen) && 'text-stone-50',\n\t\t\t\t\t\tisRequired && 'after:content-[\"*\"] after:ms-0.5',\n\t\t\t\t\t)}\n\t\t\t\t>\n\t\t\t\t\t{label}\n\t\t\t\t</div>\n\t\t\t)}\n\t\t\t<HiddenSelect\n\t\t\t\tisDisabled={isDisabled}\n\t\t\t\tstate={state}\n\t\t\t\ttriggerRef={triggerRef}\n\t\t\t\tlabel={label}\n\t\t\t\tname={name}\n\t\t\t/>\n\t\t\t<Button\n\t\t\t\t{...triggerProps}\n\t\t\t\tbuttonRef={triggerRef}\n\t\t\t\tvariant='outlined'\n\t\t\t\tisDisabled={isDisabled}\n\t\t\t\tclassName={cx(\n\t\t\t\t\t'w-full flex group-focus-within:glow',\n\t\t\t\t\tisOpen && 'glow-sm shadow-stone-800 border-stone-50',\n\t\t\t\t)}\n\t\t\t>\n\t\t\t\t<span {...valueProps} className='grow text-left'>\n\t\t\t\t\t{selectedItem\n\t\t\t\t\t\t? selectedItem.rendered\n\t\t\t\t\t\t: (placeholder ?? 'Selecciona una opción')}\n\t\t\t\t</span>\n\t\t\t\t<ArrowDropDown aria-hidden='true' className='fill-current' />\n\t\t\t</Button>\n\t\t\t{isOpen && (\n\t\t\t\t<Popover\n\t\t\t\t\tstate={state}\n\t\t\t\t\ttriggerRef={triggerRef}\n\t\t\t\t\tplacement={popoverPlacement}\n\t\t\t\t>\n\t\t\t\t\t{/** @ts-expect-error children not necessary **/}\n\t\t\t\t\t<ListBox\n\t\t\t\t\t\t{...menuProps}\n\t\t\t\t\t\tstate={state}\n\t\t\t\t\t\tclassName='max-h-96'\n\t\t\t\t\t/>\n\t\t\t\t</Popover>\n\t\t\t)}\n\t\t\t{isInvalid && (\n\t\t\t\t<div\n\t\t\t\t\t{...errorMessageProps}\n\t\t\t\t\tclassName='mt-1 text-xs text-red-400'\n\t\t\t\t>\n\t\t\t\t\t{validationErrors.join(' ')}\n\t\t\t\t</div>\n\t\t\t)}\n\t\t</div>\n\t);\n}\n","'use client';\nimport React from 'react';\nimport {\n\tuseSeparator,\n\ttype SeparatorProps as AriaSeparatorProps,\n} from 'react-aria';\nimport {cx} from './cva.ts';\n\nexport type SeparatorProps = {\n\treadonly className?: string;\n} & AriaSeparatorProps;\n\nexport function Separator(props: SeparatorProps) {\n\tconst {className, orientation = 'horizontal'} = props;\n\tconst {separatorProps} = useSeparator(props);\n\n\treturn (\n\t\t<div\n\t\t\t{...separatorProps}\n\t\t\tclassName={cx(\n\t\t\t\t'bg-stone-800',\n\t\t\t\torientation === 'horizontal' && 'h-[1px] w-full my-8',\n\t\t\t\torientation === 'vertical' && 'w-[1px] h-full mx-8',\n\t\t\t\tclassName,\n\t\t\t)}\n\t\t/>\n\t);\n}\n","'use client';\n\nimport React, {type ReactNode, useRef} from 'react';\nimport {type AriaModalOverlayProps, Overlay, useModalOverlay} from 'react-aria';\nimport {type OverlayTriggerState} from 'react-stately';\nimport {motion} from 'framer-motion';\n\nexport type SidebarProps = {\n\treadonly state: OverlayTriggerState;\n\treadonly children: ReactNode;\n} & AriaModalOverlayProps;\n\nexport function Sidebar(props: SidebarProps) {\n\tconst {state, children} = props;\n\n\tconst ref = useRef<HTMLDivElement>(null);\n\n\tconst {modalProps, underlayProps} = useModalOverlay(props, state, ref);\n\n\t// High z-index required to overlay over Leaflet maps\n\treturn (\n\t\t<Overlay>\n\t\t\t{/** @ts-expect-error react-aria doesn't use animation props **/}\n\t\t\t<motion.div\n\t\t\t\tclassName='fixed inset-0 z-[1200] flex flex-row-reverse'\n\t\t\t\tanimate={{\n\t\t\t\t\tbackground: 'rgba(0,0,0,0.5)',\n\t\t\t\t}}\n\t\t\t\tinitial={{\n\t\t\t\t\tbackground: 'rgba(0, 0, 0, 0)',\n\t\t\t\t}}\n\t\t\t\texit={{\n\t\t\t\t\tbackground: 'rgba(0, 0, 0, 0)',\n\t\t\t\t}}\n\t\t\t\t{...underlayProps}\n\t\t\t>\n\t\t\t\t{/** @ts-expect-error react-aria doesn't use animation props **/}\n\t\t\t\t<motion.div\n\t\t\t\t\t{...modalProps}\n\t\t\t\t\tref={ref}\n\t\t\t\t\tanimate={{\n\t\t\t\t\t\tright: 0,\n\t\t\t\t\t}}\n\t\t\t\t\tinitial={{\n\t\t\t\t\t\tright: '-100%',\n\t\t\t\t\t}}\n\t\t\t\t\texit={{\n\t\t\t\t\t\tright: '-100%',\n\t\t\t\t\t}}\n\t\t\t\t\tclassName='relative border border-stone-800 bg-stone-950'\n\t\t\t\t>\n\t\t\t\t\t{children}\n\t\t\t\t</motion.div>\n\t\t\t</motion.div>\n\t\t</Overlay>\n\t);\n}\n","'use client';\nimport React, {type ReactElement, type ReactNode} from 'react';\nimport {type OverlayTriggerProps, useOverlayTriggerState} from 'react-stately';\nimport {useOverlayTrigger} from 'react-aria';\nimport {AnimatePresence} from 'framer-motion';\nimport {Button} from '@/button/button.tsx';\nimport {type ButtonVariantProps} from '@/button/button-variants.tsx';\nimport {Sidebar} from '@/sidebar.tsx';\n\nexport type SidebarTriggerProps = {\n\treadonly children: ReactElement;\n\treadonly icon: ReactNode;\n\treadonly className?: string;\n} & OverlayTriggerProps &\n\tButtonVariantProps;\n\nexport function SidebarTrigger(props: SidebarTriggerProps) {\n\tconst {children, icon} = props;\n\n\tconst state = useOverlayTriggerState(props);\n\tconst {triggerProps, overlayProps} = useOverlayTrigger(\n\t\t{type: 'dialog'},\n\t\tstate,\n\t);\n\n\treturn (\n\t\t<>\n\t\t\t<Button {...props} {...triggerProps}>\n\t\t\t\t{icon}\n\t\t\t</Button>\n\t\t\t<AnimatePresence>\n\t\t\t\t{state.isOpen && (\n\t\t\t\t\t<Sidebar isDismissable {...props} state={state}>\n\t\t\t\t\t\t{React.cloneElement(children, overlayProps)}\n\t\t\t\t\t</Sidebar>\n\t\t\t\t)}\n\t\t\t</AnimatePresence>\n\t\t</>\n\t);\n}\n","'use client';\n\nimport React from 'react';\nimport {\n\tSwitchProps as AriaSwitchProps,\n\tSwitch as AriaSwitch,\n} from 'react-aria-components';\nimport {twMerge} from 'tailwind-merge';\n\nexport type SwitchProps = {\n\treadonly className?: string;\n\treadonly label?: string;\n} & AriaSwitchProps;\n\nexport function Switch(props: SwitchProps) {\n\tconst {label, className, ...rest} = props;\n\n\treturn (\n\t\t<AriaSwitch\n\t\t\t{...rest}\n\t\t\tclassName={twMerge(\n\t\t\t\t'group flex items-center gap-1 text-stone-300 text-sm',\n\t\t\t\tclassName,\n\t\t\t)}\n\t\t>\n\t\t\t<div className='me-2 w-[calc(theme(spacing.8)+4px)] rounded-full border border-stone-300 p-px transition-colors group-data-[selected=true]:border-stone-50 group-data-[selected=true]:bg-neutral-50'>\n\t\t\t\t<div className='size-4 rounded-full bg-stone-100 transition-all group-data-[selected=true]:translate-x-full group-data-[selected=true]:bg-stone-900' />\n\t\t\t</div>\n\t\t\t{label}\n\t\t</AriaSwitch>\n\t);\n}\n","'use client';\nimport React, {createContext, type ReactNode, useContext, useRef} from 'react';\nimport {type ToastState, useToastState} from '@react-stately/toast';\nimport {\n\ttype AriaToastProps,\n\ttype AriaToastRegionProps,\n\tuseToast,\n\tuseToastRegion,\n} from '@react-aria/toast';\nimport {AnimatePresence, motion, type Variants} from 'framer-motion';\nimport {omit} from 'lodash';\n// @ts-expect-error bad typings\nimport Close from '@material-design-icons/svg/round/close.svg';\nimport {Button} from './button/button.tsx';\nimport {cx} from './cva.ts';\n\nexport type ToastContent = {\n\tvariant?: 'success' | 'warn' | 'error';\n\ttitle: string;\n\ticon?: ReactNode;\n\tdescription?: string;\n};\n\ntype ToastProps = {\n\treadonly state: ToastState<ToastContent>;\n} & AriaToastProps<ToastContent>;\n\nconst toastVariants: Variants = {\n\tentering: {\n\t\topacity: 1,\n\t\ttop: 'auto',\n\t\tbottom: 'auto',\n\t\tright: 0,\n\t},\n\tinitial: {\n\t\topacity: 1,\n\t\ttop: 'auto',\n\t\tbottom: 128,\n\t\tright: 0,\n\t},\n\tinitialQueued: {\n\t\topacity: 0,\n\t\ttop: 256,\n\t\tright: 0,\n\t\tbottom: 'auto',\n\t},\n\texiting: {\n\t\tright: '-110%',\n\t},\n};\n\nfunction Toast(props: ToastProps) {\n\tconst {state, toast} = props;\n\tconst {animation, content} = toast;\n\tconst {title, description, icon, variant = 'success'} = content;\n\tconst ref = useRef<HTMLDivElement>(null);\n\tconst {toastProps, titleProps, descriptionProps, closeButtonProps} =\n\t\tuseToast(props, state, ref);\n\n\treturn (\n\t\t<motion.div\n\t\t\t{...omit(toastProps, [\n\t\t\t\t'onAnimationEnd',\n\t\t\t\t'onAnimationStart',\n\t\t\t\t'onDragStart',\n\t\t\t\t'onDragEnd',\n\t\t\t\t'onDrag',\n\t\t\t])}\n\t\t\tref={ref}\n\t\t\tlayout\n\t\t\tinitial={animation === 'queued' ? 'initialQueued' : 'initial'}\n\t\t\tanimate='entering'\n\t\t\texit='exiting'\n\t\t\tvariants={toastVariants}\n\t\t\tclassName={cx(\n\t\t\t\t'rounded flex p-2 items-center gap-2 relative max-w-2xl',\n\t\t\t\tvariant === 'success' && 'bg-green-400',\n\t\t\t\tvariant === 'error' && 'bg-red-400',\n\t\t\t\tvariant === 'warn' && 'bg-yellow-400',\n\t\t\t)}\n\t\t>\n\t\t\t<div>\n\t\t\t\t<div\n\t\t\t\t\t{...titleProps}\n\t\t\t\t\tclassName='flex gap-1 font-semibold text-stone-800'\n\t\t\t\t>\n\t\t\t\t\t{icon}\n\t\t\t\t\t{title}\n\t\t\t\t</div>\n\t\t\t\t{description && (\n\t\t\t\t\t<div {...descriptionProps} className='text-stone-700'>\n\t\t\t\t\t\t{description}\n\t\t\t\t\t</div>\n\t\t\t\t)}\n\t\t\t</div>\n\n\t\t\t{!toast.timeout && (\n\t\t\t\t<Button\n\t\t\t\t\t{...closeButtonProps}\n\t\t\t\t\tvariant='text'\n\t\t\t\t\tsize='xs'\n\t\t\t\t\tclassName={cx(\n\t\t\t\t\t\t'text-stone-800',\n\t\t\t\t\t\tvariant === 'success' && 'enabled:hover:bg-green-500',\n\t\t\t\t\t\tvariant === 'warn' && 'enabled:hover:bg-yellow-500',\n\t\t\t\t\t\tvariant === 'error' && 'enabled:hover:bg-red-500',\n\t\t\t\t\t)}\n\t\t\t\t>\n\t\t\t\t\t<Close className='fill-current' />\n\t\t\t\t</Button>\n\t\t\t)}\n\t\t</motion.div>\n\t);\n}\n\ntype ToastRegionProps = {\n\treadonly state: ToastState<ToastContent>;\n} & AriaToastRegionProps;\n\nfunction ToastRegion(props: ToastRegionProps) {\n\tconst {state} = props;\n\tconst ref = useRef<HTMLDivElement>(null);\n\n\tconst {regionProps} = useToastRegion(props, state, ref);\n\treturn (\n\t\t<motion.div\n\t\t\t{...omit(regionProps, [\n\t\t\t\t'onAnimationEnd',\n\t\t\t\t'onAnimationStart',\n\t\t\t\t'onDragStart',\n\t\t\t\t'onDragEnd',\n\t\t\t\t'onDrag',\n\t\t\t])}\n\t\t\tref={ref}\n\t\t\tlayout\n\t\t\tclassName='fixed bottom-4 right-4 z-[1050] flex flex-col gap-4 outline-none'\n\t\t>\n\t\t\t<AnimatePresence>\n\t\t\t\t{state.visibleToasts.map(toast => (\n\t\t\t\t\t<Toast key={toast.key} toast={toast} state={state} />\n\t\t\t\t))}\n\t\t\t</AnimatePresence>\n\t\t</motion.div>\n\t);\n}\n\nconst toastContext = createContext<ToastState<ToastContent> | null>(null);\n\nexport function useToasts() {\n\tconst toasts = useContext(toastContext);\n\tif (toasts === null) {\n\t\tthrow new Error('useToast must be called within a ToastProvider');\n\t}\n\n\treturn toasts;\n}\n\nexport type ToastProviderProps = {\n\treadonly children: ReactNode;\n};\n\nexport function ToastProvider(props: ToastProviderProps) {\n\tconst {children} = props;\n\tconst state = useToastState<ToastContent>({\n\t\tmaxVisibleToasts: 5,\n\t});\n\n\treturn (\n\t\t<>\n\t\t\t<toastContext.Provider value={state}>\n\t\t\t\t{children}\n\t\t\t</toastContext.Provider>\n\t\t\t<ToastRegion {...props} state={state} />\n\t\t</>\n\t);\n}\n","'use client';\n\nimport {useEffect} from 'react';\nimport {type ToastContent, useToasts} from './toast.tsx';\n\n/**\n * Represents the properties for HashSpyToaster component.\n */\nexport type HashSpyToasterProps = {\n\treadonly toast: ToastContent;\n\treadonly hash: string;\n};\n\n/**\n * Displays a toast message if the current hash matches one of the specified hashes.\n *\n * @param {HashSpyToasterProps} props - The props object containing toast and hash values.\n *\n * @returns {null} - This method does not return any value.\n */\nexport function HashSpyToaster(props: HashSpyToasterProps): null {\n\tconst {toast, hash} = props;\n\n\tconst toasts = useToasts();\n\n\tuseEffect(() => {\n\t\tconst hashes = window.location.hash.slice(1).split(',');\n\t\tif (hashes.includes(hash)) {\n\t\t\ttoasts.add(toast);\n\t\t}\n\t\t// eslint-disable-next-line react-hooks/exhaustive-deps\n\t}, [toast, hash]);\n\n\treturn null;\n}\n","import {Key, ListProps, useListState} from 'react-stately';\n\nexport type ReorderableListStateProps<T extends Record<string, unknown>> = {\n\treadonly onReorder: (key: Key, previous?: Key, next?: Key) => void;\n} & ListProps<T>;\n\nexport default function useReorderableListState<\n\tT extends Record<string, unknown>,\n>(props: ReorderableListStateProps<T>) {\n\tconst {onReorder} = props;\n\tconst state = useListState(props);\n\n\treturn {\n\t\t...state,\n\t\treorder(key: Key, previous?: Key, next?: Key) {\n\t\t\tonReorder(key, previous, next);\n\t\t},\n\t};\n}\n","import React from 'react';\n\nexport function Spacer() {\n\treturn <div className='grow' />;\n}\n","import React, {useMemo, useState} from 'react';\nimport {Map, Seq} from 'immutable';\nimport {type Key} from 'react-stately';\n// @ts-expect-error bad typings\nimport DragHandle from '@material-design-icons/svg/round/drag_handle.svg';\n// @ts-expect-error bad typings\nimport Remove from '@material-design-icons/svg/round/remove.svg';\nimport {Spacer} from '@/spacer.tsx';\nimport {Button} from '@/button/button.tsx';\nimport useReorderableListState, {\n\ttype ReorderableListStateProps,\n} from '@/hooks/use-reorderable-list-state.ts';\nimport {cx} from '@/cva.ts';\n\nexport type ListPrioritizerProps<T extends Record<string, unknown>> = {\n\treadonly onRemove: (key: Key) => void;\n\treadonly className?: string;\n} & ReorderableListStateProps<T>;\n\nexport function ListPrioritizer<T extends Record<string, unknown>>(\n\tprops: ListPrioritizerProps<T>,\n) {\n\tconst {onRemove, className} = props;\n\n\tconst {collection, reorder} = useReorderableListState(props);\n\n\tconst [dragStartY, setDragStartY] = useState(0);\n\n\tconst [deltaY, setDeltaY] = useState(0);\n\n\tconst [activityReferences, setActivityReferences] =\n\t\tuseState<Map<Key, HTMLDivElement>>(Map());\n\n\tconst [draggedActivity, setDraggedActivity] = useState<Key | undefined>();\n\n\tconst handleMove = (deltaY: number, key: Key) => {\n\t\tsetDeltaY(deltaY);\n\n\t\tconst previousKey = collection.getKeyBefore(key);\n\t\tif (previousKey !== null && previousKey !== undefined) {\n\t\t\tconst previousContainer = activityReferences.get(key);\n\t\t\tif (\n\t\t\t\tpreviousContainer !== undefined &&\n\t\t\t\tdeltaY < -(previousContainer.clientHeight / 2)\n\t\t\t) {\n\t\t\t\tsetDragStartY(previousContainer.getBoundingClientRect().y);\n\t\t\t\tsetDeltaY(0);\n\t\t\t\treorder(key, previousKey);\n\t\t\t}\n\t\t}\n\n\t\tconst nextKey = collection.getKeyAfter(key);\n\t\tif (nextKey !== null && nextKey !== undefined) {\n\t\t\tconst nextContainer = activityReferences.get(key);\n\t\t\tif (\n\t\t\t\tnextContainer !== undefined &&\n\t\t\t\tdeltaY > nextContainer.clientHeight\n\t\t\t) {\n\t\t\t\tsetDragStartY(\n\t\t\t\t\tnextContainer.getBoundingClientRect().y +\n\t\t\t\t\t\tnextContainer.clientHeight / 2,\n\t\t\t\t);\n\t\t\t\tsetDeltaY(0);\n\t\t\t\treorder(key, undefined, nextKey);\n\t\t\t}\n\t\t}\n\t};\n\n\tconst touchStartHandler = (key: Key) => (event: React.TouchEvent) => {\n\t\tsetDraggedActivity(key);\n\t\tconst rect = event.currentTarget.getBoundingClientRect();\n\t\tsetDragStartY(rect.y + rect.height / 2);\n\t};\n\n\tconst dragStartHandler = (key: Key) => (event: React.DragEvent) => {\n\t\tevent.dataTransfer.setDragImage(new Image(), 0, 0);\n\t\tsetDraggedActivity(key);\n\t\tconst rect = event.currentTarget.getBoundingClientRect();\n\t\tsetDragStartY(rect.y + rect.height / 2);\n\t};\n\n\tconst touchHandler = (key: Key) => (event: React.TouchEvent) => {\n\t\tif (event.touches.length !== 1) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst deltaY = event.touches[0].clientY - dragStartY;\n\n\t\thandleMove(deltaY, key);\n\t};\n\n\tconst dragHandler = (key: Key) => (event: React.DragEvent) => {\n\t\tif (event.clientY === 0) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst deltaY = event.clientY - dragStartY;\n\n\t\thandleMove(deltaY, key);\n\t};\n\n\tconst dragEndHandler = () => {\n\t\tsetDraggedActivity(undefined);\n\t\tsetDragStartY(0);\n\t\tsetDeltaY(0);\n\t};\n\n\tconst draggedActivityOffset = useMemo(() => {\n\t\tif (draggedActivity === undefined) {\n\t\t\treturn;\n\t\t}\n\n\t\tif (draggedActivity === collection.getFirstKey() && deltaY < 0) {\n\t\t\treturn '0px';\n\t\t}\n\n\t\tif (draggedActivity === collection.getLastKey() && deltaY > 0) {\n\t\t\treturn '0px';\n\t\t}\n\n\t\treturn `${deltaY}px`;\n\t}, [collection, deltaY, draggedActivity]);\n\n\treturn (\n\t\t<div\n\t\t\tclassName={cx(\n\t\t\t\t'grow basis-5/12 border border-stone-700 rounded divide-stone-700 divide-y',\n\t\t\t\tclassName,\n\t\t\t)}\n\t\t>\n\t\t\t{Seq(collection).map(activity => (\n\t\t\t\t<div\n\t\t\t\t\tkey={activity.key}\n\t\t\t\t\tclassName='relative'\n\t\t\t\t\tstyle={{\n\t\t\t\t\t\theight:\n\t\t\t\t\t\t\tdraggedActivity === activity.key\n\t\t\t\t\t\t\t\t? `${activityReferences.get(activity.key)?.clientHeight ?? 0}px`\n\t\t\t\t\t\t\t\t: undefined,\n\t\t\t\t\t}}\n\t\t\t\t>\n\t\t\t\t\t<div\n\t\t\t\t\t\tref={element => {\n\t\t\t\t\t\t\tif (element !== null) {\n\t\t\t\t\t\t\t\tsetActivityReferences(current =>\n\t\t\t\t\t\t\t\t\tcurrent.set(activity.key, element),\n\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}}\n\t\t\t\t\t\tclassName={cx(\n\t\t\t\t\t\t\tdraggedActivity === activity.key &&\n\t\t\t\t\t\t\t\t'absolute z-10 bg-stone-900 w-full border-y border-stone-700',\n\t\t\t\t\t\t\tdraggedActivity === undefined &&\n\t\t\t\t\t\t\t\t'hover:bg-stone-900',\n\t\t\t\t\t\t\t'flex items-center gap-4 rounded grow text-stone-200 p-2 group select-none left-0',\n\t\t\t\t\t\t)}\n\t\t\t\t\t\tstyle={{\n\t\t\t\t\t\t\ttop:\n\t\t\t\t\t\t\t\tdraggedActivity === activity.key\n\t\t\t\t\t\t\t\t\t? draggedActivityOffset\n\t\t\t\t\t\t\t\t\t: undefined,\n\t\t\t\t\t\t}}\n\t\t\t\t\t>\n\t\t\t\t\t\t<div\n\t\t\t\t\t\t\tdraggable\n\t\t\t\t\t\t\tclassName='cursor-grab touch-none fill-stone-400'\n\t\t\t\t\t\t\tonTouchStart={touchStartHandler(activity.key)}\n\t\t\t\t\t\t\tonTouchMove={touchHandler(activity.key)}\n\t\t\t\t\t\t\tonTouchEnd={dragEndHandler}\n\t\t\t\t\t\t\tonDragStart={dragStartHandler(activity.key)}\n\t\t\t\t\t\t\tonDrag={dragHandler(activity.key)}\n\t\t\t\t\t\t\tonDragEnd={dragEndHandler}\n\t\t\t\t\t\t>\n\t\t\t\t\t\t\t<DragHandle />\n\t\t\t\t\t\t</div>\n\n\t\t\t\t\t\t{activity.rendered}\n\t\t\t\t\t\t<Spacer />\n\t\t\t\t\t\t<Button\n\t\t\t\t\t\t\tclassName='bg-transparent hover:bg-stone-700'\n\t\t\t\t\t\t\tvariant='text'\n\t\t\t\t\t\t\tonPress={() => {\n\t\t\t\t\t\t\t\tonRemove(activity.key);\n\t\t\t\t\t\t\t}}\n\t\t\t\t\t\t>\n\t\t\t\t\t\t\t<Remove className='fill-current' />\n\t\t\t\t\t\t</Button>\n\t\t\t\t\t</div>\n\t\t\t\t</div>\n\t\t\t))}\n\t\t</div>\n\t);\n}\n","import React, {type RefObject} from 'react';\nimport {\n\ttype AriaGridListProps,\n\tuseGridList,\n\tuseGridListItem,\n\tuseFocusRing,\n\tmergeProps,\n\tuseGridListSelectionCheckbox,\n\tuseObjectRef,\n} from 'react-aria';\nimport {\n\tuseListState,\n\ttype ListProps as ListStateProps,\n\ttype ListState,\n\ttype Node,\n} from 'react-stately';\nimport {Checkbox} from './checkbox.tsx';\nimport {cx} from './cva.ts';\n\nexport type ListProps<T extends Record<string, unknown>> = {\n\treadonly className?: string;\n\treadonly listRef?: RefObject<HTMLUListElement>;\n} & AriaGridListProps<T> &\n\tListStateProps<T>;\n\nexport function List<T extends Record<string, unknown>>(props: ListProps<T>) {\n\tconst {className} = props;\n\tconst state = useListState(props);\n\tconst listRef = useObjectRef(props.listRef);\n\n\tconst {gridProps} = useGridList(props, state, listRef);\n\n\treturn (\n\t\t<ul\n\t\t\t{...gridProps}\n\t\t\tref={listRef}\n\t\t\tclassName={cx(\n\t\t\t\t'border border-stone-700 divide-y divide-stone-700 rounded',\n\t\t\t\tclassName,\n\t\t\t)}\n\t\t>\n\t\t\t{[...state.collection].map(item => (\n\t\t\t\t<ListItem key={item.key} item={item} state={state} />\n\t\t\t))}\n\t\t</ul>\n\t);\n}\n\ntype ListItemProps<T extends Record<string, unknown>> = {\n\treadonly state: ListState<T>;\n\treadonly item: Node<T>;\n\treadonly listItemRef?: RefObject<HTMLLIElement>;\n};\n\nfunction ListCheckbox<T extends Record<string, unknown>>(\n\tprops: ListItemProps<T>,\n) {\n\tconst {state, item} = props;\n\tconst {checkboxProps} = useGridListSelectionCheckbox(\n\t\t{\n\t\t\tkey: item.key,\n\t\t},\n\t\tstate,\n\t);\n\treturn <Checkbox {...checkboxProps} />;\n}\n\nexport function ListItem<T extends Record<string, unknown>>(\n\tprops: ListItemProps<T>,\n) {\n\tconst {item, state} = props;\n\tconst itemRef = useObjectRef(props.listItemRef);\n\tconst {rowProps, gridCellProps} = useGridListItem(\n\t\t{node: item},\n\t\tstate,\n\t\titemRef,\n\t);\n\n\tconst {focusProps} = useFocusRing();\n\n\tconst selectable =\n\t\tstate.selectionManager.selectionMode !== 'none' &&\n\t\tstate.selectionManager.selectionBehavior === 'toggle';\n\n\treturn (\n\t\t<li\n\t\t\t{...mergeProps(rowProps, focusProps)}\n\t\t\tref={itemRef}\n\t\t\tclassName={cx('p-2', selectable && 'cursor-pointer')}\n\t\t>\n\t\t\t<div\n\t\t\t\t{...gridCellProps}\n\t\t\t\tclassName={cx('text-stone-300 flex items-center gap-4')}\n\t\t\t>\n\t\t\t\t{selectable && <ListCheckbox state={state} item={item} />}\n\t\t\t\t{item.rendered}\n\t\t\t</div>\n\t\t</li>\n\t);\n}\n","import React from 'react';\nimport {cx} from './cva.ts';\n\nexport type LoadingSpinnerProps = {\n\treadonly className?: string;\n};\n\nexport function LoadingSpinner(props: LoadingSpinnerProps) {\n\tconst {className} = props;\n\treturn (\n\t\t<svg\n\t\t\tclassName={cx('animate-spin w-4 h-4', className)}\n\t\t\tviewBox='0 0 50 50'\n\t\t>\n\t\t\t<circle\n\t\t\t\tclassName='animate-spin-path stroke-current stroke-4'\n\t\t\t\tcx='25'\n\t\t\t\tcy='25'\n\t\t\t\tr='20'\n\t\t\t\tfill='none'\n\t\t\t\tstrokeWidth='5'\n\t\t\t/>\n\t\t</svg>\n\t);\n}\n","import {type ReactNode, type RefObject} from 'react';\nimport {\n\ttype AriaNumberFieldProps,\n\tuseLocale,\n\tuseNumberField,\n\tuseObjectRef,\n} from 'react-aria';\nimport {type NumberFieldStateOptions, useNumberFieldState} from 'react-stately';\nimport {twJoin} from 'tailwind-merge';\n// @ts-expect-error bad typings\nimport ArrowDropDown from '@material-design-icons/svg/round/arrow_drop_down.svg';\n// @ts-expect-error bad typings\nimport ArrowDropUp from '@material-design-icons/svg/round/arrow_drop_up.svg';\nimport {Button} from '@/button/button.tsx';\nimport {cx} from '@/cva.ts';\n\nexport type NumberFieldProps = {\n\treadonly className?: string;\n\treadonly name?: string;\n\treadonly icon?: ReactNode;\n\treadonly inputRef?: RefObject<HTMLInputElement>;\n} & AriaNumberFieldProps &\n\tOmit<NumberFieldStateOptions, 'locale'>;\n\nexport function NumberField(props: NumberFieldProps) {\n\tconst {locale} = useLocale();\n\tconst {label, className, icon, isDisabled, name, isRequired} = props;\n\tconst state = useNumberFieldState({\n\t\tvalidationBehavior: 'native',\n\t\t...props,\n\t\tlocale,\n\t});\n\tconst inputRef = useObjectRef(props.inputRef);\n\tconst {\n\t\tlabelProps,\n\t\tgroupProps,\n\t\tinputProps,\n\t\tincrementButtonProps,\n\t\tdecrementButtonProps,\n\t\terrorMessageProps,\n\t\tisInvalid,\n\t\tvalidationErrors,\n\t} = useNumberField(\n\t\t{\n\t\t\tvalidationBehavior: 'native',\n\t\t\t...props,\n\t\t},\n\t\tstate,\n\t\tinputRef,\n\t);\n\treturn (\n\t\t<div data-disabled={isDisabled} className={twJoin('group', className)}>\n\t\t\t<label\n\t\t\t\t{...labelProps}\n\t\t\t\tclassName={cx(\n\t\t\t\t\t'block text-stone-400 group-focus-within:text-stone-50 text-sm mb-1 group-data-[disabled=true]:text-stone-500 transition-colors',\n\t\t\t\t\tisRequired && 'after:content-[\"*\"] after:ml-0.5',\n\t\t\t\t)}\n\t\t\t>\n\t\t\t\t{label}\n\t\t\t</label>\n\n\t\t\t<div\n\t\t\t\t{...groupProps}\n\t\t\t\tclassName='flex w-full items-center gap-2 rounded border border-stone-700 ps-2 shadow-stone-800 transition-all group-focus-within:border-stone-50 group-focus-within:glow-sm group-data-[disabled=true]:border-stone-800'\n\t\t\t>\n\t\t\t\t{icon}\n\t\t\t\t<input\n\t\t\t\t\t{...inputProps}\n\t\t\t\t\tref={inputRef}\n\t\t\t\t\tname={name}\n\t\t\t\t\tclassName='min-w-0 grow bg-transparent py-2 text-stone-200 outline-none disabled:cursor-not-allowed disabled:text-stone-600'\n\t\t\t\t/>\n\t\t\t\t<div className='flex-none basis-4 flex-col items-center justify-around fill-stone-400'>\n\t\t\t\t\t<Button {...incrementButtonProps} variant='text' size='xs'>\n\t\t\t\t\t\t<ArrowDropUp viewBox='0 0 24 24' className='size-4' />\n\t\t\t\t\t</Button>\n\t\t\t\t\t<Button {...decrementButtonProps} variant='text' size='xs'>\n\t\t\t\t\t\t<ArrowDropDown viewBox='0 0 24 24' className='size-4' />\n\t\t\t\t\t</Button>\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t\t{isInvalid && (\n\t\t\t\t<div\n\t\t\t\t\t{...errorMessageProps}\n\t\t\t\t\tclassName='mt-1 text-xs text-red-400'\n\t\t\t\t>\n\t\t\t\t\t{validationErrors.join(' ')}\n\t\t\t\t</div>\n\t\t\t)}\n\t\t</div>\n\t);\n}\n","import React, {type ReactElement, type ReactNode} from 'react';\nimport {type OverlayTriggerProps, useOverlayTriggerState} from 'react-stately';\nimport {mergeProps, type Placement, useOverlayTrigger} from 'react-aria';\n\nimport {Button, type ButtonProps} from '@/button/button.tsx';\n\nimport {Popover} from '@/popover.tsx';\n\nexport type PopoverButtonTriggerProps = {\n\treadonly className?: string;\n\treadonly label: ReactNode;\n\treadonly children: ReactElement;\n\treadonly placement: Placement;\n} & OverlayTriggerProps &\n\tButtonProps;\n\nexport function PopoverButtonTrigger(props: PopoverButtonTriggerProps) {\n\tconst {label, children, placement} = props;\n\tconst buttonRef = React.useRef<HTMLButtonElement>(null);\n\tconst state = useOverlayTriggerState(props);\n\tconst {triggerProps, overlayProps} = useOverlayTrigger(\n\t\t{type: 'dialog'},\n\t\tstate,\n\t\tbuttonRef,\n\t);\n\n\treturn (\n\t\t<>\n\t\t\t<Button {...mergeProps(triggerProps, props)} buttonRef={buttonRef}>\n\t\t\t\t{label}\n\t\t\t</Button>\n\t\t\t{state.isOpen && (\n\t\t\t\t<Popover\n\t\t\t\t\t{...props}\n\t\t\t\t\ttriggerRef={buttonRef}\n\t\t\t\t\tstate={state}\n\t\t\t\t\tplacement={placement}\n\t\t\t\t>\n\t\t\t\t\t{React.cloneElement(children, overlayProps)}\n\t\t\t\t</Popover>\n\t\t\t)}\n\t\t</>\n\t);\n}\n","'use client';\n\nimport React, {type ReactNode} from 'react';\nimport {motion} from 'framer-motion';\n\nexport type AnimatedLayoutContainerProps = {\n\treadonly children: ReactNode;\n\treadonly className?: string;\n};\n\nexport function AnimatedLayoutContainer(\n\tprops: AnimatedLayoutContainerProps,\n) {\n\tconst {children, className} = props;\n\treturn (\n\t\t<motion.div layout className={className}>\n\t\t\t{children}\n\t\t</motion.div>\n\t);\n}\n","import React, {useRef} from 'react';\nimport {\n\ttype AriaTagGroupProps,\n\ttype AriaTagProps,\n\tuseFocusRing,\n\tuseTag,\n\tuseTagGroup,\n} from 'react-aria';\nimport {Set} from 'immutable';\nimport {type Key, type ListState, type Node, useListState} from 'react-stately';\n// @ts-expect-error bad typings\nimport Close from '@material-design-icons/svg/round/close.svg';\nimport {Button} from './button/button.tsx';\n\nexport type TagGroupProps<T extends Record<string, unknown>> = {\n\treadonly className?: string;\n\treadonly onRemove?: (keys: Set<Key>) => void;\n} & Omit<AriaTagGroupProps<T>, 'onRemove'>;\n\nexport function TagGroup<T extends Record<string, unknown>>(\n\tprops: TagGroupProps<T>,\n) {\n\tconst {className, label, description, errorMessage, onRemove} = props;\n\tconst divRef = useRef<HTMLDivElement>(null);\n\n\tconst state = useListState(props);\n\n\tconst {gridProps, labelProps, descriptionProps, errorMessageProps} =\n\t\tuseTagGroup(\n\t\t\t{\n\t\t\t\t...props,\n\t\t\t\tonRemove:\n\t\t\t\t\tonRemove === undefined\n\t\t\t\t\t\t? undefined\n\t\t\t\t\t\t: keys => {\n\t\t\t\t\t\t\t\tonRemove(Set(keys));\n\t\t\t\t\t\t\t},\n\t\t\t},\n\t\t\tstate,\n\t\t\tdivRef,\n\t\t);\n\n\treturn (\n\t\t<div className={className}>\n\t\t\t<div {...labelProps} className='mb-1 text-sm text-stone-300'>\n\t\t\t\t{label}\n\t\t\t</div>\n\t\t\t<div {...gridProps} ref={divRef} className='flex flex-wrap gap-2'>\n\t\t\t\t{[...state.collection].map(item => (\n\t\t\t\t\t<Tag key={item.key} item={item} state={state} />\n\t\t\t\t))}\n\t\t\t</div>\n\t\t\t{description === undefined ? null : (\n\t\t\t\t<div {...descriptionProps}>{description}</div>\n\t\t\t)}\n\t\t\t{errorMessage === undefined ? null : (\n\t\t\t\t<div {...errorMessageProps}> {errorMessage} </div>\n\t\t\t)}\n\t\t</div>\n\t);\n}\n\ntype TagProps<T> = {\n\treadonly item: Node<T>;\n\treadonly state: ListState<T>;\n} & AriaTagProps<T>;\n\nfunction Tag<T>(props: TagProps<T>) {\n\tconst {item, state} = props;\n\n\tconst ref = useRef(null);\n\n\tconst {focusProps, isFocusVisible} = useFocusRing({\n\t\twithin: true,\n\t});\n\n\tconst {rowProps, gridCellProps, removeButtonProps, allowsRemoving} = useTag(\n\t\tprops,\n\t\tstate,\n\t\tref,\n\t);\n\n\treturn (\n\t\t<div\n\t\t\tref={ref}\n\t\t\t{...rowProps}\n\t\t\t{...focusProps}\n\t\t\tdata-focus-visible={isFocusVisible}\n\t\t>\n\t\t\t<div\n\t\t\t\t{...gridCellProps}\n\t\t\t\tclassName='flex items-center gap-2 rounded border border-stone-700 px-2 text-stone-300'\n\t\t\t>\n\t\t\t\t{item.rendered}\n\t\t\t\t{allowsRemoving && (\n\t\t\t\t\t<Button {...removeButtonProps} variant='text' size='sm'>\n\t\t\t\t\t\t<Close className='fill-current' />\n\t\t\t\t\t</Button>\n\t\t\t\t)}\n\t\t\t</div>\n\t\t</div>\n\t);\n}\n","import React, {type ReactNode, useRef} from 'react';\nimport {type AriaComboBoxProps, useComboBox} from 'react-aria';\nimport {\n\ttype ComboBoxState,\n\ttype ComboBoxStateOptions,\n\tuseComboBoxState,\n} from 'react-stately';\n// @ts-expect-error bad typings\nimport ArrowDropDown from '@material-design-icons/svg/round/arrow_drop_down.svg';\nimport {BaseListBox} from '@/list-box.tsx';\nimport {Button} from '@/button';\nimport {Popover} from '@/popover.tsx';\nimport {cx} from '@/cva.ts';\n\nexport type ComboBoxProps<T extends Record<string, unknown>> =\n\t| StatefulComboBoxProps<T>\n\t| BaseComboBoxProps<T>;\n\nexport function ComboBox<T extends Record<string, unknown>>(\n\tprops: ComboBoxProps<T>,\n) {\n\treturn 'state' in props ? (\n\t\t<BaseComboBox {...props} />\n\t) : (\n\t\t<StatefulComboBox {...props} />\n\t);\n}\n\nexport type StatefulComboBoxProps<T extends Record<string, unknown>> = Omit<\n\tBaseComboBoxProps<T>,\n\t'state'\n> &\n\tComboBoxStateOptions<T>;\n\nexport function StatefulComboBox<T extends Record<string, unknown>>(\n\tprops: StatefulComboBoxProps<T>,\n) {\n\tconst state = useComboBoxState<T>(props);\n\n\treturn <BaseComboBox {...props} state={state} />;\n}\n\nexport type BaseComboBoxProps<T extends Record<string, unknown>> = {\n\treadonly icon?: ReactNode;\n\treadonly className?: string;\n\treadonly state: ComboBoxState<T>;\n} & AriaComboBoxProps<T>;\n\nexport function BaseComboBox<T extends Record<string, unknown>>(\n\tprops: BaseComboBoxProps<T>,\n) {\n\tconst {icon, state, className} = props;\n\n\tconst buttonObjectRef = useRef<HTMLButtonElement>(null);\n\tconst inputObjectRef = useRef<HTMLInputElement>(null);\n\tconst listBoxObjectRef = useRef<HTMLUListElement>(null);\n\tconst popoverObjectRef = useRef<HTMLDivElement>(null);\n\n\tconst {buttonProps, inputProps, listBoxProps, labelProps} = useComboBox<T>(\n\t\t{\n\t\t\t...props,\n\t\t\tinputRef: inputObjectRef,\n\t\t\tbuttonRef: buttonObjectRef,\n\t\t\tlistBoxRef: listBoxObjectRef,\n\t\t\tpopoverRef: popoverObjectRef,\n\t\t},\n\t\tstate,\n\t);\n\n\treturn (\n\t\t<div className={cx('group w-fit', className)}>\n\t\t\t<label\n\t\t\t\t{...labelProps}\n\t\t\t\tclassName='mb-1 text-sm text-stone-300 transition-colors group-focus-within:text-stone-50'\n\t\t\t>\n\t\t\t\t{props.label}\n\t\t\t</label>\n\t\t\t<div className='flex w-full rounded border border-stone-700 bg-stone-950 text-stone-300 transition-all group-focus-within:border-stone-50 group-focus-within:shadow-stone-800 group-focus-within:glow-sm'>\n\t\t\t\t{icon}\n\t\t\t\t<input\n\t\t\t\t\t{...inputProps}\n\t\t\t\t\tref={inputObjectRef}\n\t\t\t\t\tclassName='grow bg-transparent p-1 outline-0 placeholder:text-stone-500'\n\t\t\t\t/>\n\t\t\t\t<Button\n\t\t\t\t\t{...buttonProps}\n\t\t\t\t\tbuttonRef={buttonObjectRef}\n\t\t\t\t\tvariant='text'\n\t\t\t\t>\n\t\t\t\t\t<ArrowDropDown\n\t\t\t\t\t\taria-hidden='true'\n\t\t\t\t\t\tclassName='fill-current'\n\t\t\t\t\t/>\n\t\t\t\t</Button>\n\t\t\t\t{state.isOpen ? (\n\t\t\t\t\t<Popover\n\t\t\t\t\t\tref={popoverObjectRef}\n\t\t\t\t\t\tstate={state}\n\t\t\t\t\t\ttriggerRef={inputObjectRef}\n\t\t\t\t\t\tplacement='bottom start'\n\t\t\t\t\t>\n\t\t\t\t\t\t{/* @ts-expect-error children prop is passed in by react-aria */}\n\t\t\t\t\t\t<BaseListBox\n\t\t\t\t\t\t\t{...listBoxProps}\n\t\t\t\t\t\t\tlistBoxRef={listBoxObjectRef}\n\t\t\t\t\t\t\tstate={state}\n\t\t\t\t\t\t\tclassName='max-h-96'\n\t\t\t\t\t\t/>\n\t\t\t\t\t</Popover>\n\t\t\t\t) : null}\n\t\t\t</div>\n\t\t</div>\n\t);\n}\n","import React, {useMemo} from 'react';\nimport {useListState, type Key} from 'react-stately';\nimport {type List, Seq, Set} from 'immutable';\nimport {type CollectionElement} from '@react-types/shared';\nimport {useId} from 'react-aria';\nimport {ComboBox} from './combo-box.tsx';\nimport {TagGroup} from './tag-group.tsx';\nimport {cx} from './cva.ts';\n\nexport type ComboBoxTagMultiSelectProps<T extends Record<string, unknown>> = {\n\treadonly label?: string;\n\treadonly children: (item: T) => CollectionElement<T>;\n\treadonly items: List<T>;\n\treadonly filteredKeys: Set<Key>;\n\treadonly filterText: string;\n\treadonly setFilterText: (filterText: string) => void;\n\treadonly selectedKeys: Set<Key> | 'all';\n\treadonly setSelectedKeys: (keys: Set<Key> | 'all') => void;\n\treadonly className?: string;\n\treadonly searchPlaceholder?: string;\n};\n\nexport function ComboBoxTagMultiSelect<T extends Record<string, unknown>>(\n\tprops: ComboBoxTagMultiSelectProps<T>,\n) {\n\tconst {\n\t\titems,\n\t\tfilteredKeys,\n\t\tsetSelectedKeys,\n\t\tfilterText,\n\t\tsetFilterText,\n\t\tselectedKeys,\n\t\tchildren,\n\t\tlabel,\n\t\tclassName,\n\t\tsearchPlaceholder,\n\t} = props;\n\tconst {collection, selectionManager} = useListState<T>({\n\t\titems,\n\t\tchildren,\n\t\tselectedKeys,\n\t\tonSelectionChange(keys) {\n\t\t\tsetSelectedKeys(Set(keys));\n\t\t},\n\t\tselectionMode: 'multiple',\n\t});\n\n\tconst id = useId();\n\n\tconst selectedItems = useMemo(\n\t\t() =>\n\t\t\tSeq(selectionManager.selectedKeys)\n\t\t\t\t.map(key => collection.getItem(key)!.value!)\n\t\t\t\t.toList(),\n\t\t[collection, selectionManager],\n\t);\n\tconst filteredItems = useMemo(\n\t\t() =>\n\t\t\tSeq(filteredKeys)\n\t\t\t\t.map(key => collection.getItem(key)!.value!)\n\t\t\t\t.toList(),\n\t\t[collection, filteredKeys],\n\t);\n\n\treturn (\n\t\t<div className={cx('group w-fit', className)}>\n\t\t\t{label === undefined ? null : (\n\t\t\t\t<p\n\t\t\t\t\tclassName='text-sm text-stone-300 group-focus-within:text-stone-50'\n\t\t\t\t\tid={id}\n\t\t\t\t>\n\t\t\t\t\t{label}\n\t\t\t\t</p>\n\t\t\t)}\n\n\t\t\t<TagGroup\n\t\t\t\taria-labelledby={id}\n\t\t\t\titems={selectedItems}\n\t\t\t\tclassName={cx(\n\t\t\t\t\t(selectedKeys === 'all' || selectedKeys.size > 0) && 'mb-2',\n\t\t\t\t)}\n\t\t\t\tonRemove={keys => {\n\t\t\t\t\tfor (const key of keys) {\n\t\t\t\t\t\tselectionManager.toggleSelection(key);\n\t\t\t\t\t}\n\t\t\t\t}}\n\t\t\t>\n\t\t\t\t{children}\n\t\t\t</TagGroup>\n\t\t\t<ComboBox\n\t\t\t\taria-labelledby={id}\n\t\t\t\tplaceholder={searchPlaceholder}\n\t\t\t\titems={filteredItems}\n\t\t\t\tinputValue={filterText}\n\t\t\t\tclassName='w-full'\n\t\t\t\tonInputChange={setFilterText}\n\t\t\t\tonSelectionChange={(key: Key | null) => {\n\t\t\t\t\tif (key === null) {\n\t\t\t\t\t\tif (filterText !== '') {\n\t\t\t\t\t\t\tsetFilterText('');\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\n\t\t\t\t\tsetFilterText('');\n\t\t\t\t\tif (selectedKeys === 'all') {\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\n\t\t\t\t\tsetSelectedKeys(selectedKeys.add(key));\n\t\t\t\t}}\n\t\t\t>\n\t\t\t\t{children}\n\t\t\t</ComboBox>\n\t\t</div>\n\t);\n}\n","import {type ComponentProps, type ReactNode} from 'react';\nimport {type VariantProps} from 'cva';\nimport {buttonVariants} from '@/button/button-variants';\n\n// eslint-disable-next-line @typescript-eslint/naming-convention\nexport type ALinkButtonProps = {\n\treadonly children: ReactNode;\n\treadonly className?: string;\n} & ComponentProps<'a'> &\n\tVariantProps<typeof buttonVariants>;\n\n// eslint-disable-next-line @typescript-eslint/naming-convention\nexport function ALinkButton(props: ALinkButtonProps) {\n\tconst {children} = props;\n\treturn (\n\t\t// eslint-disable-next-line react/jsx-no-target-blank\n\t\t<a rel='noreferrer' {...props} className={buttonVariants(props)}>\n\t\t\t{children}\n\t\t</a>\n\t);\n}\n","'use client';\nimport React, {type ReactNode, useRef} from 'react';\nimport {type AriaDialogProps, useDialog} from 'react-aria';\nimport {cx} from './cva.ts';\n\nexport type DialogProps = {\n\treadonly title?: ReactNode;\n\treadonly children: ReactNode;\n\treadonly className?: string;\n} & AriaDialogProps;\n\nexport function Dialog(props: DialogProps) {\n\tconst {title, children, className} = props;\n\n\tconst ref = useRef(null);\n\n\tconst {dialogProps, titleProps} = useDialog(props, ref);\n\n\treturn (\n\t\t<div\n\t\t\t{...dialogProps}\n\t\t\tref={ref}\n\t\t\tclassName={cx('outline-none text-stone-300', className)}\n\t\t>\n\t\t\t{title === undefined ? null : (\n\t\t\t\t<h3 {...titleProps} className='mb-2 text-2xl font-bold'>\n\t\t\t\t\t{title}\n\t\t\t\t</h3>\n\t\t\t)}\n\t\t\t{children}\n\t\t</div>\n\t);\n}\n","'use client';\nimport React, {type ReactNode, useState} from 'react';\n// @ts-expect-error bad typings\nimport ArrowDropDown from '@material-design-icons/svg/round/arrow_drop_down.svg';\n// @ts-expect-error bad typings\nimport ArrowDropUp from '@material-design-icons/svg/round/arrow_drop_up.svg';\nimport {AnimatePresence, motion} from 'framer-motion';\nimport {cx} from './cva.ts';\n\nexport type DropdownProps = BaseDropdownProps | StatefulDropDownProps;\n\nexport function Dropdown(props: DropdownProps) {\n\treturn 'isOpen' in props ? (\n\t\t<BaseDropdown {...props} />\n\t) : (\n\t\t<StatefulDropDown {...props} />\n\t);\n}\n\nexport type StatefulDropDownProps = Omit<\n\tBaseDropdownProps,\n\t'isOpen' | 'onToggle'\n> & {\n\treadonly isInitiallyOpen?: boolean;\n};\n\nexport function StatefulDropDown(props: StatefulDropDownProps) {\n\tconst {isInitiallyOpen = false} = props;\n\tconst [isOpen, setIsOpen] = useState(isInitiallyOpen);\n\treturn <BaseDropdown isOpen={isOpen} onToggle={setIsOpen} {...props} />;\n}\n\nexport type BaseDropdownProps = {\n\treadonly isOpen: boolean;\n\treadonly onToggle: (isOpen: boolean) => void;\n\treadonly label: ReactNode;\n\treadonly children: ReactNode;\n\treadonly className?: string;\n};\n\nexport function BaseDropdown(props: BaseDropdownProps) {\n\tconst {isOpen, onToggle, label, children, className} = props;\n\n\treturn (\n\t\t<div\n\t\t\tclassName={cx(\n\t\t\t\t'overflow-hidden rounded border border-stone-800',\n\t\t\t\tclassName,\n\t\t\t)}\n\t\t>\n\t\t\t<div\n\t\t\t\tclassName='flex cursor-pointer border-b border-stone-800 p-2 font-bold text-stone-50 transition-colors hover:bg-stone-900'\n\t\t\t\tonClick={() => {\n\t\t\t\t\tonToggle(!isOpen);\n\t\t\t\t}}\n\t\t\t>\n\t\t\t\t<div className='grow'>{label}</div>\n\t\t\t\t{isOpen ? (\n\t\t\t\t\t<ArrowDropUp className='fill-current' />\n\t\t\t\t) : (\n\t\t\t\t\t<ArrowDropDown className='fill-current' />\n\t\t\t\t)}\n\t\t\t</div>\n\t\t\t<AnimatePresence>\n\t\t\t\t{isOpen && (\n\t\t\t\t\t<motion.div\n\t\t\t\t\t\tlayout\n\t\t\t\t\t\tclassName='p-2 text-stone-300'\n\t\t\t\t\t\tinitial={{\n\t\t\t\t\t\t\theight: 0,\n\t\t\t\t\t\t}}\n\t\t\t\t\t\tanimate={{\n\t\t\t\t\t\t\theight: 'auto',\n\t\t\t\t\t\t}}\n\t\t\t\t\t\texit={{\n\t\t\t\t\t\t\theight: 0,\n\t\t\t\t\t\t}}\n\t\t\t\t\t>\n\t\t\t\t\t\t{children}\n\t\t\t\t\t</motion.div>\n\t\t\t\t)}\n\t\t\t</AnimatePresence>\n\t\t</div>\n\t);\n}\n","import React, {\n\ttype ChangeEvent,\n\ttype ComponentProps,\n\ttype ReactNode,\n\tuseRef,\n\tuseState,\n} from 'react';\nimport {type FileDropItem, mergeProps, useDrop, useFocusRing} from 'react-aria';\nimport {type FormValidationProps, useFormValidation} from '@react-aria/form';\nimport {useFormValidationState} from '@react-stately/form';\nimport {omit} from 'lodash';\nimport {cx} from './cva.ts';\n\nexport type FileDropZoneProps = {\n\treadonly className?: string;\n\treadonly name?: string;\n\treadonly label?: ReactNode;\n\treadonly acceptedMimeTypes?: string[];\n\treadonly error?: string;\n} & FormValidationProps<File | undefined> &\n\tOmit<ComponentProps<'input'>, 'type' | 'accept' | 'ref'>;\n\nconst imageMimeTypes = new Set<string>([\n\t'image/png',\n\t'image/jpg',\n\t'image/jpeg',\n\t'image/webp',\n]);\n\nexport function FileDropZone(props: FileDropZoneProps) {\n\tconst {label, className, acceptedMimeTypes, error} = props;\n\n\tconst [file, setFile] = useState<File>();\n\n\tconst state = useFormValidationState({\n\t\tvalidationBehavior: 'native',\n\t\t...props,\n\t\tvalue: file,\n\t});\n\n\tconst {commitValidation} = state;\n\n\tconst {isInvalid, validationErrors} = state.displayValidation;\n\n\tconst inputRef = useRef<HTMLInputElement>(null);\n\n\tuseFormValidation<File>(props, state, inputRef);\n\n\tconst ref = useRef<HTMLDivElement>(null);\n\n\tconst {isFocusVisible, focusProps} = useFocusRing();\n\n\tconst {dropProps, isDropTarget} = useDrop({\n\t\tref,\n\t\tonDrop(event) {\n\t\t\tconst item = event.items.find(item => item.kind === 'file') as\n\t\t\t\t| FileDropItem\n\t\t\t\t| undefined;\n\t\t\tif (item === undefined) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\t(async () => {\n\t\t\t\tconst file = await item.getFile();\n\t\t\t\tsetFile(file);\n\t\t\t\tcommitValidation();\n\t\t\t})();\n\t\t},\n\t});\n\n\tconst inputChangeHandler = (event: ChangeEvent<HTMLInputElement>) => {\n\t\tif (props.onChange) {\n\t\t\tprops.onChange(event);\n\t\t}\n\n\t\tif (event.target.files === null || event.target.files.length === 0) {\n\t\t\treturn;\n\t\t}\n\n\t\tsetFile(event.target.files[0]);\n\t\tcommitValidation();\n\t};\n\n\tconst dropZoneClickHandler = () => {\n\t\tconst input = inputRef.current;\n\t\tif (input !== null) {\n\t\t\tinput.click();\n\t\t}\n\t};\n\n\treturn (\n\t\t<div\n\t\t\t{...mergeProps(dropProps, focusProps)}\n\t\t\tref={ref}\n\t\t\trole='button'\n\t\t\ttabIndex={0}\n\t\t\tclassName={cx(\n\t\t\t\t'rounded border border-dashed border-stone-500 p-4 text-stone-500 hover:bg-stone-800 outline-none flex flex-col justify-center items-center text-center',\n\t\t\t\tisDropTarget && 'bg-stone-800',\n\t\t\t\tisFocusVisible && 'border-stone-50',\n\t\t\t\tclassName,\n\t\t\t)}\n\t\t\tonClick={dropZoneClickHandler}\n\t\t>\n\t\t\t<input\n\t\t\t\t{...omit(props, [\n\t\t\t\t\t'className',\n\t\t\t\t\t'acceptedMimeTypes',\n\t\t\t\t\t'label',\n\t\t\t\t\t'error',\n\t\t\t\t])}\n\t\t\t\tref={inputRef}\n\t\t\t\ttype='file'\n\t\t\t\tclassName='hidden'\n\t\t\t\taccept={acceptedMimeTypes?.join(',')}\n\t\t\t\tonChange={inputChangeHandler}\n\t\t\t/>\n\t\t\t{!isInvalid && file && imageMimeTypes.has(file.type) && (\n\t\t\t\t<img\n\t\t\t\t\tsrc={URL.createObjectURL(file)}\n\t\t\t\t\talt='Submitted image'\n\t\t\t\t\theight={128}\n\t\t\t\t\twidth={128}\n\t\t\t\t/>\n\t\t\t)}\n\t\t\t<div className='mt-2 text-stone-500'>\n\t\t\t\t{file ? file.name : label}\n\t\t\t</div>\n\n\t\t\t{(error ?? isInvalid) && (\n\t\t\t\t<div className='mt-2 text-red-400'>\n\t\t\t\t\t{error ?? validationErrors.join(' ')}\n\t\t\t\t</div>\n\t\t\t)}\n\t\t</div>\n\t);\n}\n","import React from 'react';\nimport Image, {type StaticImageData} from 'next/image';\nimport {cx} from 'geostats-ui';\n\nexport type SocialLinkProps = {\n\treadonly image: StaticImageData;\n\treadonly name: string;\n\treadonly href: string;\n\treadonly size?: number;\n\treadonly className?: string;\n};\nexport function SocialLink(props: SocialLinkProps) {\n\tconst {image, href, name, className, size = 24} = props;\n\treturn (\n\t\t<a\n\t\t\thref={href}\n\t\t\tclassName={cx('flex justify-center items-center', className)}\n\t\t\ttarget='_blank'\n\t\t\trel='noreferrer'\n\t\t>\n\t\t\t<Image src={image} alt={name} height={size} width={size} />\n\t\t</a>\n\t);\n}\n","import {defineConfig} from 'cva';\nimport {twMerge} from 'tailwind-merge';\n\nexport {type VariantProps} from 'cva';\n\nexport const {cva, compose, cx} = defineConfig({\n\thooks: {\n\t\tonComplete: className => twMerge(className),\n\t},\n});\n","import {type VariantProps} from 'cva';\nimport {cva} from '@/cva.ts';\n\nconst paperVariants = cva({\n\tbase: 'rounded border border-stone-800 bg-black/40 text-stone-300 backdrop-blur transition-all',\n\tvariants: {\n\t\thoverEffect: {\n\t\t\ttrue: 'duration-500 hover:scale-[101%] hover:border-stone-700 hover:glow-sm',\n\t\t\tfalse: '',\n\t\t},\n\t\tspacing: {\n\t\t\tnone: 'p-0',\n\t\t\txs: 'p-1',\n\t\t\tsm: 'p-2',\n\t\t\tmd: 'p-4',\n\t\t\tlg: 'p-8',\n\t\t\txl: 'p-16',\n\t\t},\n\t},\n\tdefaultVariants: {\n\t\tspacing: 'md',\n\t\thoverEffect: false,\n\t},\n});\n\nexport type PaperVariantProps = VariantProps<typeof paperVariants>;\n\nexport default paperVariants;\n","import React, {type ComponentProps} from 'react';\nimport {omit} from 'lodash';\nimport paperVariants, {\n\ttype PaperVariantProps,\n} from '@/paper/paper-variants.tsx';\n\nexport type PaperProps = ComponentProps<'div'> & PaperVariantProps;\n\nexport function Paper(props: PaperProps) {\n\treturn (\n\t\t<div\n\t\t\t{...omit(props, ['hoverEffect', 'spacing'])}\n\t\t\tclassName={paperVariants(props)}\n\t\t/>\n\t);\n}\n","import type {GridNode} from '@react-types/grid';\nimport type {TableState} from 'react-stately';\nimport React, {useRef} from 'react';\nimport {mergeProps, useFocusRing, useTableColumnHeader} from 'react-aria';\nimport {cx} from '@/cva.ts';\n\nexport type TableColumnHeaderProps<T> = {\n\treadonly column: GridNode<T>;\n\treadonly state: TableState<T>;\n};\n\nexport function TableColumnHeader<T>(props: TableColumnHeaderProps<T>) {\n\tconst {column, state} = props;\n\tconst headerRef = useRef<HTMLTableHeaderCellElement>(null);\n\n\tconst {columnHeaderProps} = useTableColumnHeader(\n\t\t{node: column},\n\t\tstate,\n\t\theaderRef,\n\t);\n\n\tconst {isFocusVisible, focusProps} = useFocusRing();\n\tconst arrowIcon =\n\t\tstate.sortDescriptor?.direction === 'ascending' ? '▲' : '▼';\n\n\treturn (\n\t\t<th\n\t\t\t{...mergeProps(columnHeaderProps, focusProps)}\n\t\t\tref={headerRef}\n\t\t\tcolSpan={column.colspan}\n\t\t\tclassName={cx(\n\t\t\t\t'p-4 outline-none cursor-default',\n\t\t\t\tisFocusVisible && 'shadow-stone-50',\n\t\t\t\t(column.colspan ?? 0) > 1 ? 'text-center' : 'text-left',\n\t\t\t)}\n\t\t>\n\t\t\t{column.rendered}\n\t\t\t{column.props.allowsSorting && (\n\t\t\t\t<span\n\t\t\t\t\taria-hidden='true'\n\t\t\t\t\tclassName={cx(\n\t\t\t\t\t\t'px-0 py-1 ',\n\t\t\t\t\t\tstate.sortDescriptor?.column === column.key\n\t\t\t\t\t\t\t? 'visible'\n\t\t\t\t\t\t\t: 'hidden',\n\t\t\t\t\t)}\n\t\t\t\t>\n\t\t\t\t\t{arrowIcon}\n\t\t\t\t</span>\n\t\t\t)}\n\t\t</th>\n\t);\n}\n","'use client';\nimport React, {type ReactNode, useRef} from 'react';\nimport {useTableHeaderRow} from 'react-aria';\nimport type {GridNode} from '@react-types/grid';\nimport type {TableState} from 'react-stately';\n\nexport type TableHeaderRowProps<T> = {\n\treadonly item: GridNode<T>;\n\treadonly state: TableState<T>;\n\treadonly children: ReactNode;\n};\n\nexport function TableHeaderRow<T>(props: TableHeaderRowProps<T>) {\n\tconst {item, state, children} = props;\n\n\tconst headerRef = useRef<HTMLTableRowElement>(null);\n\n\tconst {rowProps} = useTableHeaderRow({node: item}, state, headerRef);\n\n\treturn (\n\t\t<tr {...rowProps} ref={headerRef}>\n\t\t\t{children}\n\t\t</tr>\n\t);\n}\n","import React, {type ReactNode} from 'react';\nimport {useTableRowGroup} from 'react-aria';\nimport {cx} from '@/cva.ts';\n\nexport type TableRowGroupProps = {\n\treadonly type: keyof HTMLElementTagNameMap;\n\treadonly children: ReactNode;\n};\n\nexport function TableRowGroup(props: TableRowGroupProps) {\n\tconst {type: Element, children} = props;\n\n\tconst {rowGroupProps} = useTableRowGroup();\n\n\treturn (\n\t\t<Element\n\t\t\t{...rowGroupProps}\n\t\t\tclassName={cx(\n\t\t\t\tElement === 'thead' && 'border-b border-stone-700 bg-stone-900',\n\t\t\t)}\n\t\t>\n\t\t\t{children}\n\t\t</Element>\n\t);\n}\n","import React, {type ReactNode, useRef} from 'react';\nimport {type GridNode} from '@react-types/grid';\nimport {type TableState} from 'react-stately';\nimport {useTableRow} from 'react-aria';\nimport {cx} from '@/cva.ts';\n\nexport type TableRowProps<T> = {\n\treadonly item: GridNode<T>;\n\treadonly children: ReactNode;\n\treadonly state: TableState<T>;\n};\n\nexport function TableRow<T>(props: TableRowProps<T>) {\n\tconst {item, children, state} = props;\n\tconst rowRef = useRef<HTMLTableRowElement>(null);\n\tconst isSelected = state.selectionManager.isSelected(item.key);\n\n\tconst {rowProps} = useTableRow({node: item}, state, rowRef);\n\n\treturn (\n\t\t<tr\n\t\t\t{...rowProps}\n\t\t\tref={rowRef}\n\t\t\tclassName={cx(\n\t\t\t\t'outline-none cursor-default',\n\t\t\t\tisSelected && 'text-stone-50 bg-stone-900',\n\t\t\t)}\n\t\t>\n\t\t\t{children}\n\t\t</tr>\n\t);\n}\n","import React, {useRef} from 'react';\nimport {\n\ttype AriaCheckboxProps,\n\tmergeProps,\n\tuseCheckbox,\n\tuseFocusRing,\n\tusePress,\n\tVisuallyHidden,\n} from 'react-aria';\nimport {useToggleState, type ToggleProps} from 'react-stately';\nimport {cx} from './cva.ts';\n\nexport type CheckboxProps = {\n\treadonly className?: string;\n} & AriaCheckboxProps &\n\tToggleProps;\n\nexport function Checkbox(props: CheckboxProps) {\n\tconst {children, className} = props;\n\tconst ref = useRef<HTMLInputElement>(null);\n\tconst state = useToggleState(props);\n\tconst {inputProps} = useCheckbox(props, state, ref);\n\tconst {focusProps} = useFocusRing();\n\tconst {pressProps} = usePress({isDisabled: props.isDisabled});\n\n\treturn (\n\t\t<label className={cx('flex gap-2 text-stone-300', className)}>\n\t\t\t<VisuallyHidden>\n\t\t\t\t<input {...mergeProps(inputProps, focusProps)} ref={ref} />\n\t\t\t</VisuallyHidden>\n\t\t\t<div\n\t\t\t\tclassName='size-6 cursor-pointer rounded border border-stone-700 p-1'\n\t\t\t\taria-hidden='true'\n\t\t\t>\n\t\t\t\t<svg\n\t\t\t\t\t{...pressProps}\n\t\t\t\t\tclassName='fill-none stroke-stone-50 stroke-2'\n\t\t\t\t\tviewBox='0 0 18 18'\n\t\t\t\t>\n\t\t\t\t\t<polyline\n\t\t\t\t\t\tclassName='transition-all duration-200'\n\t\t\t\t\t\tpoints='1 9 7 14 15 4'\n\t\t\t\t\t\tstrokeDasharray={24}\n\t\t\t\t\t\tstrokeDashoffset={state.isSelected ? 48 : 72}\n\t\t\t\t\t/>\n\t\t\t\t</svg>\n\t\t\t</div>\n\t\t\t{children}\n\t\t</label>\n\t);\n}\n","import React, {useRef} from 'react';\nimport {type GridNode} from '@react-types/grid';\nimport {type TableState} from 'react-stately';\nimport {\n\tuseTableColumnHeader,\n\tuseTableSelectAllCheckbox,\n\tVisuallyHidden,\n} from 'react-aria';\nimport {Checkbox} from '@/checkbox.tsx';\n\nexport type TableSelectAllCellProps<T> = {\n\treadonly column: GridNode<T>;\n\treadonly state: TableState<T>;\n};\n\nexport function TableSelectAllCell<T>(props: TableSelectAllCellProps<T>) {\n\tconst {column, state} = props;\n\tconst cellRef = useRef<HTMLTableHeaderCellElement>(null);\n\tconst {columnHeaderProps} = useTableColumnHeader(\n\t\t{node: column},\n\t\tstate,\n\t\tcellRef,\n\t);\n\tconst {checkboxProps} = useTableSelectAllCheckbox(state);\n\n\treturn (\n\t\t<th {...columnHeaderProps} ref={cellRef} className='px-4'>\n\t\t\t{state.selectionManager.selectionMode === 'single' ? (\n\t\t\t\t<VisuallyHidden>{checkboxProps['aria-label']}</VisuallyHidden>\n\t\t\t) : (\n\t\t\t\t<Checkbox {...checkboxProps} />\n\t\t\t)}\n\t\t</th>\n\t);\n}\n","import React, {useRef} from 'react';\nimport {type GridNode} from '@react-types/grid';\nimport {type TableState} from 'react-stately';\nimport {mergeProps, useFocusRing, useTableCell} from 'react-aria';\nimport {cx} from '@/cva.ts';\n\nexport type TableCellProps<T> = {\n\treadonly cell: GridNode<T>;\n\treadonly state: TableState<T>;\n};\n\nexport function TableCell<T>(props: TableCellProps<T>) {\n\tconst {cell, state} = props;\n\n\tconst cellRef = useRef<HTMLTableCellElement>(null);\n\n\tconst {gridCellProps} = useTableCell({node: cell}, state, cellRef);\n\n\tconst {isFocusVisible, focusProps} = useFocusRing();\n\n\treturn (\n\t\t<td\n\t\t\t{...mergeProps(gridCellProps, focusProps)}\n\t\t\tref={cellRef}\n\t\t\tclassName={cx(\n\t\t\t\t'p-4 outline-none border-y border-stone-800',\n\t\t\t\tisFocusVisible && 'shadow-stone-500',\n\t\t\t)}\n\t\t>\n\t\t\t{cell.rendered}\n\t\t</td>\n\t);\n}\n","'use client';\nimport React, {useRef} from 'react';\nimport {type GridNode} from '@react-types/grid';\nimport {type TableState} from 'react-stately';\nimport {useTableCell, useTableSelectionCheckbox} from 'react-aria';\nimport {Checkbox} from '@/checkbox.tsx';\n\nexport type TableCheckboxCellProps<T> = {\n\treadonly cell: GridNode<T>;\n\treadonly state: TableState<T>;\n};\n\nexport function TableCheckboxCell<T>(props: TableCheckboxCellProps<T>) {\n\tconst {cell, state} = props;\n\tconst cellRef = useRef<HTMLTableCellElement>(null);\n\tconst {gridCellProps} = useTableCell({node: cell}, state, cellRef);\n\n\tconst {checkboxProps} = useTableSelectionCheckbox(\n\t\t{\n\t\t\tkey: cell.parentKey!,\n\t\t},\n\t\tstate,\n\t);\n\n\treturn (\n\t\t<td\n\t\t\t{...gridCellProps}\n\t\t\tref={cellRef}\n\t\t\tclassName='border-y border-stone-800 px-4'\n\t\t>\n\t\t\t<Checkbox {...checkboxProps} />\n\t\t</td>\n\t);\n}\n","import React, {useRef} from 'react';\nimport {type AriaTableProps, useTable} from 'react-aria';\nimport {type TableStateProps, useTableState} from 'react-stately';\nimport {TableRowGroup} from '@/table/table-row-group.tsx';\nimport {TableHeaderRow} from '@/table/table-header-row.tsx';\nimport {TableSelectAllCell} from '@/table/table-select-all-cell.tsx';\nimport {TableColumnHeader} from '@/table/table-column-header.tsx';\nimport {TableRow} from '@/table/table-row.tsx';\nimport {TableCheckboxCell} from '@/table/table-checkbox-cell.tsx';\nimport {TableCell} from '@/table/table-cell.tsx';\nimport {cx} from '@/cva.ts';\n\nexport type TableProps<T> = {\n\treadonly className?: string;\n} & AriaTableProps &\n\tTableStateProps<T>;\n\nexport function Table<T extends object>(props: TableProps<T>) {\n\tconst {className} = props;\n\n\tconst state = useTableState<T>(props);\n\n\tconst tableRef = useRef<HTMLTableElement>(null);\n\n\tconst {collection} = state;\n\n\tconst {gridProps} = useTable(props, state, tableRef);\n\n\treturn (\n\t\t<table\n\t\t\t{...gridProps}\n\t\t\tref={tableRef}\n\t\t\tclassName={cx('border-collapse', className)}\n\t\t>\n\t\t\t<TableRowGroup type='thead'>\n\t\t\t\t{collection.headerRows.map(headerRow => (\n\t\t\t\t\t<TableHeaderRow\n\t\t\t\t\t\tkey={headerRow.key}\n\t\t\t\t\t\titem={headerRow}\n\t\t\t\t\t\tstate={state}\n\t\t\t\t\t>\n\t\t\t\t\t\t{[...collection.getChildren!(headerRow.key)].map(\n\t\t\t\t\t\t\tcolumn =>\n\t\t\t\t\t\t\t\tcolumn.props.isSelectionCell ? (\n\t\t\t\t\t\t\t\t\t<TableSelectAllCell\n\t\t\t\t\t\t\t\t\t\tkey={column.key}\n\t\t\t\t\t\t\t\t\t\tcolumn={column}\n\t\t\t\t\t\t\t\t\t\tstate={state}\n\t\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t\t) : (\n\t\t\t\t\t\t\t\t\t<TableColumnHeader\n\t\t\t\t\t\t\t\t\t\tkey={column.key}\n\t\t\t\t\t\t\t\t\t\tcolumn={column}\n\t\t\t\t\t\t\t\t\t\tstate={state}\n\t\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t\t),\n\t\t\t\t\t\t)}\n\t\t\t\t\t</TableHeaderRow>\n\t\t\t\t))}\n\t\t\t</TableRowGroup>\n\t\t\t<TableRowGroup type='tbody'>\n\t\t\t\t{\n\t\t\t\t\t// The following is deprecated, but the body's children are not accesible via collection.getChildren\n\t\t\t\t\t[...collection.body.childNodes].map(row => (\n\t\t\t\t\t\t<TableRow key={row.key} item={row} state={state}>\n\t\t\t\t\t\t\t{[...collection.getChildren!(row.key)].map(cell =>\n\t\t\t\t\t\t\t\tcell.props.isSelectionCell ? (\n\t\t\t\t\t\t\t\t\t<TableCheckboxCell\n\t\t\t\t\t\t\t\t\t\tkey={cell.key}\n\t\t\t\t\t\t\t\t\t\tcell={cell}\n\t\t\t\t\t\t\t\t\t\tstate={state}\n\t\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t\t) : (\n\t\t\t\t\t\t\t\t\t<TableCell\n\t\t\t\t\t\t\t\t\t\tkey={cell.key}\n\t\t\t\t\t\t\t\t\t\tcell={cell}\n\t\t\t\t\t\t\t\t\t\tstate={state}\n\t\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t\t),\n\t\t\t\t\t\t\t)}\n\t\t\t\t\t\t</TableRow>\n\t\t\t\t\t))\n\t\t\t\t}\n\t\t\t</TableRowGroup>\n\t\t</table>\n\t);\n}\n","import dynamic from 'next/dynamic';\nimport {ComponentType} from 'react';\n\nexport const GeostatsTileLayer: ComponentType = dynamic(\n\t() => import('./geostats-tile-layer.tsx'),\n\t{\n\t\tssr: false,\n\t},\n);\n","import React, {type ReactNode} from 'react';\nimport {type AriaModalOverlayProps, Overlay, useModalOverlay} from 'react-aria';\nimport {type OverlayTriggerState} from 'react-stately';\n\nexport type ModalProps = {\n\treadonly state: OverlayTriggerState;\n\treadonly children: ReactNode;\n} & AriaModalOverlayProps;\n\nexport function Modal(props: ModalProps) {\n\tconst {state, children} = props;\n\tconst ref = React.useRef<HTMLDivElement>(null);\n\tconst {modalProps, underlayProps} = useModalOverlay(props, state, ref);\n\n\treturn (\n\t\t<Overlay>\n\t\t\t<div\n\t\t\t\t{...underlayProps}\n\t\t\t\tclassName='fixed inset-0 z-50 flex items-center justify-center bg-black/50'\n\t\t\t>\n\t\t\t\t<div\n\t\t\t\t\t{...modalProps}\n\t\t\t\t\tref={ref}\n\t\t\t\t\tclassName='rounded border border-stone-800 bg-stone-950 p-4'\n\t\t\t\t>\n\t\t\t\t\t{children}\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t</Overlay>\n\t);\n}\n","'use client';\nimport {createContext, useContext} from 'react';\n\nexport const modalContext = createContext<(() => void) | null>(null);\n\nexport function useCloseModal(): () => void {\n\tconst closeModal = useContext(modalContext);\n\n\tif (!closeModal) {\n\t\tthrow new Error('useCloseModal not used within a modal');\n\t}\n\n\treturn closeModal;\n}\n","import {type VariantProps} from 'cva';\nimport {cva} from '@/cva.ts';\n\nexport const buttonVariants = cva({\n\tbase: 'flex size-fit items-center gap-1 truncate rounded fill-current font-bold transition-colors disabled:cursor-default',\n\tvariants: {\n\t\tsize: {\n\t\t\txs: 'text-xs',\n\t\t\tsm: 'p-1 text-sm',\n\t\t\tmd: 'p-2',\n\t\t\tlg: 'p-3 text-lg',\n\t\t\txl: 'p-4 text-xl',\n\t\t},\n\t\tvariant: {\n\t\t\tprimary:\n\t\t\t\t'bg-stone-100 text-stone-950 hover:bg-stone-300 hover:text-stone-800 disabled:bg-stone-500 disabled:text-stone-800',\n\t\t\tsecondary:\n\t\t\t\t'border border-stone-700 bg-stone-900  text-stone-200 hover:bg-stone-800 disabled:bg-stone-700 disabled:text-stone-800 ',\n\t\t\toutlined:\n\t\t\t\t'border border-stone-700 text-stone-300 hover:bg-stone-900 disabled:border-stone-800 disabled:bg-transparent disabled:text-stone-600',\n\t\t\tdestructive:\n\t\t\t\t'border border-red-600 bg-red-600 text-stone-50 hover:bg-red-500 disabled:border-stone-700 disabled:bg-stone-700 disabled:text-stone-800',\n\t\t\ttext: 'text-stone-300',\n\t\t},\n\t},\n\tdefaultVariants: {\n\t\tvariant: 'primary',\n\t\tsize: 'md',\n\t},\n});\n\nexport type ButtonVariantProps = VariantProps<typeof buttonVariants>;\n","'use client';\nimport React, {type ReactNode, type RefObject} from 'react';\nimport {type AriaButtonOptions, useButton, useObjectRef} from 'react-aria';\nimport {type VariantProps} from '@/cva.ts';\nimport {buttonVariants} from '@/button/button-variants.tsx';\n\nexport type ButtonProps = {\n\treadonly children?: ReactNode;\n\treadonly className?: string;\n\treadonly buttonRef?: RefObject<HTMLButtonElement>;\n} & AriaButtonOptions<'button'> &\n\tVariantProps<typeof buttonVariants>;\n\nexport function Button(props: ButtonProps) {\n\tconst {children, buttonRef} = props;\n\tconst ref = useObjectRef<HTMLButtonElement>(buttonRef);\n\tconst {buttonProps} = useButton(\n\t\t{\n\t\t\t...props,\n\t\t\t// Workaround for react/react-aria #1513\n\t\t\tonPress(event) {\n\t\t\t\tif (\n\t\t\t\t\tevent.pointerType === 'mouse' ||\n\t\t\t\t\tevent.pointerType === 'keyboard'\n\t\t\t\t) {\n\t\t\t\t\tprops.onPress?.(event);\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tsetTimeout(() => {\n\t\t\t\t\tprops.onPress?.(event);\n\t\t\t\t}, 1);\n\t\t\t},\n\t\t},\n\t\tref,\n\t);\n\treturn (\n\t\t<button\n\t\t\t{...buttonProps}\n\t\t\tref={buttonRef}\n\t\t\tclassName={buttonVariants(props)}\n\t\t>\n\t\t\t{children}\n\t\t</button>\n\t);\n}\n","'use client';\nimport React, {type ReactElement, type ReactNode} from 'react';\nimport {type OverlayTriggerProps, useOverlayTriggerState} from 'react-stately';\nimport {useOverlayTrigger} from 'react-aria';\nimport {Modal, type ModalProps} from '@/modal/modal.tsx';\nimport {Button} from '@/button/button.tsx';\nimport {type ButtonVariantProps} from '@/button/button-variants.tsx';\nimport {modalContext} from '@/modal/modal-context.ts';\n\nexport type ModalTriggerProps = {\n\treadonly className?: string;\n\treadonly children: ReactElement;\n\treadonly label: ReactNode;\n} & OverlayTriggerProps &\n\tOmit<ModalProps, 'state' | 'children'> &\n\tButtonVariantProps;\n\nexport function ModalTrigger(props: ModalTriggerProps) {\n\tconst {children, label, className} = props;\n\tconst state = useOverlayTriggerState(props);\n\tconst {triggerProps, overlayProps} = useOverlayTrigger(\n\t\t{type: 'dialog'},\n\t\tstate,\n\t);\n\n\treturn (\n\t\t<>\n\t\t\t<Button {...props} {...triggerProps} className={className}>\n\t\t\t\t{label}\n\t\t\t</Button>\n\t\t\t{state.isOpen && (\n\t\t\t\t<Modal state={state}>\n\t\t\t\t\t{React.cloneElement(\n\t\t\t\t\t\t<modalContext.Provider value={state.close}>\n\t\t\t\t\t\t\t{children}\n\t\t\t\t\t\t</modalContext.Provider>,\n\t\t\t\t\t\toverlayProps,\n\t\t\t\t\t)}\n\t\t\t\t</Modal>\n\t\t\t)}\n\t\t</>\n\t);\n}\n","import React, {type RefObject, type ReactNode} from 'react';\nimport {type AriaTextFieldProps, useTextField, useObjectRef} from 'react-aria';\nimport {cx} from './cva.ts';\n\nexport type TextFieldProps = {\n\treadonly className?: string;\n\treadonly icon?: ReactNode;\n\treadonly inputRef?: RefObject<HTMLInputElement>;\n} & AriaTextFieldProps;\n\nexport function TextField(props: TextFieldProps) {\n\tconst {label, isDisabled, className, description, icon, isRequired} = props;\n\tconst inputRef = useObjectRef(props.inputRef);\n\tconst {\n\t\tlabelProps,\n\t\tinputProps,\n\t\tdescriptionProps,\n\t\terrorMessageProps,\n\t\tisInvalid,\n\t\tvalidationErrors,\n\t} = useTextField(\n\t\t{\n\t\t\tvalidationBehavior: 'native',\n\t\t\t...props,\n\t\t},\n\t\tinputRef,\n\t);\n\n\treturn (\n\t\t<div data-disabled={isDisabled} className={cx('group', className)}>\n\t\t\t{label && (\n\t\t\t\t<label\n\t\t\t\t\t{...labelProps}\n\t\t\t\t\tclassName={cx(\n\t\t\t\t\t\t'text-stone-400 text-sm block mb-1 group-focus-within:text-stone-50 group-data-[disabled=true]:text-stone-500 transition-colors',\n\t\t\t\t\t\tisRequired && 'after:content-[\"*\"] after:ml-0.5',\n\t\t\t\t\t)}\n\t\t\t\t>\n\t\t\t\t\t{label}\n\t\t\t\t</label>\n\t\t\t)}\n\n\t\t\t<div className='flex items-center gap-2 rounded border border-stone-700 px-2 shadow-stone-800 transition-all group-focus-within:border-stone-50 group-focus-within:glow-sm group-data-[disabled=true]:border-stone-800'>\n\t\t\t\t{icon}\n\t\t\t\t<input\n\t\t\t\t\t{...inputProps}\n\t\t\t\t\tref={inputRef}\n\t\t\t\t\tclassName='min-w-0 grow bg-transparent py-2 text-stone-100 outline-none placeholder:text-stone-500 disabled:cursor-not-allowed disabled:text-stone-600'\n\t\t\t\t/>\n\t\t\t</div>\n\t\t\t{description === undefined ? null : (\n\t\t\t\t<div {...descriptionProps}>{description}</div>\n\t\t\t)}\n\t\t\t{isInvalid && (\n\t\t\t\t<div\n\t\t\t\t\t{...errorMessageProps}\n\t\t\t\t\tclassName='mt-1 text-xs text-red-400'\n\t\t\t\t>\n\t\t\t\t\t{validationErrors.join(' ')}\n\t\t\t\t</div>\n\t\t\t)}\n\t\t</div>\n\t);\n}\n","import {useEffect, useRef} from 'react';\nimport {type List} from 'immutable';\nimport type Fuse from 'fuse.js';\nimport {type IFuseOptions} from 'fuse.js';\n\n/**\n * Creates and initializes a Fuse instance lazily using the provided collection and options.\n *\n * @template T - The type of elements in the collection.\n *\n * @param {Array<T>} items - The collection to be searched.\n * @param {IFuseOptions<T>} [options] - The options to customize the search behavior.\n *\n * @returns {Fuse<T> | undefined} - The initialized Fuse instance, or undefined if the Fuse instance is not yet available.\n */\nexport function useFuse<T>(\n\titems: List<T>,\n\toptions?: IFuseOptions<T>,\n): Fuse<T> | undefined {\n\tconst fuseRef = useRef<Fuse<T>>();\n\n\tuseEffect(() => {\n\t\tvoid (async () => {\n\t\t\tconst fuse = await import('fuse.js');\n\t\t\tfuseRef.current = new fuse.default<T>(items.toArray(), options);\n\t\t})();\n\t\t// eslint-disable-next-line react-hooks/exhaustive-deps\n\t}, [items]);\n\treturn fuseRef.current;\n}\n","import {\n\ttype Key,\n\ttype ListData,\n\ttype ListOptions,\n\tuseListData,\n} from 'react-stately';\nimport {List, Set} from 'immutable';\nimport {useMemo} from 'react';\n\nexport type ImmutableListOptions<T> = Omit<ListOptions<T>, 'initialItems'> & {\n\treadonly initialItems?: Iterable<T>;\n};\n\nexport type ImmutableListData<T> = Omit<\n\tListData<T>,\n\t'items' | 'selectedKeys' | 'setSelectedKeys'\n> & {\n\treadonly items: List<T>;\n\treadonly selectedKeys: Set<Key> | 'all';\n\treadonly setSelectedKeys: (keys: Set<Key> | 'all') => void;\n};\n\nexport function useImmutableListData<T>(\n\toptions: ImmutableListOptions<T>,\n): ImmutableListData<T> {\n\tconst listData = useListData<T>({\n\t\t...options,\n\t\tinitialItems:\n\t\t\toptions.initialItems === undefined\n\t\t\t\t? undefined\n\t\t\t\t: [...options.initialItems],\n\t});\n\n\tconst items = useMemo(() => List(listData.items), [listData.items]);\n\n\tconst selectedKeys = useMemo(() => {\n\t\tconst {selectedKeys} = listData;\n\t\tif (selectedKeys === 'all') {\n\t\t\treturn 'all';\n\t\t}\n\n\t\treturn Set(selectedKeys);\n\t}, [listData]);\n\n\treturn {\n\t\t...listData,\n\t\titems,\n\t\tselectedKeys,\n\t\tsetSelectedKeys(keys: 'all' | Set<Key>) {\n\t\t\tif (keys === 'all') {\n\t\t\t\tlistData.setSelectedKeys('all');\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\t// @ts-expect-error should not need the string conversion symbol\n\t\t\tlistData.setSelectedKeys(keys);\n\t\t},\n\t};\n}\n","import {useMemo} from 'react';\nimport {type Collection, OrderedSet, Seq, type Set} from 'immutable';\nimport {type Key} from 'react-stately';\nimport {useFuse} from '@/hooks/use-fuse.ts';\nimport {\n\tuseImmutableListData,\n\ttype ImmutableListData,\n\ttype ImmutableListOptions,\n} from './use-immutable-list-data';\n\nexport type SearchableListOptions<T> = {\n\treadonly searchKeys?: Collection.Indexed<string>;\n} & ImmutableListOptions<T>;\n\nexport type SearchableListData<T> = {\n\treadonly filteredKeys: Set<Key>;\n} & ImmutableListData<T>;\n\nexport default function useSearchableListData<\n\tT extends Record<string, unknown>,\n>(options: SearchableListOptions<T>): SearchableListData<T> {\n\tconst {\n\t\tsearchKeys,\n\t\tgetKey = (value: T) => {\n\t\t\tif (Object.hasOwn(value, 'id')) {\n\t\t\t\treturn value.id as Key;\n\t\t\t}\n\n\t\t\tif (Object.hasOwn(value, 'key')) {\n\t\t\t\treturn value.key as Key;\n\t\t\t}\n\n\t\t\tthrow new Error(\n\t\t\t\t'searchable list data item does not have an id or key attribute, and getKey is undefined',\n\t\t\t);\n\t\t},\n\t} = options;\n\n\tconst listData = useImmutableListData(options);\n\n\tconst {items, selectedKeys, filterText} = listData;\n\n\tconst fuse = useFuse(items, {\n\t\tkeys: searchKeys?.toArray(),\n\t});\n\n\tconst filteredKeys = useMemo(() => {\n\t\tif (selectedKeys === 'all') {\n\t\t\treturn OrderedSet<Key>();\n\t\t}\n\n\t\tif (fuse === undefined || filterText === '') {\n\t\t\treturn Seq(items)\n\t\t\t\t.map(item => getKey(item))\n\t\t\t\t.toOrderedSet()\n\t\t\t\t.subtract(selectedKeys);\n\t\t}\n\n\t\tconst results = OrderedSet(\n\t\t\tfuse.search(filterText).map(result => getKey(result.item)),\n\t\t);\n\n\t\treturn results.subtract(selectedKeys);\n\t}, [selectedKeys, fuse, filterText, items, getKey]);\n\n\treturn {\n\t\t...listData,\n\t\tfilteredKeys,\n\t};\n}\n","import React, {useRef} from 'react';\nimport {type AriaSearchFieldProps, useSearchField} from 'react-aria';\nimport {\n\ttype SearchFieldProps as SearchFieldStateProps,\n\tuseSearchFieldState,\n} from 'react-stately';\n// @ts-expect-error bad typings\nimport Search from '@material-design-icons/svg/round/search.svg';\n// @ts-expect-error bad typings\nimport Close from '@material-design-icons/svg/round/close.svg';\nimport {Button} from './button/button.tsx';\nimport {cx} from './cva.ts';\n\nexport type SearchFieldProps = {\n\treadonly className: string;\n} & AriaSearchFieldProps &\n\tSearchFieldStateProps;\n\nexport function SearchField(props: SearchFieldProps) {\n\tconst {label, className} = props;\n\tconst state = useSearchFieldState(props);\n\tconst inputRef = useRef<HTMLInputElement>(null);\n\tconst {labelProps, inputProps, clearButtonProps} = useSearchField(\n\t\tprops,\n\t\tstate,\n\t\tinputRef,\n\t);\n\n\treturn (\n\t\t<div className={cx('group', className)}>\n\t\t\t<label\n\t\t\t\t{...labelProps}\n\t\t\t\tclassName='text-stone-300 group-focus-within:text-stone-50'\n\t\t\t>\n\t\t\t\t{label}\n\t\t\t</label>\n\t\t\t<div className='flex items-center gap-1 rounded border border-stone-700 px-1 group-focus-within:border-stone-50'>\n\t\t\t\t<Search className='fill-stone-500 group-focus-within:fill-stone-50' />\n\t\t\t\t<input\n\t\t\t\t\t{...inputProps}\n\t\t\t\t\tref={inputRef}\n\t\t\t\t\tclassName='grow bg-transparent py-1 text-stone-200 outline-none'\n\t\t\t\t/>\n\t\t\t\t{state.value === '' ? null : (\n\t\t\t\t\t<Button {...clearButtonProps} variant='text'>\n\t\t\t\t\t\t<Close />\n\t\t\t\t\t</Button>\n\t\t\t\t)}\n\t\t\t</div>\n\t\t</div>\n\t);\n}\n","'use client';\nimport React, {useRef, type RefObject} from 'react';\nimport {\n\ttype AriaListBoxProps,\n\tmergeProps,\n\tuseFocusRing,\n\tuseListBox,\n\tuseListBoxSection,\n\tuseOption,\n} from 'react-aria';\nimport {type Node} from '@react-types/shared';\nimport {type ListProps, type ListState, useListState} from 'react-stately';\nimport {twMerge} from 'tailwind-merge';\nimport {cx} from './cva.ts';\n\nexport type ListBoxProps<T extends Record<string, unknown>> =\n\t| StatefulListBoxProps<T>\n\t| BaseListBoxProps<T>;\n\nexport function ListBox<T extends Record<string, unknown>>(\n\tprops: ListBoxProps<T>,\n) {\n\treturn 'state' in props ? (\n\t\t<BaseListBox {...props} />\n\t) : (\n\t\t<StatefulListBox {...props} />\n\t);\n}\n\ntype StatefulListBoxProps<T extends Record<string, unknown>> = ListProps<T> &\n\tOmit<BaseListBoxProps<T>, 'state'>;\n\nfunction StatefulListBox<T extends Record<string, unknown>>(\n\tprops: StatefulListBoxProps<T>,\n) {\n\tconst state = useListState<T>(props);\n\n\treturn <BaseListBox {...props} state={state} />;\n}\n\nexport type BaseListBoxProps<T extends Record<string, unknown>> = {\n\treadonly className?: string;\n\treadonly listBoxRef?: RefObject<HTMLUListElement>;\n\treadonly state: ListState<T>;\n} & AriaListBoxProps<T>;\n\nexport function BaseListBox<T extends Record<string, unknown>>(\n\tprops: BaseListBoxProps<T>,\n) {\n\tconst {label, state, className} = props;\n\n\tconst listBoxRef = useRef<HTMLUListElement>(null);\n\tconst {listBoxProps, labelProps} = useListBox<T>(props, state, listBoxRef);\n\n\treturn (\n\t\t<>\n\t\t\t{label ? (\n\t\t\t\t<label\n\t\t\t\t\t{...labelProps}\n\t\t\t\t\tclassName='mb-2 block px-2 text-xl text-stone-200'\n\t\t\t\t>\n\t\t\t\t\t{label}\n\t\t\t\t</label>\n\t\t\t) : null}\n\n\t\t\t<ul\n\t\t\t\t{...listBoxProps}\n\t\t\t\tref={listBoxRef}\n\t\t\t\tclassName={twMerge(\n\t\t\t\t\t'rounded overflow-y-auto scroll-smooth scrollbar-track-transparent scrollbar-thumb-stone-50 scrollbar-thin scrollbar-thumb-rounded',\n\t\t\t\t\tclassName,\n\t\t\t\t)}\n\t\t\t>\n\t\t\t\t{[...state.collection].map(item =>\n\t\t\t\t\titem.type === 'section' ? (\n\t\t\t\t\t\t<ListBoxSection\n\t\t\t\t\t\t\tkey={item.key}\n\t\t\t\t\t\t\tsection={item}\n\t\t\t\t\t\t\tstate={state}\n\t\t\t\t\t\t/>\n\t\t\t\t\t) : (\n\t\t\t\t\t\t<Option key={item.key} item={item} state={state} />\n\t\t\t\t\t),\n\t\t\t\t)}\n\t\t\t</ul>\n\t\t</>\n\t);\n}\n\nexport type ListBoxSectionProps<T> = {\n\treadonly section: Node<T>;\n\treadonly state: ListState<T>;\n};\n\nfunction ListBoxSection<T extends Record<string, unknown>>(\n\tprops: ListBoxSectionProps<T>,\n) {\n\tconst {section, state} = props;\n\n\tconst {itemProps, headingProps, groupProps} = useListBoxSection({\n\t\theading: section.rendered,\n\t\t'aria-label': section['aria-label'],\n\t});\n\t// If the section is not the first, add a separator element to provide visual separation.\n\t// The heading is rendered inside an <li> element, which contains\n\t// a <ul> with the child items.\n\treturn (\n\t\t<li {...itemProps} className='p-2'>\n\t\t\t{section.rendered && (\n\t\t\t\t<div\n\t\t\t\t\t{...headingProps}\n\t\t\t\t\tclassName={cx(\n\t\t\t\t\t\t'font-semibold py-2 text-sm text-stone-200 top-0',\n\t\t\t\t\t\tsection.key !== state.collection.getFirstKey() &&\n\t\t\t\t\t\t\t'mt-2',\n\t\t\t\t\t)}\n\t\t\t\t>\n\t\t\t\t\t{section.rendered}\n\t\t\t\t</div>\n\t\t\t)}\n\t\t\t<ul {...groupProps}>\n\t\t\t\t{[...state.collection.getChildren!(section.key)].map(node => (\n\t\t\t\t\t<Option key={node.key} item={node} state={state} />\n\t\t\t\t))}\n\t\t\t</ul>\n\t\t</li>\n\t);\n}\n\nexport type OptionProps<T extends Record<string, unknown>> = {\n\treadonly item: Node<T>;\n\treadonly state: ListState<T>;\n};\n\nfunction Option<T extends Record<string, unknown>>(props: OptionProps<T>) {\n\tconst {item, state} = props;\n\n\t// Get props for the option element\n\tconst ref = React.useRef(null);\n\tconst {isSelected, optionProps, isFocused, allowsSelection} = useOption(\n\t\t{key: item.key},\n\t\tstate,\n\t\tref,\n\t);\n\n\t// Determine whether we should show a keyboard\n\t// focus ring for accessibility\n\tconst {isFocusVisible, focusProps} = useFocusRing();\n\n\treturn (\n\t\t<li\n\t\t\t{...mergeProps(optionProps, focusProps)}\n\t\t\tref={ref}\n\t\t\tclassName={cx(\n\t\t\t\t'text-stone-300 p-2 border rounded border-transparent outline-none cursor-pointer data-[focus-visible=true]:border-stone-50',\n\t\t\t\tisSelected && 'bg-stone-50 text-stone-800',\n\t\t\t\tallowsSelection && !isSelected && 'hover:bg-stone-800',\n\t\t\t\tallowsSelection && isFocused && !isSelected && 'bg-stone-900',\n\t\t\t)}\n\t\t\tdata-focus-visible={isFocusVisible}\n\t\t>\n\t\t\t{item.rendered}\n\t\t</li>\n\t);\n}\n","import React, {type ForwardedRef, forwardRef} from 'react';\nimport {\n\ttype AriaPopoverProps,\n\tDismissButton,\n\tOverlay,\n\tusePopover,\n\tuseObjectRef,\n} from 'react-aria';\nimport type {OverlayTriggerState} from 'react-stately';\n\ntype PopoverProps = {\n\treadonly children: React.ReactNode;\n\treadonly state: OverlayTriggerState;\n} & Omit<AriaPopoverProps, 'popoverRef'>;\n\nconst Popover = forwardRef(function Popover(\n\tprops: PopoverProps,\n\tref: ForwardedRef<HTMLDivElement>,\n) {\n\tconst {children, state, offset = 8} = props;\n\n\tconst popoverRef = useObjectRef(ref);\n\n\tconst {popoverProps, underlayProps, arrowProps, placement} = usePopover(\n\t\t{\n\t\t\t...props,\n\t\t\toffset,\n\t\t\tpopoverRef,\n\t\t},\n\t\tstate,\n\t);\n\n\t// Const combinedOverlayStyle = {\n\t// \t...popoverProps.style,\n\t// \toverflow: 'visible',\n\t// };\n\t// style={combinedOverlayStyle}\n\n\treturn (\n\t\t<Overlay>\n\t\t\t<div {...underlayProps} className='fixed inset-0' />\n\t\t\t<div\n\t\t\t\t{...popoverProps}\n\t\t\t\tref={popoverRef}\n\t\t\t\tclassName='scroll-smooth rounded border border-stone-500 bg-stone-900 scrollbar-thin scrollbar-track-transparent scrollbar-thumb-stone-50 scrollbar-thumb-rounded'\n\t\t\t>\n\t\t\t\t<svg\n\t\t\t\t\t{...arrowProps}\n\t\t\t\t\tclassName='absolute size-4 fill-stone-900 stroke-stone-500 stroke-[0.5px] data-[placement=bottom]:bottom-full\n\t\t\t\t\t data-[placement=left]:left-full\n\t\t\t\t\t data-[placement=right]:right-full data-[placement=top]:top-full data-[placement=bottom]:-translate-x-1/2\n\t\t\t\t\t data-[placement=bottom]:rotate-180 data-[placement=left]:-rotate-90\n\t\t\t\t\t data-[placement=right]:rotate-90'\n\t\t\t\t\tdata-placement={placement}\n\t\t\t\t\tviewBox='0 0 12 12'\n\t\t\t\t>\n\t\t\t\t\t<path d='M0 0 L6 6 L12 0' />\n\t\t\t\t</svg>\n\t\t\t\t<DismissButton onDismiss={state.close} />\n\t\t\t\t{children}\n\t\t\t\t<DismissButton onDismiss={state.close} />\n\t\t\t</div>\n\t\t</Overlay>\n\t);\n});\n\nexport {Popover};\n","import React, {type ReactNode, RefObject} from 'react';\nimport {useSelectState, type SelectStateOptions} from 'react-stately';\nimport {\n\tuseSelect,\n\ttype AriaSelectProps,\n\tHiddenSelect,\n\ttype Placement,\n\tuseObjectRef,\n} from 'react-aria';\n// @ts-expect-error bad typings\nimport ArrowDropDown from '@material-design-icons/svg/round/arrow_drop_down.svg';\nimport {Button} from './button/button.tsx';\nimport {Popover} from './popover.tsx';\nimport {ListBox} from './list-box.tsx';\nimport {cx} from './cva.ts';\n\nexport type SelectProps<T extends Record<string, unknown>> = {\n\treadonly className?: string;\n\treadonly placeholder?: ReactNode;\n\treadonly popoverPlacement?: Placement;\n\treadonly selectRef?: RefObject<HTMLButtonElement>;\n} & AriaSelectProps<T> &\n\tSelectStateOptions<T>;\n\nexport function Select<T extends Record<string, unknown>>(\n\tprops: SelectProps<T>,\n) {\n\tconst {\n\t\tclassName,\n\t\tlabel,\n\t\tisDisabled,\n\t\tname,\n\t\tplaceholder,\n\t\tisRequired,\n\t\tselectRef,\n\t\tpopoverPlacement = 'bottom start',\n\t} = props;\n\tconst state = useSelectState({\n\t\tvalidationBehavior: 'native',\n\t\t...props,\n\t});\n\tconst {selectedItem, isFocused, isOpen} = state;\n\n\tconst triggerRef = useObjectRef(selectRef);\n\n\tconst {\n\t\tlabelProps,\n\t\ttriggerProps,\n\t\tvalueProps,\n\t\tmenuProps,\n\t\tisInvalid,\n\t\tvalidationErrors,\n\t\terrorMessageProps,\n\t} = useSelect(\n\t\t{\n\t\t\tvalidationBehavior: 'native',\n\t\t\t...props,\n\t\t},\n\t\tstate,\n\t\ttriggerRef,\n\t);\n\n\treturn (\n\t\t<div className={cx('w-fit group', className)}>\n\t\t\t{label && (\n\t\t\t\t<div\n\t\t\t\t\t{...labelProps}\n\t\t\t\t\tdata-disabled={isDisabled}\n\t\t\t\t\tclassName={cx(\n\t\t\t\t\t\t'text-stone-400 text-sm mb-1 data-[disabled=true]:text-stone-500 transition-color',\n\t\t\t\t\t\t(isFocused || isOpen) && 'text-stone-50',\n\t\t\t\t\t\tisRequired && 'after:content-[\"*\"] after:ms-0.5',\n\t\t\t\t\t)}\n\t\t\t\t>\n\t\t\t\t\t{label}\n\t\t\t\t</div>\n\t\t\t)}\n\t\t\t<HiddenSelect\n\t\t\t\tisDisabled={isDisabled}\n\t\t\t\tstate={state}\n\t\t\t\ttriggerRef={triggerRef}\n\t\t\t\tlabel={label}\n\t\t\t\tname={name}\n\t\t\t/>\n\t\t\t<Button\n\t\t\t\t{...triggerProps}\n\t\t\t\tbuttonRef={triggerRef}\n\t\t\t\tvariant='outlined'\n\t\t\t\tisDisabled={isDisabled}\n\t\t\t\tclassName={cx(\n\t\t\t\t\t'w-full flex group-focus-within:glow',\n\t\t\t\t\tisOpen && 'glow-sm shadow-stone-800 border-stone-50',\n\t\t\t\t)}\n\t\t\t>\n\t\t\t\t<span {...valueProps} className='grow text-left'>\n\t\t\t\t\t{selectedItem\n\t\t\t\t\t\t? selectedItem.rendered\n\t\t\t\t\t\t: (placeholder ?? 'Selecciona una opción')}\n\t\t\t\t</span>\n\t\t\t\t<ArrowDropDown aria-hidden='true' className='fill-current' />\n\t\t\t</Button>\n\t\t\t{isOpen && (\n\t\t\t\t<Popover\n\t\t\t\t\tstate={state}\n\t\t\t\t\ttriggerRef={triggerRef}\n\t\t\t\t\tplacement={popoverPlacement}\n\t\t\t\t>\n\t\t\t\t\t{/** @ts-expect-error children not necessary **/}\n\t\t\t\t\t<ListBox\n\t\t\t\t\t\t{...menuProps}\n\t\t\t\t\t\tstate={state}\n\t\t\t\t\t\tclassName='max-h-96'\n\t\t\t\t\t/>\n\t\t\t\t</Popover>\n\t\t\t)}\n\t\t\t{isInvalid && (\n\t\t\t\t<div\n\t\t\t\t\t{...errorMessageProps}\n\t\t\t\t\tclassName='mt-1 text-xs text-red-400'\n\t\t\t\t>\n\t\t\t\t\t{validationErrors.join(' ')}\n\t\t\t\t</div>\n\t\t\t)}\n\t\t</div>\n\t);\n}\n","'use client';\nimport React from 'react';\nimport {\n\tuseSeparator,\n\ttype SeparatorProps as AriaSeparatorProps,\n} from 'react-aria';\nimport {cx} from './cva.ts';\n\nexport type SeparatorProps = {\n\treadonly className?: string;\n} & AriaSeparatorProps;\n\nexport function Separator(props: SeparatorProps) {\n\tconst {className, orientation = 'horizontal'} = props;\n\tconst {separatorProps} = useSeparator(props);\n\n\treturn (\n\t\t<div\n\t\t\t{...separatorProps}\n\t\t\tclassName={cx(\n\t\t\t\t'bg-stone-800',\n\t\t\t\torientation === 'horizontal' && 'h-[1px] w-full my-8',\n\t\t\t\torientation === 'vertical' && 'w-[1px] h-full mx-8',\n\t\t\t\tclassName,\n\t\t\t)}\n\t\t/>\n\t);\n}\n","'use client';\n\nimport React, {type ReactNode, useRef} from 'react';\nimport {type AriaModalOverlayProps, Overlay, useModalOverlay} from 'react-aria';\nimport {type OverlayTriggerState} from 'react-stately';\nimport {motion} from 'framer-motion';\n\nexport type SidebarProps = {\n\treadonly state: OverlayTriggerState;\n\treadonly children: ReactNode;\n} & AriaModalOverlayProps;\n\nexport function Sidebar(props: SidebarProps) {\n\tconst {state, children} = props;\n\n\tconst ref = useRef<HTMLDivElement>(null);\n\n\tconst {modalProps, underlayProps} = useModalOverlay(props, state, ref);\n\n\t// High z-index required to overlay over Leaflet maps\n\treturn (\n\t\t<Overlay>\n\t\t\t{/** @ts-expect-error react-aria doesn't use animation props **/}\n\t\t\t<motion.div\n\t\t\t\tclassName='fixed inset-0 z-[1200] flex flex-row-reverse'\n\t\t\t\tanimate={{\n\t\t\t\t\tbackground: 'rgba(0,0,0,0.5)',\n\t\t\t\t}}\n\t\t\t\tinitial={{\n\t\t\t\t\tbackground: 'rgba(0, 0, 0, 0)',\n\t\t\t\t}}\n\t\t\t\texit={{\n\t\t\t\t\tbackground: 'rgba(0, 0, 0, 0)',\n\t\t\t\t}}\n\t\t\t\t{...underlayProps}\n\t\t\t>\n\t\t\t\t{/** @ts-expect-error react-aria doesn't use animation props **/}\n\t\t\t\t<motion.div\n\t\t\t\t\t{...modalProps}\n\t\t\t\t\tref={ref}\n\t\t\t\t\tanimate={{\n\t\t\t\t\t\tright: 0,\n\t\t\t\t\t}}\n\t\t\t\t\tinitial={{\n\t\t\t\t\t\tright: '-100%',\n\t\t\t\t\t}}\n\t\t\t\t\texit={{\n\t\t\t\t\t\tright: '-100%',\n\t\t\t\t\t}}\n\t\t\t\t\tclassName='relative border border-stone-800 bg-stone-950'\n\t\t\t\t>\n\t\t\t\t\t{children}\n\t\t\t\t</motion.div>\n\t\t\t</motion.div>\n\t\t</Overlay>\n\t);\n}\n","'use client';\nimport React, {type ReactElement, type ReactNode} from 'react';\nimport {type OverlayTriggerProps, useOverlayTriggerState} from 'react-stately';\nimport {useOverlayTrigger} from 'react-aria';\nimport {AnimatePresence} from 'framer-motion';\nimport {Button} from '@/button/button.tsx';\nimport {type ButtonVariantProps} from '@/button/button-variants.tsx';\nimport {Sidebar} from '@/sidebar.tsx';\n\nexport type SidebarTriggerProps = {\n\treadonly children: ReactElement;\n\treadonly icon: ReactNode;\n\treadonly className?: string;\n} & OverlayTriggerProps &\n\tButtonVariantProps;\n\nexport function SidebarTrigger(props: SidebarTriggerProps) {\n\tconst {children, icon} = props;\n\n\tconst state = useOverlayTriggerState(props);\n\tconst {triggerProps, overlayProps} = useOverlayTrigger(\n\t\t{type: 'dialog'},\n\t\tstate,\n\t);\n\n\treturn (\n\t\t<>\n\t\t\t<Button {...props} {...triggerProps}>\n\t\t\t\t{icon}\n\t\t\t</Button>\n\t\t\t<AnimatePresence>\n\t\t\t\t{state.isOpen && (\n\t\t\t\t\t<Sidebar isDismissable {...props} state={state}>\n\t\t\t\t\t\t{React.cloneElement(children, overlayProps)}\n\t\t\t\t\t</Sidebar>\n\t\t\t\t)}\n\t\t\t</AnimatePresence>\n\t\t</>\n\t);\n}\n","'use client';\n\nimport React from 'react';\nimport {\n\tSwitchProps as AriaSwitchProps,\n\tSwitch as AriaSwitch,\n} from 'react-aria-components';\nimport {twMerge} from 'tailwind-merge';\n\nexport type SwitchProps = {\n\treadonly className?: string;\n\treadonly label?: string;\n} & AriaSwitchProps;\n\nexport function Switch(props: SwitchProps) {\n\tconst {label, className, ...rest} = props;\n\n\treturn (\n\t\t<AriaSwitch\n\t\t\t{...rest}\n\t\t\tclassName={twMerge(\n\t\t\t\t'group flex items-center gap-1 text-stone-300 text-sm',\n\t\t\t\tclassName,\n\t\t\t)}\n\t\t>\n\t\t\t<div className='me-2 w-[calc(theme(spacing.8)+4px)] rounded-full border border-stone-300 p-px transition-colors group-data-[selected=true]:border-stone-50 group-data-[selected=true]:bg-neutral-50'>\n\t\t\t\t<div className='size-4 rounded-full bg-stone-100 transition-all group-data-[selected=true]:translate-x-full group-data-[selected=true]:bg-stone-900' />\n\t\t\t</div>\n\t\t\t{label}\n\t\t</AriaSwitch>\n\t);\n}\n","'use client';\nimport React, {createContext, type ReactNode, useContext, useRef} from 'react';\nimport {type ToastState, useToastState} from '@react-stately/toast';\nimport {\n\ttype AriaToastProps,\n\ttype AriaToastRegionProps,\n\tuseToast,\n\tuseToastRegion,\n} from '@react-aria/toast';\nimport {AnimatePresence, motion, type Variants} from 'framer-motion';\nimport {omit} from 'lodash';\n// @ts-expect-error bad typings\nimport Close from '@material-design-icons/svg/round/close.svg';\nimport {Button} from './button/button.tsx';\nimport {cx} from './cva.ts';\n\nexport type ToastContent = {\n\tvariant?: 'success' | 'warn' | 'error';\n\ttitle: string;\n\ticon?: ReactNode;\n\tdescription?: string;\n};\n\ntype ToastProps = {\n\treadonly state: ToastState<ToastContent>;\n} & AriaToastProps<ToastContent>;\n\nconst toastVariants: Variants = {\n\tentering: {\n\t\topacity: 1,\n\t\ttop: 'auto',\n\t\tbottom: 'auto',\n\t\tright: 0,\n\t},\n\tinitial: {\n\t\topacity: 1,\n\t\ttop: 'auto',\n\t\tbottom: 128,\n\t\tright: 0,\n\t},\n\tinitialQueued: {\n\t\topacity: 0,\n\t\ttop: 256,\n\t\tright: 0,\n\t\tbottom: 'auto',\n\t},\n\texiting: {\n\t\tright: '-110%',\n\t},\n};\n\nfunction Toast(props: ToastProps) {\n\tconst {state, toast} = props;\n\tconst {animation, content} = toast;\n\tconst {title, description, icon, variant = 'success'} = content;\n\tconst ref = useRef<HTMLDivElement>(null);\n\tconst {toastProps, titleProps, descriptionProps, closeButtonProps} =\n\t\tuseToast(props, state, ref);\n\n\treturn (\n\t\t<motion.div\n\t\t\t{...omit(toastProps, [\n\t\t\t\t'onAnimationEnd',\n\t\t\t\t'onAnimationStart',\n\t\t\t\t'onDragStart',\n\t\t\t\t'onDragEnd',\n\t\t\t\t'onDrag',\n\t\t\t])}\n\t\t\tref={ref}\n\t\t\tlayout\n\t\t\tinitial={animation === 'queued' ? 'initialQueued' : 'initial'}\n\t\t\tanimate='entering'\n\t\t\texit='exiting'\n\t\t\tvariants={toastVariants}\n\t\t\tclassName={cx(\n\t\t\t\t'rounded flex p-2 items-center gap-2 relative max-w-2xl',\n\t\t\t\tvariant === 'success' && 'bg-green-400',\n\t\t\t\tvariant === 'error' && 'bg-red-400',\n\t\t\t\tvariant === 'warn' && 'bg-yellow-400',\n\t\t\t)}\n\t\t>\n\t\t\t<div>\n\t\t\t\t<div\n\t\t\t\t\t{...titleProps}\n\t\t\t\t\tclassName='flex gap-1 font-semibold text-stone-800'\n\t\t\t\t>\n\t\t\t\t\t{icon}\n\t\t\t\t\t{title}\n\t\t\t\t</div>\n\t\t\t\t{description && (\n\t\t\t\t\t<div {...descriptionProps} className='text-stone-700'>\n\t\t\t\t\t\t{description}\n\t\t\t\t\t</div>\n\t\t\t\t)}\n\t\t\t</div>\n\n\t\t\t{!toast.timeout && (\n\t\t\t\t<Button\n\t\t\t\t\t{...closeButtonProps}\n\t\t\t\t\tvariant='text'\n\t\t\t\t\tsize='xs'\n\t\t\t\t\tclassName={cx(\n\t\t\t\t\t\t'text-stone-800',\n\t\t\t\t\t\tvariant === 'success' && 'enabled:hover:bg-green-500',\n\t\t\t\t\t\tvariant === 'warn' && 'enabled:hover:bg-yellow-500',\n\t\t\t\t\t\tvariant === 'error' && 'enabled:hover:bg-red-500',\n\t\t\t\t\t)}\n\t\t\t\t>\n\t\t\t\t\t<Close className='fill-current' />\n\t\t\t\t</Button>\n\t\t\t)}\n\t\t</motion.div>\n\t);\n}\n\ntype ToastRegionProps = {\n\treadonly state: ToastState<ToastContent>;\n} & AriaToastRegionProps;\n\nfunction ToastRegion(props: ToastRegionProps) {\n\tconst {state} = props;\n\tconst ref = useRef<HTMLDivElement>(null);\n\n\tconst {regionProps} = useToastRegion(props, state, ref);\n\treturn (\n\t\t<motion.div\n\t\t\t{...omit(regionProps, [\n\t\t\t\t'onAnimationEnd',\n\t\t\t\t'onAnimationStart',\n\t\t\t\t'onDragStart',\n\t\t\t\t'onDragEnd',\n\t\t\t\t'onDrag',\n\t\t\t])}\n\t\t\tref={ref}\n\t\t\tlayout\n\t\t\tclassName='fixed bottom-4 right-4 z-[1050] flex flex-col gap-4 outline-none'\n\t\t>\n\t\t\t<AnimatePresence>\n\t\t\t\t{state.visibleToasts.map(toast => (\n\t\t\t\t\t<Toast key={toast.key} toast={toast} state={state} />\n\t\t\t\t))}\n\t\t\t</AnimatePresence>\n\t\t</motion.div>\n\t);\n}\n\nconst toastContext = createContext<ToastState<ToastContent> | null>(null);\n\nexport function useToasts() {\n\tconst toasts = useContext(toastContext);\n\tif (toasts === null) {\n\t\tthrow new Error('useToast must be called within a ToastProvider');\n\t}\n\n\treturn toasts;\n}\n\nexport type ToastProviderProps = {\n\treadonly children: ReactNode;\n};\n\nexport function ToastProvider(props: ToastProviderProps) {\n\tconst {children} = props;\n\tconst state = useToastState<ToastContent>({\n\t\tmaxVisibleToasts: 5,\n\t});\n\n\treturn (\n\t\t<>\n\t\t\t<toastContext.Provider value={state}>\n\t\t\t\t{children}\n\t\t\t</toastContext.Provider>\n\t\t\t<ToastRegion {...props} state={state} />\n\t\t</>\n\t);\n}\n","'use client';\n\nimport {useEffect} from 'react';\nimport {type ToastContent, useToasts} from './toast.tsx';\n\n/**\n * Represents the properties for HashSpyToaster component.\n */\nexport type HashSpyToasterProps = {\n\treadonly toast: ToastContent;\n\treadonly hash: string;\n};\n\n/**\n * Displays a toast message if the current hash matches one of the specified hashes.\n *\n * @param {HashSpyToasterProps} props - The props object containing toast and hash values.\n *\n * @returns {null} - This method does not return any value.\n */\nexport function HashSpyToaster(props: HashSpyToasterProps): null {\n\tconst {toast, hash} = props;\n\n\tconst toasts = useToasts();\n\n\tuseEffect(() => {\n\t\tconst hashes = window.location.hash.slice(1).split(',');\n\t\tif (hashes.includes(hash)) {\n\t\t\ttoasts.add(toast);\n\t\t}\n\t\t// eslint-disable-next-line react-hooks/exhaustive-deps\n\t}, [toast, hash]);\n\n\treturn null;\n}\n","import {Key, ListProps, useListState} from 'react-stately';\n\nexport type ReorderableListStateProps<T extends Record<string, unknown>> = {\n\treadonly onReorder: (key: Key, previous?: Key, next?: Key) => void;\n} & ListProps<T>;\n\nexport default function useReorderableListState<\n\tT extends Record<string, unknown>,\n>(props: ReorderableListStateProps<T>) {\n\tconst {onReorder} = props;\n\tconst state = useListState(props);\n\n\treturn {\n\t\t...state,\n\t\treorder(key: Key, previous?: Key, next?: Key) {\n\t\t\tonReorder(key, previous, next);\n\t\t},\n\t};\n}\n","import React from 'react';\n\nexport function Spacer() {\n\treturn <div className='grow' />;\n}\n","import React, {useMemo, useState} from 'react';\nimport {Map, Seq} from 'immutable';\nimport {type Key} from 'react-stately';\n// @ts-expect-error bad typings\nimport DragHandle from '@material-design-icons/svg/round/drag_handle.svg';\n// @ts-expect-error bad typings\nimport Remove from '@material-design-icons/svg/round/remove.svg';\nimport {Spacer} from '@/spacer.tsx';\nimport {Button} from '@/button/button.tsx';\nimport useReorderableListState, {\n\ttype ReorderableListStateProps,\n} from '@/hooks/use-reorderable-list-state.ts';\nimport {cx} from '@/cva.ts';\n\nexport type ListPrioritizerProps<T extends Record<string, unknown>> = {\n\treadonly onRemove: (key: Key) => void;\n\treadonly className?: string;\n} & ReorderableListStateProps<T>;\n\nexport function ListPrioritizer<T extends Record<string, unknown>>(\n\tprops: ListPrioritizerProps<T>,\n) {\n\tconst {onRemove, className} = props;\n\n\tconst {collection, reorder} = useReorderableListState(props);\n\n\tconst [dragStartY, setDragStartY] = useState(0);\n\n\tconst [deltaY, setDeltaY] = useState(0);\n\n\tconst [activityReferences, setActivityReferences] =\n\t\tuseState<Map<Key, HTMLDivElement>>(Map());\n\n\tconst [draggedActivity, setDraggedActivity] = useState<Key | undefined>();\n\n\tconst handleMove = (deltaY: number, key: Key) => {\n\t\tsetDeltaY(deltaY);\n\n\t\tconst previousKey = collection.getKeyBefore(key);\n\t\tif (previousKey !== null && previousKey !== undefined) {\n\t\t\tconst previousContainer = activityReferences.get(key);\n\t\t\tif (\n\t\t\t\tpreviousContainer !== undefined &&\n\t\t\t\tdeltaY < -(previousContainer.clientHeight / 2)\n\t\t\t) {\n\t\t\t\tsetDragStartY(previousContainer.getBoundingClientRect().y);\n\t\t\t\tsetDeltaY(0);\n\t\t\t\treorder(key, previousKey);\n\t\t\t}\n\t\t}\n\n\t\tconst nextKey = collection.getKeyAfter(key);\n\t\tif (nextKey !== null && nextKey !== undefined) {\n\t\t\tconst nextContainer = activityReferences.get(key);\n\t\t\tif (\n\t\t\t\tnextContainer !== undefined &&\n\t\t\t\tdeltaY > nextContainer.clientHeight\n\t\t\t) {\n\t\t\t\tsetDragStartY(\n\t\t\t\t\tnextContainer.getBoundingClientRect().y +\n\t\t\t\t\t\tnextContainer.clientHeight / 2,\n\t\t\t\t);\n\t\t\t\tsetDeltaY(0);\n\t\t\t\treorder(key, undefined, nextKey);\n\t\t\t}\n\t\t}\n\t};\n\n\tconst touchStartHandler = (key: Key) => (event: React.TouchEvent) => {\n\t\tsetDraggedActivity(key);\n\t\tconst rect = event.currentTarget.getBoundingClientRect();\n\t\tsetDragStartY(rect.y + rect.height / 2);\n\t};\n\n\tconst dragStartHandler = (key: Key) => (event: React.DragEvent) => {\n\t\tevent.dataTransfer.setDragImage(new Image(), 0, 0);\n\t\tsetDraggedActivity(key);\n\t\tconst rect = event.currentTarget.getBoundingClientRect();\n\t\tsetDragStartY(rect.y + rect.height / 2);\n\t};\n\n\tconst touchHandler = (key: Key) => (event: React.TouchEvent) => {\n\t\tif (event.touches.length !== 1) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst deltaY = event.touches[0].clientY - dragStartY;\n\n\t\thandleMove(deltaY, key);\n\t};\n\n\tconst dragHandler = (key: Key) => (event: React.DragEvent) => {\n\t\tif (event.clientY === 0) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst deltaY = event.clientY - dragStartY;\n\n\t\thandleMove(deltaY, key);\n\t};\n\n\tconst dragEndHandler = () => {\n\t\tsetDraggedActivity(undefined);\n\t\tsetDragStartY(0);\n\t\tsetDeltaY(0);\n\t};\n\n\tconst draggedActivityOffset = useMemo(() => {\n\t\tif (draggedActivity === undefined) {\n\t\t\treturn;\n\t\t}\n\n\t\tif (draggedActivity === collection.getFirstKey() && deltaY < 0) {\n\t\t\treturn '0px';\n\t\t}\n\n\t\tif (draggedActivity === collection.getLastKey() && deltaY > 0) {\n\t\t\treturn '0px';\n\t\t}\n\n\t\treturn `${deltaY}px`;\n\t}, [collection, deltaY, draggedActivity]);\n\n\treturn (\n\t\t<div\n\t\t\tclassName={cx(\n\t\t\t\t'grow basis-5/12 border border-stone-700 rounded divide-stone-700 divide-y',\n\t\t\t\tclassName,\n\t\t\t)}\n\t\t>\n\t\t\t{Seq(collection).map(activity => (\n\t\t\t\t<div\n\t\t\t\t\tkey={activity.key}\n\t\t\t\t\tclassName='relative'\n\t\t\t\t\tstyle={{\n\t\t\t\t\t\theight:\n\t\t\t\t\t\t\tdraggedActivity === activity.key\n\t\t\t\t\t\t\t\t? `${activityReferences.get(activity.key)?.clientHeight ?? 0}px`\n\t\t\t\t\t\t\t\t: undefined,\n\t\t\t\t\t}}\n\t\t\t\t>\n\t\t\t\t\t<div\n\t\t\t\t\t\tref={element => {\n\t\t\t\t\t\t\tif (element !== null) {\n\t\t\t\t\t\t\t\tsetActivityReferences(current =>\n\t\t\t\t\t\t\t\t\tcurrent.set(activity.key, element),\n\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}}\n\t\t\t\t\t\tclassName={cx(\n\t\t\t\t\t\t\tdraggedActivity === activity.key &&\n\t\t\t\t\t\t\t\t'absolute z-10 bg-stone-900 w-full border-y border-stone-700',\n\t\t\t\t\t\t\tdraggedActivity === undefined &&\n\t\t\t\t\t\t\t\t'hover:bg-stone-900',\n\t\t\t\t\t\t\t'flex items-center gap-4 rounded grow text-stone-200 p-2 group select-none left-0',\n\t\t\t\t\t\t)}\n\t\t\t\t\t\tstyle={{\n\t\t\t\t\t\t\ttop:\n\t\t\t\t\t\t\t\tdraggedActivity === activity.key\n\t\t\t\t\t\t\t\t\t? draggedActivityOffset\n\t\t\t\t\t\t\t\t\t: undefined,\n\t\t\t\t\t\t}}\n\t\t\t\t\t>\n\t\t\t\t\t\t<div\n\t\t\t\t\t\t\tdraggable\n\t\t\t\t\t\t\tclassName='cursor-grab touch-none fill-stone-400'\n\t\t\t\t\t\t\tonTouchStart={touchStartHandler(activity.key)}\n\t\t\t\t\t\t\tonTouchMove={touchHandler(activity.key)}\n\t\t\t\t\t\t\tonTouchEnd={dragEndHandler}\n\t\t\t\t\t\t\tonDragStart={dragStartHandler(activity.key)}\n\t\t\t\t\t\t\tonDrag={dragHandler(activity.key)}\n\t\t\t\t\t\t\tonDragEnd={dragEndHandler}\n\t\t\t\t\t\t>\n\t\t\t\t\t\t\t<DragHandle />\n\t\t\t\t\t\t</div>\n\n\t\t\t\t\t\t{activity.rendered}\n\t\t\t\t\t\t<Spacer />\n\t\t\t\t\t\t<Button\n\t\t\t\t\t\t\tclassName='bg-transparent hover:bg-stone-700'\n\t\t\t\t\t\t\tvariant='text'\n\t\t\t\t\t\t\tonPress={() => {\n\t\t\t\t\t\t\t\tonRemove(activity.key);\n\t\t\t\t\t\t\t}}\n\t\t\t\t\t\t>\n\t\t\t\t\t\t\t<Remove className='fill-current' />\n\t\t\t\t\t\t</Button>\n\t\t\t\t\t</div>\n\t\t\t\t</div>\n\t\t\t))}\n\t\t</div>\n\t);\n}\n","import React, {type RefObject} from 'react';\nimport {\n\ttype AriaGridListProps,\n\tuseGridList,\n\tuseGridListItem,\n\tuseFocusRing,\n\tmergeProps,\n\tuseGridListSelectionCheckbox,\n\tuseObjectRef,\n} from 'react-aria';\nimport {\n\tuseListState,\n\ttype ListProps as ListStateProps,\n\ttype ListState,\n\ttype Node,\n} from 'react-stately';\nimport {Checkbox} from './checkbox.tsx';\nimport {cx} from './cva.ts';\n\nexport type ListProps<T extends Record<string, unknown>> = {\n\treadonly className?: string;\n\treadonly listRef?: RefObject<HTMLUListElement>;\n} & AriaGridListProps<T> &\n\tListStateProps<T>;\n\nexport function List<T extends Record<string, unknown>>(props: ListProps<T>) {\n\tconst {className} = props;\n\tconst state = useListState(props);\n\tconst listRef = useObjectRef(props.listRef);\n\n\tconst {gridProps} = useGridList(props, state, listRef);\n\n\treturn (\n\t\t<ul\n\t\t\t{...gridProps}\n\t\t\tref={listRef}\n\t\t\tclassName={cx(\n\t\t\t\t'border border-stone-700 divide-y divide-stone-700 rounded',\n\t\t\t\tclassName,\n\t\t\t)}\n\t\t>\n\t\t\t{[...state.collection].map(item => (\n\t\t\t\t<ListItem key={item.key} item={item} state={state} />\n\t\t\t))}\n\t\t</ul>\n\t);\n}\n\ntype ListItemProps<T extends Record<string, unknown>> = {\n\treadonly state: ListState<T>;\n\treadonly item: Node<T>;\n\treadonly listItemRef?: RefObject<HTMLLIElement>;\n};\n\nfunction ListCheckbox<T extends Record<string, unknown>>(\n\tprops: ListItemProps<T>,\n) {\n\tconst {state, item} = props;\n\tconst {checkboxProps} = useGridListSelectionCheckbox(\n\t\t{\n\t\t\tkey: item.key,\n\t\t},\n\t\tstate,\n\t);\n\treturn <Checkbox {...checkboxProps} />;\n}\n\nexport function ListItem<T extends Record<string, unknown>>(\n\tprops: ListItemProps<T>,\n) {\n\tconst {item, state} = props;\n\tconst itemRef = useObjectRef(props.listItemRef);\n\tconst {rowProps, gridCellProps} = useGridListItem(\n\t\t{node: item},\n\t\tstate,\n\t\titemRef,\n\t);\n\n\tconst {focusProps} = useFocusRing();\n\n\tconst selectable =\n\t\tstate.selectionManager.selectionMode !== 'none' &&\n\t\tstate.selectionManager.selectionBehavior === 'toggle';\n\n\treturn (\n\t\t<li\n\t\t\t{...mergeProps(rowProps, focusProps)}\n\t\t\tref={itemRef}\n\t\t\tclassName={cx('p-2', selectable && 'cursor-pointer')}\n\t\t>\n\t\t\t<div\n\t\t\t\t{...gridCellProps}\n\t\t\t\tclassName={cx('text-stone-300 flex items-center gap-4')}\n\t\t\t>\n\t\t\t\t{selectable && <ListCheckbox state={state} item={item} />}\n\t\t\t\t{item.rendered}\n\t\t\t</div>\n\t\t</li>\n\t);\n}\n","import React from 'react';\nimport {cx} from './cva.ts';\n\nexport type LoadingSpinnerProps = {\n\treadonly className?: string;\n};\n\nexport function LoadingSpinner(props: LoadingSpinnerProps) {\n\tconst {className} = props;\n\treturn (\n\t\t<svg\n\t\t\tclassName={cx('animate-spin w-4 h-4', className)}\n\t\t\tviewBox='0 0 50 50'\n\t\t>\n\t\t\t<circle\n\t\t\t\tclassName='animate-spin-path stroke-current stroke-4'\n\t\t\t\tcx='25'\n\t\t\t\tcy='25'\n\t\t\t\tr='20'\n\t\t\t\tfill='none'\n\t\t\t\tstrokeWidth='5'\n\t\t\t/>\n\t\t</svg>\n\t);\n}\n","import {type ReactNode, type RefObject} from 'react';\nimport {\n\ttype AriaNumberFieldProps,\n\tuseLocale,\n\tuseNumberField,\n\tuseObjectRef,\n} from 'react-aria';\nimport {type NumberFieldStateOptions, useNumberFieldState} from 'react-stately';\nimport {twJoin} from 'tailwind-merge';\n// @ts-expect-error bad typings\nimport ArrowDropDown from '@material-design-icons/svg/round/arrow_drop_down.svg';\n// @ts-expect-error bad typings\nimport ArrowDropUp from '@material-design-icons/svg/round/arrow_drop_up.svg';\nimport {Button} from '@/button/button.tsx';\nimport {cx} from '@/cva.ts';\n\nexport type NumberFieldProps = {\n\treadonly className?: string;\n\treadonly name?: string;\n\treadonly icon?: ReactNode;\n\treadonly inputRef?: RefObject<HTMLInputElement>;\n} & AriaNumberFieldProps &\n\tOmit<NumberFieldStateOptions, 'locale'>;\n\nexport function NumberField(props: NumberFieldProps) {\n\tconst {locale} = useLocale();\n\tconst {label, className, icon, isDisabled, name, isRequired} = props;\n\tconst state = useNumberFieldState({\n\t\tvalidationBehavior: 'native',\n\t\t...props,\n\t\tlocale,\n\t});\n\tconst inputRef = useObjectRef(props.inputRef);\n\tconst {\n\t\tlabelProps,\n\t\tgroupProps,\n\t\tinputProps,\n\t\tincrementButtonProps,\n\t\tdecrementButtonProps,\n\t\terrorMessageProps,\n\t\tisInvalid,\n\t\tvalidationErrors,\n\t} = useNumberField(\n\t\t{\n\t\t\tvalidationBehavior: 'native',\n\t\t\t...props,\n\t\t},\n\t\tstate,\n\t\tinputRef,\n\t);\n\treturn (\n\t\t<div data-disabled={isDisabled} className={twJoin('group', className)}>\n\t\t\t<label\n\t\t\t\t{...labelProps}\n\t\t\t\tclassName={cx(\n\t\t\t\t\t'block text-stone-400 group-focus-within:text-stone-50 text-sm mb-1 group-data-[disabled=true]:text-stone-500 transition-colors',\n\t\t\t\t\tisRequired && 'after:content-[\"*\"] after:ml-0.5',\n\t\t\t\t)}\n\t\t\t>\n\t\t\t\t{label}\n\t\t\t</label>\n\n\t\t\t<div\n\t\t\t\t{...groupProps}\n\t\t\t\tclassName='flex w-full items-center gap-2 rounded border border-stone-700 ps-2 shadow-stone-800 transition-all group-focus-within:border-stone-50 group-focus-within:glow-sm group-data-[disabled=true]:border-stone-800'\n\t\t\t>\n\t\t\t\t{icon}\n\t\t\t\t<input\n\t\t\t\t\t{...inputProps}\n\t\t\t\t\tref={inputRef}\n\t\t\t\t\tname={name}\n\t\t\t\t\tclassName='min-w-0 grow bg-transparent py-2 text-stone-200 outline-none disabled:cursor-not-allowed disabled:text-stone-600'\n\t\t\t\t/>\n\t\t\t\t<div className='flex-none basis-4 flex-col items-center justify-around fill-stone-400'>\n\t\t\t\t\t<Button {...incrementButtonProps} variant='text' size='xs'>\n\t\t\t\t\t\t<ArrowDropUp viewBox='0 0 24 24' className='size-4' />\n\t\t\t\t\t</Button>\n\t\t\t\t\t<Button {...decrementButtonProps} variant='text' size='xs'>\n\t\t\t\t\t\t<ArrowDropDown viewBox='0 0 24 24' className='size-4' />\n\t\t\t\t\t</Button>\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t\t{isInvalid && (\n\t\t\t\t<div\n\t\t\t\t\t{...errorMessageProps}\n\t\t\t\t\tclassName='mt-1 text-xs text-red-400'\n\t\t\t\t>\n\t\t\t\t\t{validationErrors.join(' ')}\n\t\t\t\t</div>\n\t\t\t)}\n\t\t</div>\n\t);\n}\n","import React, {type ReactElement, type ReactNode} from 'react';\nimport {type OverlayTriggerProps, useOverlayTriggerState} from 'react-stately';\nimport {mergeProps, type Placement, useOverlayTrigger} from 'react-aria';\n\nimport {Button, type ButtonProps} from '@/button/button.tsx';\n\nimport {Popover} from '@/popover.tsx';\n\nexport type PopoverButtonTriggerProps = {\n\treadonly className?: string;\n\treadonly label: ReactNode;\n\treadonly children: ReactElement;\n\treadonly placement: Placement;\n} & OverlayTriggerProps &\n\tButtonProps;\n\nexport function PopoverButtonTrigger(props: PopoverButtonTriggerProps) {\n\tconst {label, children, placement} = props;\n\tconst buttonRef = React.useRef<HTMLButtonElement>(null);\n\tconst state = useOverlayTriggerState(props);\n\tconst {triggerProps, overlayProps} = useOverlayTrigger(\n\t\t{type: 'dialog'},\n\t\tstate,\n\t\tbuttonRef,\n\t);\n\n\treturn (\n\t\t<>\n\t\t\t<Button {...mergeProps(triggerProps, props)} buttonRef={buttonRef}>\n\t\t\t\t{label}\n\t\t\t</Button>\n\t\t\t{state.isOpen && (\n\t\t\t\t<Popover\n\t\t\t\t\t{...props}\n\t\t\t\t\ttriggerRef={buttonRef}\n\t\t\t\t\tstate={state}\n\t\t\t\t\tplacement={placement}\n\t\t\t\t>\n\t\t\t\t\t{React.cloneElement(children, overlayProps)}\n\t\t\t\t</Popover>\n\t\t\t)}\n\t\t</>\n\t);\n}\n","'use client';\n\nimport React, {type ReactNode} from 'react';\nimport {motion} from 'framer-motion';\n\nexport type AnimatedLayoutContainerProps = {\n\treadonly children: ReactNode;\n\treadonly className?: string;\n};\n\nexport function AnimatedLayoutContainer(\n\tprops: AnimatedLayoutContainerProps,\n) {\n\tconst {children, className} = props;\n\treturn (\n\t\t<motion.div layout className={className}>\n\t\t\t{children}\n\t\t</motion.div>\n\t);\n}\n","import React, {useRef} from 'react';\nimport {\n\ttype AriaTagGroupProps,\n\ttype AriaTagProps,\n\tuseFocusRing,\n\tuseTag,\n\tuseTagGroup,\n} from 'react-aria';\nimport {Set} from 'immutable';\nimport {type Key, type ListState, type Node, useListState} from 'react-stately';\n// @ts-expect-error bad typings\nimport Close from '@material-design-icons/svg/round/close.svg';\nimport {Button} from './button/button.tsx';\n\nexport type TagGroupProps<T extends Record<string, unknown>> = {\n\treadonly className?: string;\n\treadonly onRemove?: (keys: Set<Key>) => void;\n} & Omit<AriaTagGroupProps<T>, 'onRemove'>;\n\nexport function TagGroup<T extends Record<string, unknown>>(\n\tprops: TagGroupProps<T>,\n) {\n\tconst {className, label, description, errorMessage, onRemove} = props;\n\tconst divRef = useRef<HTMLDivElement>(null);\n\n\tconst state = useListState(props);\n\n\tconst {gridProps, labelProps, descriptionProps, errorMessageProps} =\n\t\tuseTagGroup(\n\t\t\t{\n\t\t\t\t...props,\n\t\t\t\tonRemove:\n\t\t\t\t\tonRemove === undefined\n\t\t\t\t\t\t? undefined\n\t\t\t\t\t\t: keys => {\n\t\t\t\t\t\t\t\tonRemove(Set(keys));\n\t\t\t\t\t\t\t},\n\t\t\t},\n\t\t\tstate,\n\t\t\tdivRef,\n\t\t);\n\n\treturn (\n\t\t<div className={className}>\n\t\t\t<div {...labelProps} className='mb-1 text-sm text-stone-300'>\n\t\t\t\t{label}\n\t\t\t</div>\n\t\t\t<div {...gridProps} ref={divRef} className='flex flex-wrap gap-2'>\n\t\t\t\t{[...state.collection].map(item => (\n\t\t\t\t\t<Tag key={item.key} item={item} state={state} />\n\t\t\t\t))}\n\t\t\t</div>\n\t\t\t{description === undefined ? null : (\n\t\t\t\t<div {...descriptionProps}>{description}</div>\n\t\t\t)}\n\t\t\t{errorMessage === undefined ? null : (\n\t\t\t\t<div {...errorMessageProps}> {errorMessage} </div>\n\t\t\t)}\n\t\t</div>\n\t);\n}\n\ntype TagProps<T> = {\n\treadonly item: Node<T>;\n\treadonly state: ListState<T>;\n} & AriaTagProps<T>;\n\nfunction Tag<T>(props: TagProps<T>) {\n\tconst {item, state} = props;\n\n\tconst ref = useRef(null);\n\n\tconst {focusProps, isFocusVisible} = useFocusRing({\n\t\twithin: true,\n\t});\n\n\tconst {rowProps, gridCellProps, removeButtonProps, allowsRemoving} = useTag(\n\t\tprops,\n\t\tstate,\n\t\tref,\n\t);\n\n\treturn (\n\t\t<div\n\t\t\tref={ref}\n\t\t\t{...rowProps}\n\t\t\t{...focusProps}\n\t\t\tdata-focus-visible={isFocusVisible}\n\t\t>\n\t\t\t<div\n\t\t\t\t{...gridCellProps}\n\t\t\t\tclassName='flex items-center gap-2 rounded border border-stone-700 px-2 text-stone-300'\n\t\t\t>\n\t\t\t\t{item.rendered}\n\t\t\t\t{allowsRemoving && (\n\t\t\t\t\t<Button {...removeButtonProps} variant='text' size='sm'>\n\t\t\t\t\t\t<Close className='fill-current' />\n\t\t\t\t\t</Button>\n\t\t\t\t)}\n\t\t\t</div>\n\t\t</div>\n\t);\n}\n","import React, {type ReactNode, useRef} from 'react';\nimport {type AriaComboBoxProps, useComboBox} from 'react-aria';\nimport {\n\ttype ComboBoxState,\n\ttype ComboBoxStateOptions,\n\tuseComboBoxState,\n} from 'react-stately';\n// @ts-expect-error bad typings\nimport ArrowDropDown from '@material-design-icons/svg/round/arrow_drop_down.svg';\nimport {BaseListBox} from '@/list-box.tsx';\nimport {Button} from '@/button';\nimport {Popover} from '@/popover.tsx';\nimport {cx} from '@/cva.ts';\n\nexport type ComboBoxProps<T extends Record<string, unknown>> =\n\t| StatefulComboBoxProps<T>\n\t| BaseComboBoxProps<T>;\n\nexport function ComboBox<T extends Record<string, unknown>>(\n\tprops: ComboBoxProps<T>,\n) {\n\treturn 'state' in props ? (\n\t\t<BaseComboBox {...props} />\n\t) : (\n\t\t<StatefulComboBox {...props} />\n\t);\n}\n\nexport type StatefulComboBoxProps<T extends Record<string, unknown>> = Omit<\n\tBaseComboBoxProps<T>,\n\t'state'\n> &\n\tComboBoxStateOptions<T>;\n\nexport function StatefulComboBox<T extends Record<string, unknown>>(\n\tprops: StatefulComboBoxProps<T>,\n) {\n\tconst state = useComboBoxState<T>(props);\n\n\treturn <BaseComboBox {...props} state={state} />;\n}\n\nexport type BaseComboBoxProps<T extends Record<string, unknown>> = {\n\treadonly icon?: ReactNode;\n\treadonly className?: string;\n\treadonly state: ComboBoxState<T>;\n} & AriaComboBoxProps<T>;\n\nexport function BaseComboBox<T extends Record<string, unknown>>(\n\tprops: BaseComboBoxProps<T>,\n) {\n\tconst {icon, state, className} = props;\n\n\tconst buttonObjectRef = useRef<HTMLButtonElement>(null);\n\tconst inputObjectRef = useRef<HTMLInputElement>(null);\n\tconst listBoxObjectRef = useRef<HTMLUListElement>(null);\n\tconst popoverObjectRef = useRef<HTMLDivElement>(null);\n\n\tconst {buttonProps, inputProps, listBoxProps, labelProps} = useComboBox<T>(\n\t\t{\n\t\t\t...props,\n\t\t\tinputRef: inputObjectRef,\n\t\t\tbuttonRef: buttonObjectRef,\n\t\t\tlistBoxRef: listBoxObjectRef,\n\t\t\tpopoverRef: popoverObjectRef,\n\t\t},\n\t\tstate,\n\t);\n\n\treturn (\n\t\t<div className={cx('group w-fit', className)}>\n\t\t\t<label\n\t\t\t\t{...labelProps}\n\t\t\t\tclassName='mb-1 text-sm text-stone-300 transition-colors group-focus-within:text-stone-50'\n\t\t\t>\n\t\t\t\t{props.label}\n\t\t\t</label>\n\t\t\t<div className='flex w-full rounded border border-stone-700 bg-stone-950 text-stone-300 transition-all group-focus-within:border-stone-50 group-focus-within:shadow-stone-800 group-focus-within:glow-sm'>\n\t\t\t\t{icon}\n\t\t\t\t<input\n\t\t\t\t\t{...inputProps}\n\t\t\t\t\tref={inputObjectRef}\n\t\t\t\t\tclassName='grow bg-transparent p-1 outline-0 placeholder:text-stone-500'\n\t\t\t\t/>\n\t\t\t\t<Button\n\t\t\t\t\t{...buttonProps}\n\t\t\t\t\tbuttonRef={buttonObjectRef}\n\t\t\t\t\tvariant='text'\n\t\t\t\t>\n\t\t\t\t\t<ArrowDropDown\n\t\t\t\t\t\taria-hidden='true'\n\t\t\t\t\t\tclassName='fill-current'\n\t\t\t\t\t/>\n\t\t\t\t</Button>\n\t\t\t\t{state.isOpen ? (\n\t\t\t\t\t<Popover\n\t\t\t\t\t\tref={popoverObjectRef}\n\t\t\t\t\t\tstate={state}\n\t\t\t\t\t\ttriggerRef={inputObjectRef}\n\t\t\t\t\t\tplacement='bottom start'\n\t\t\t\t\t>\n\t\t\t\t\t\t{/* @ts-expect-error children prop is passed in by react-aria */}\n\t\t\t\t\t\t<BaseListBox\n\t\t\t\t\t\t\t{...listBoxProps}\n\t\t\t\t\t\t\tlistBoxRef={listBoxObjectRef}\n\t\t\t\t\t\t\tstate={state}\n\t\t\t\t\t\t\tclassName='max-h-96'\n\t\t\t\t\t\t/>\n\t\t\t\t\t</Popover>\n\t\t\t\t) : null}\n\t\t\t</div>\n\t\t</div>\n\t);\n}\n","import React, {useMemo} from 'react';\nimport {useListState, type Key} from 'react-stately';\nimport {type List, Seq, Set} from 'immutable';\nimport {type CollectionElement} from '@react-types/shared';\nimport {useId} from 'react-aria';\nimport {ComboBox} from './combo-box.tsx';\nimport {TagGroup} from './tag-group.tsx';\nimport {cx} from './cva.ts';\n\nexport type ComboBoxTagMultiSelectProps<T extends Record<string, unknown>> = {\n\treadonly label?: string;\n\treadonly children: (item: T) => CollectionElement<T>;\n\treadonly items: List<T>;\n\treadonly filteredKeys: Set<Key>;\n\treadonly filterText: string;\n\treadonly setFilterText: (filterText: string) => void;\n\treadonly selectedKeys: Set<Key> | 'all';\n\treadonly setSelectedKeys: (keys: Set<Key> | 'all') => void;\n\treadonly className?: string;\n\treadonly searchPlaceholder?: string;\n};\n\nexport function ComboBoxTagMultiSelect<T extends Record<string, unknown>>(\n\tprops: ComboBoxTagMultiSelectProps<T>,\n) {\n\tconst {\n\t\titems,\n\t\tfilteredKeys,\n\t\tsetSelectedKeys,\n\t\tfilterText,\n\t\tsetFilterText,\n\t\tselectedKeys,\n\t\tchildren,\n\t\tlabel,\n\t\tclassName,\n\t\tsearchPlaceholder,\n\t} = props;\n\tconst {collection, selectionManager} = useListState<T>({\n\t\titems,\n\t\tchildren,\n\t\tselectedKeys,\n\t\tonSelectionChange(keys) {\n\t\t\tsetSelectedKeys(Set(keys));\n\t\t},\n\t\tselectionMode: 'multiple',\n\t});\n\n\tconst id = useId();\n\n\tconst selectedItems = useMemo(\n\t\t() =>\n\t\t\tSeq(selectionManager.selectedKeys)\n\t\t\t\t.map(key => collection.getItem(key)!.value!)\n\t\t\t\t.toList(),\n\t\t[collection, selectionManager],\n\t);\n\tconst filteredItems = useMemo(\n\t\t() =>\n\t\t\tSeq(filteredKeys)\n\t\t\t\t.map(key => collection.getItem(key)!.value!)\n\t\t\t\t.toList(),\n\t\t[collection, filteredKeys],\n\t);\n\n\treturn (\n\t\t<div className={cx('group w-fit', className)}>\n\t\t\t{label === undefined ? null : (\n\t\t\t\t<p\n\t\t\t\t\tclassName='text-sm text-stone-300 group-focus-within:text-stone-50'\n\t\t\t\t\tid={id}\n\t\t\t\t>\n\t\t\t\t\t{label}\n\t\t\t\t</p>\n\t\t\t)}\n\n\t\t\t<TagGroup\n\t\t\t\taria-labelledby={id}\n\t\t\t\titems={selectedItems}\n\t\t\t\tclassName={cx(\n\t\t\t\t\t(selectedKeys === 'all' || selectedKeys.size > 0) && 'mb-2',\n\t\t\t\t)}\n\t\t\t\tonRemove={keys => {\n\t\t\t\t\tfor (const key of keys) {\n\t\t\t\t\t\tselectionManager.toggleSelection(key);\n\t\t\t\t\t}\n\t\t\t\t}}\n\t\t\t>\n\t\t\t\t{children}\n\t\t\t</TagGroup>\n\t\t\t<ComboBox\n\t\t\t\taria-labelledby={id}\n\t\t\t\tplaceholder={searchPlaceholder}\n\t\t\t\titems={filteredItems}\n\t\t\t\tinputValue={filterText}\n\t\t\t\tclassName='w-full'\n\t\t\t\tonInputChange={setFilterText}\n\t\t\t\tonSelectionChange={(key: Key | null) => {\n\t\t\t\t\tif (key === null) {\n\t\t\t\t\t\tif (filterText !== '') {\n\t\t\t\t\t\t\tsetFilterText('');\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\n\t\t\t\t\tsetFilterText('');\n\t\t\t\t\tif (selectedKeys === 'all') {\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\n\t\t\t\t\tsetSelectedKeys(selectedKeys.add(key));\n\t\t\t\t}}\n\t\t\t>\n\t\t\t\t{children}\n\t\t\t</ComboBox>\n\t\t</div>\n\t);\n}\n","import {type ComponentProps, type ReactNode} from 'react';\nimport {type VariantProps} from 'cva';\nimport {buttonVariants} from '@/button/button-variants';\n\n// eslint-disable-next-line @typescript-eslint/naming-convention\nexport type ALinkButtonProps = {\n\treadonly children: ReactNode;\n\treadonly className?: string;\n} & ComponentProps<'a'> &\n\tVariantProps<typeof buttonVariants>;\n\n// eslint-disable-next-line @typescript-eslint/naming-convention\nexport function ALinkButton(props: ALinkButtonProps) {\n\tconst {children} = props;\n\treturn (\n\t\t// eslint-disable-next-line react/jsx-no-target-blank\n\t\t<a rel='noreferrer' {...props} className={buttonVariants(props)}>\n\t\t\t{children}\n\t\t</a>\n\t);\n}\n","'use client';\nimport React, {type ReactNode, useRef} from 'react';\nimport {type AriaDialogProps, useDialog} from 'react-aria';\nimport {cx} from './cva.ts';\n\nexport type DialogProps = {\n\treadonly title?: ReactNode;\n\treadonly children: ReactNode;\n\treadonly className?: string;\n} & AriaDialogProps;\n\nexport function Dialog(props: DialogProps) {\n\tconst {title, children, className} = props;\n\n\tconst ref = useRef(null);\n\n\tconst {dialogProps, titleProps} = useDialog(props, ref);\n\n\treturn (\n\t\t<div\n\t\t\t{...dialogProps}\n\t\t\tref={ref}\n\t\t\tclassName={cx('outline-none text-stone-300', className)}\n\t\t>\n\t\t\t{title === undefined ? null : (\n\t\t\t\t<h3 {...titleProps} className='mb-2 text-2xl font-bold'>\n\t\t\t\t\t{title}\n\t\t\t\t</h3>\n\t\t\t)}\n\t\t\t{children}\n\t\t</div>\n\t);\n}\n","'use client';\nimport React, {type ReactNode, useState} from 'react';\n// @ts-expect-error bad typings\nimport ArrowDropDown from '@material-design-icons/svg/round/arrow_drop_down.svg';\n// @ts-expect-error bad typings\nimport ArrowDropUp from '@material-design-icons/svg/round/arrow_drop_up.svg';\nimport {AnimatePresence, motion} from 'framer-motion';\nimport {cx} from './cva.ts';\n\nexport type DropdownProps = BaseDropdownProps | StatefulDropDownProps;\n\nexport function Dropdown(props: DropdownProps) {\n\treturn 'isOpen' in props ? (\n\t\t<BaseDropdown {...props} />\n\t) : (\n\t\t<StatefulDropDown {...props} />\n\t);\n}\n\nexport type StatefulDropDownProps = Omit<\n\tBaseDropdownProps,\n\t'isOpen' | 'onToggle'\n> & {\n\treadonly isInitiallyOpen?: boolean;\n};\n\nexport function StatefulDropDown(props: StatefulDropDownProps) {\n\tconst {isInitiallyOpen = false} = props;\n\tconst [isOpen, setIsOpen] = useState(isInitiallyOpen);\n\treturn <BaseDropdown isOpen={isOpen} onToggle={setIsOpen} {...props} />;\n}\n\nexport type BaseDropdownProps = {\n\treadonly isOpen: boolean;\n\treadonly onToggle: (isOpen: boolean) => void;\n\treadonly label: ReactNode;\n\treadonly children: ReactNode;\n\treadonly className?: string;\n};\n\nexport function BaseDropdown(props: BaseDropdownProps) {\n\tconst {isOpen, onToggle, label, children, className} = props;\n\n\treturn (\n\t\t<div\n\t\t\tclassName={cx(\n\t\t\t\t'overflow-hidden rounded border border-stone-800',\n\t\t\t\tclassName,\n\t\t\t)}\n\t\t>\n\t\t\t<div\n\t\t\t\tclassName='flex cursor-pointer border-b border-stone-800 p-2 font-bold text-stone-50 transition-colors hover:bg-stone-900'\n\t\t\t\tonClick={() => {\n\t\t\t\t\tonToggle(!isOpen);\n\t\t\t\t}}\n\t\t\t>\n\t\t\t\t<div className='grow'>{label}</div>\n\t\t\t\t{isOpen ? (\n\t\t\t\t\t<ArrowDropUp className='fill-current' />\n\t\t\t\t) : (\n\t\t\t\t\t<ArrowDropDown className='fill-current' />\n\t\t\t\t)}\n\t\t\t</div>\n\t\t\t<AnimatePresence>\n\t\t\t\t{isOpen && (\n\t\t\t\t\t<motion.div\n\t\t\t\t\t\tlayout\n\t\t\t\t\t\tclassName='p-2 text-stone-300'\n\t\t\t\t\t\tinitial={{\n\t\t\t\t\t\t\theight: 0,\n\t\t\t\t\t\t}}\n\t\t\t\t\t\tanimate={{\n\t\t\t\t\t\t\theight: 'auto',\n\t\t\t\t\t\t}}\n\t\t\t\t\t\texit={{\n\t\t\t\t\t\t\theight: 0,\n\t\t\t\t\t\t}}\n\t\t\t\t\t>\n\t\t\t\t\t\t{children}\n\t\t\t\t\t</motion.div>\n\t\t\t\t)}\n\t\t\t</AnimatePresence>\n\t\t</div>\n\t);\n}\n","import React, {\n\ttype ChangeEvent,\n\ttype ComponentProps,\n\ttype ReactNode,\n\tuseRef,\n\tuseState,\n} from 'react';\nimport {type FileDropItem, mergeProps, useDrop, useFocusRing} from 'react-aria';\nimport {type FormValidationProps, useFormValidation} from '@react-aria/form';\nimport {useFormValidationState} from '@react-stately/form';\nimport {omit} from 'lodash';\nimport {cx} from './cva.ts';\n\nexport type FileDropZoneProps = {\n\treadonly className?: string;\n\treadonly name?: string;\n\treadonly label?: ReactNode;\n\treadonly acceptedMimeTypes?: string[];\n\treadonly error?: string;\n} & FormValidationProps<File | undefined> &\n\tOmit<ComponentProps<'input'>, 'type' | 'accept' | 'ref'>;\n\nconst imageMimeTypes = new Set<string>([\n\t'image/png',\n\t'image/jpg',\n\t'image/jpeg',\n\t'image/webp',\n]);\n\nexport function FileDropZone(props: FileDropZoneProps) {\n\tconst {label, className, acceptedMimeTypes, error} = props;\n\n\tconst [file, setFile] = useState<File>();\n\n\tconst state = useFormValidationState({\n\t\tvalidationBehavior: 'native',\n\t\t...props,\n\t\tvalue: file,\n\t});\n\n\tconst {commitValidation} = state;\n\n\tconst {isInvalid, validationErrors} = state.displayValidation;\n\n\tconst inputRef = useRef<HTMLInputElement>(null);\n\n\tuseFormValidation<File>(props, state, inputRef);\n\n\tconst ref = useRef<HTMLDivElement>(null);\n\n\tconst {isFocusVisible, focusProps} = useFocusRing();\n\n\tconst {dropProps, isDropTarget} = useDrop({\n\t\tref,\n\t\tonDrop(event) {\n\t\t\tconst item = event.items.find(item => item.kind === 'file') as\n\t\t\t\t| FileDropItem\n\t\t\t\t| undefined;\n\t\t\tif (item === undefined) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\t(async () => {\n\t\t\t\tconst file = await item.getFile();\n\t\t\t\tsetFile(file);\n\t\t\t\tcommitValidation();\n\t\t\t})();\n\t\t},\n\t});\n\n\tconst inputChangeHandler = (event: ChangeEvent<HTMLInputElement>) => {\n\t\tif (props.onChange) {\n\t\t\tprops.onChange(event);\n\t\t}\n\n\t\tif (event.target.files === null || event.target.files.length === 0) {\n\t\t\treturn;\n\t\t}\n\n\t\tsetFile(event.target.files[0]);\n\t\tcommitValidation();\n\t};\n\n\tconst dropZoneClickHandler = () => {\n\t\tconst input = inputRef.current;\n\t\tif (input !== null) {\n\t\t\tinput.click();\n\t\t}\n\t};\n\n\treturn (\n\t\t<div\n\t\t\t{...mergeProps(dropProps, focusProps)}\n\t\t\tref={ref}\n\t\t\trole='button'\n\t\t\ttabIndex={0}\n\t\t\tclassName={cx(\n\t\t\t\t'rounded border border-dashed border-stone-500 p-4 text-stone-500 hover:bg-stone-800 outline-none flex flex-col justify-center items-center text-center',\n\t\t\t\tisDropTarget && 'bg-stone-800',\n\t\t\t\tisFocusVisible && 'border-stone-50',\n\t\t\t\tclassName,\n\t\t\t)}\n\t\t\tonClick={dropZoneClickHandler}\n\t\t>\n\t\t\t<input\n\t\t\t\t{...omit(props, [\n\t\t\t\t\t'className',\n\t\t\t\t\t'acceptedMimeTypes',\n\t\t\t\t\t'label',\n\t\t\t\t\t'error',\n\t\t\t\t])}\n\t\t\t\tref={inputRef}\n\t\t\t\ttype='file'\n\t\t\t\tclassName='hidden'\n\t\t\t\taccept={acceptedMimeTypes?.join(',')}\n\t\t\t\tonChange={inputChangeHandler}\n\t\t\t/>\n\t\t\t{!isInvalid && file && imageMimeTypes.has(file.type) && (\n\t\t\t\t<img\n\t\t\t\t\tsrc={URL.createObjectURL(file)}\n\t\t\t\t\talt='Submitted image'\n\t\t\t\t\theight={128}\n\t\t\t\t\twidth={128}\n\t\t\t\t/>\n\t\t\t)}\n\t\t\t<div className='mt-2 text-stone-500'>\n\t\t\t\t{file ? file.name : label}\n\t\t\t</div>\n\n\t\t\t{(error ?? isInvalid) && (\n\t\t\t\t<div className='mt-2 text-red-400'>\n\t\t\t\t\t{error ?? validationErrors.join(' ')}\n\t\t\t\t</div>\n\t\t\t)}\n\t\t</div>\n\t);\n}\n","import React from 'react';\nimport Image, {type StaticImageData} from 'next/image';\nimport {cx} from 'geostats-ui';\n\nexport type SocialLinkProps = {\n\treadonly image: StaticImageData;\n\treadonly name: string;\n\treadonly href: string;\n\treadonly size?: number;\n\treadonly className?: string;\n};\nexport function SocialLink(props: SocialLinkProps) {\n\tconst {image, href, name, className, size = 24} = props;\n\treturn (\n\t\t<a\n\t\t\thref={href}\n\t\t\tclassName={cx('flex justify-center items-center', className)}\n\t\t\ttarget='_blank'\n\t\t\trel='noreferrer'\n\t\t>\n\t\t\t<Image src={image} alt={name} height={size} width={size} />\n\t\t</a>\n\t);\n}\n","import {defineConfig} from 'cva';\nimport {twMerge} from 'tailwind-merge';\n\nexport {type VariantProps} from 'cva';\n\nexport const {cva, compose, cx} = defineConfig({\n\thooks: {\n\t\tonComplete: className => twMerge(className),\n\t},\n});\n","import {type VariantProps} from 'cva';\nimport {cva} from '@/cva.ts';\n\nconst paperVariants = cva({\n\tbase: 'rounded border border-stone-800 bg-black/40 text-stone-300 backdrop-blur transition-all',\n\tvariants: {\n\t\thoverEffect: {\n\t\t\ttrue: 'duration-500 hover:scale-[101%] hover:border-stone-700 hover:glow-sm',\n\t\t\tfalse: '',\n\t\t},\n\t\tspacing: {\n\t\t\tnone: 'p-0',\n\t\t\txs: 'p-1',\n\t\t\tsm: 'p-2',\n\t\t\tmd: 'p-4',\n\t\t\tlg: 'p-8',\n\t\t\txl: 'p-16',\n\t\t},\n\t},\n\tdefaultVariants: {\n\t\tspacing: 'md',\n\t\thoverEffect: false,\n\t},\n});\n\nexport type PaperVariantProps = VariantProps<typeof paperVariants>;\n\nexport default paperVariants;\n","import React, {type ComponentProps} from 'react';\nimport {omit} from 'lodash';\nimport paperVariants, {\n\ttype PaperVariantProps,\n} from '@/paper/paper-variants.tsx';\n\nexport type PaperProps = ComponentProps<'div'> & PaperVariantProps;\n\nexport function Paper(props: PaperProps) {\n\treturn (\n\t\t<div\n\t\t\t{...omit(props, ['hoverEffect', 'spacing'])}\n\t\t\tclassName={paperVariants(props)}\n\t\t/>\n\t);\n}\n","import React, {useRef} from 'react';\nimport {\n\ttype AriaCheckboxProps,\n\tmergeProps,\n\tuseCheckbox,\n\tuseFocusRing,\n\tusePress,\n\tVisuallyHidden,\n} from 'react-aria';\nimport {useToggleState, type ToggleProps} from 'react-stately';\nimport {cx} from './cva.ts';\n\nexport type CheckboxProps = {\n\treadonly className?: string;\n} & AriaCheckboxProps &\n\tToggleProps;\n\nexport function Checkbox(props: CheckboxProps) {\n\tconst {children, className} = props;\n\tconst ref = useRef<HTMLInputElement>(null);\n\tconst state = useToggleState(props);\n\tconst {inputProps} = useCheckbox(props, state, ref);\n\tconst {focusProps} = useFocusRing();\n\tconst {pressProps} = usePress({isDisabled: props.isDisabled});\n\n\treturn (\n\t\t<label className={cx('flex gap-2 text-stone-300', className)}>\n\t\t\t<VisuallyHidden>\n\t\t\t\t<input {...mergeProps(inputProps, focusProps)} ref={ref} />\n\t\t\t</VisuallyHidden>\n\t\t\t<div\n\t\t\t\tclassName='size-6 cursor-pointer rounded border border-stone-700 p-1'\n\t\t\t\taria-hidden='true'\n\t\t\t>\n\t\t\t\t<svg\n\t\t\t\t\t{...pressProps}\n\t\t\t\t\tclassName='fill-none stroke-stone-50 stroke-2'\n\t\t\t\t\tviewBox='0 0 18 18'\n\t\t\t\t>\n\t\t\t\t\t<polyline\n\t\t\t\t\t\tclassName='transition-all duration-200'\n\t\t\t\t\t\tpoints='1 9 7 14 15 4'\n\t\t\t\t\t\tstrokeDasharray={24}\n\t\t\t\t\t\tstrokeDashoffset={state.isSelected ? 48 : 72}\n\t\t\t\t\t/>\n\t\t\t\t</svg>\n\t\t\t</div>\n\t\t\t{children}\n\t\t</label>\n\t);\n}\n","'use client';\nimport React, {useRef} from 'react';\nimport {type GridNode} from '@react-types/grid';\nimport {type TableState} from 'react-stately';\nimport {useTableCell, useTableSelectionCheckbox} from 'react-aria';\nimport {Checkbox} from '@/checkbox.tsx';\n\nexport type TableCheckboxCellProps<T> = {\n\treadonly cell: GridNode<T>;\n\treadonly state: TableState<T>;\n};\n\nexport function TableCheckboxCell<T>(props: TableCheckboxCellProps<T>) {\n\tconst {cell, state} = props;\n\tconst cellRef = useRef<HTMLTableCellElement>(null);\n\tconst {gridCellProps} = useTableCell({node: cell}, state, cellRef);\n\n\tconst {checkboxProps} = useTableSelectionCheckbox(\n\t\t{\n\t\t\tkey: cell.parentKey!,\n\t\t},\n\t\tstate,\n\t);\n\n\treturn (\n\t\t<td\n\t\t\t{...gridCellProps}\n\t\t\tref={cellRef}\n\t\t\tclassName='border-y border-stone-800 px-4'\n\t\t>\n\t\t\t<Checkbox {...checkboxProps} />\n\t\t</td>\n\t);\n}\n","import type {GridNode} from '@react-types/grid';\nimport type {TableState} from 'react-stately';\nimport React, {useRef} from 'react';\nimport {mergeProps, useFocusRing, useTableColumnHeader} from 'react-aria';\nimport {cx} from '@/cva.ts';\n\nexport type TableColumnHeaderProps<T> = {\n\treadonly column: GridNode<T>;\n\treadonly state: TableState<T>;\n};\n\nexport function TableColumnHeader<T>(props: TableColumnHeaderProps<T>) {\n\tconst {column, state} = props;\n\tconst headerRef = useRef<HTMLTableHeaderCellElement>(null);\n\n\tconst {columnHeaderProps} = useTableColumnHeader(\n\t\t{node: column},\n\t\tstate,\n\t\theaderRef,\n\t);\n\n\tconst {isFocusVisible, focusProps} = useFocusRing();\n\tconst arrowIcon =\n\t\tstate.sortDescriptor?.direction === 'ascending' ? '▲' : '▼';\n\n\treturn (\n\t\t<th\n\t\t\t{...mergeProps(columnHeaderProps, focusProps)}\n\t\t\tref={headerRef}\n\t\t\tcolSpan={column.colspan}\n\t\t\tclassName={cx(\n\t\t\t\t'p-4 outline-none cursor-default',\n\t\t\t\tisFocusVisible && 'shadow-stone-50',\n\t\t\t\t(column.colspan ?? 0) > 1 ? 'text-center' : 'text-left',\n\t\t\t)}\n\t\t>\n\t\t\t{column.rendered}\n\t\t\t{column.props.allowsSorting && (\n\t\t\t\t<span\n\t\t\t\t\taria-hidden='true'\n\t\t\t\t\tclassName={cx(\n\t\t\t\t\t\t'px-0 py-1 ',\n\t\t\t\t\t\tstate.sortDescriptor?.column === column.key\n\t\t\t\t\t\t\t? 'visible'\n\t\t\t\t\t\t\t: 'hidden',\n\t\t\t\t\t)}\n\t\t\t\t>\n\t\t\t\t\t{arrowIcon}\n\t\t\t\t</span>\n\t\t\t)}\n\t\t</th>\n\t);\n}\n","'use client';\nimport React, {type ReactNode, useRef} from 'react';\nimport {useTableHeaderRow} from 'react-aria';\nimport type {GridNode} from '@react-types/grid';\nimport type {TableState} from 'react-stately';\n\nexport type TableHeaderRowProps<T> = {\n\treadonly item: GridNode<T>;\n\treadonly state: TableState<T>;\n\treadonly children: ReactNode;\n};\n\nexport function TableHeaderRow<T>(props: TableHeaderRowProps<T>) {\n\tconst {item, state, children} = props;\n\n\tconst headerRef = useRef<HTMLTableRowElement>(null);\n\n\tconst {rowProps} = useTableHeaderRow({node: item}, state, headerRef);\n\n\treturn (\n\t\t<tr {...rowProps} ref={headerRef}>\n\t\t\t{children}\n\t\t</tr>\n\t);\n}\n","import React, {type ReactNode} from 'react';\nimport {useTableRowGroup} from 'react-aria';\nimport {cx} from '@/cva.ts';\n\nexport type TableRowGroupProps = {\n\treadonly type: keyof HTMLElementTagNameMap;\n\treadonly children: ReactNode;\n};\n\nexport function TableRowGroup(props: TableRowGroupProps) {\n\tconst {type: Element, children} = props;\n\n\tconst {rowGroupProps} = useTableRowGroup();\n\n\treturn (\n\t\t<Element\n\t\t\t{...rowGroupProps}\n\t\t\tclassName={cx(\n\t\t\t\tElement === 'thead' && 'border-b border-stone-700 bg-stone-900',\n\t\t\t)}\n\t\t>\n\t\t\t{children}\n\t\t</Element>\n\t);\n}\n","import React, {type ReactNode, useRef} from 'react';\nimport {type GridNode} from '@react-types/grid';\nimport {type TableState} from 'react-stately';\nimport {useTableRow} from 'react-aria';\nimport {cx} from '@/cva.ts';\n\nexport type TableRowProps<T> = {\n\treadonly item: GridNode<T>;\n\treadonly children: ReactNode;\n\treadonly state: TableState<T>;\n};\n\nexport function TableRow<T>(props: TableRowProps<T>) {\n\tconst {item, children, state} = props;\n\tconst rowRef = useRef<HTMLTableRowElement>(null);\n\tconst isSelected = state.selectionManager.isSelected(item.key);\n\n\tconst {rowProps} = useTableRow({node: item}, state, rowRef);\n\n\treturn (\n\t\t<tr\n\t\t\t{...rowProps}\n\t\t\tref={rowRef}\n\t\t\tclassName={cx(\n\t\t\t\t'outline-none cursor-default',\n\t\t\t\tisSelected && 'text-stone-50 bg-stone-900',\n\t\t\t)}\n\t\t>\n\t\t\t{children}\n\t\t</tr>\n\t);\n}\n","import React, {useRef} from 'react';\nimport {type GridNode} from '@react-types/grid';\nimport {type TableState} from 'react-stately';\nimport {\n\tuseTableColumnHeader,\n\tuseTableSelectAllCheckbox,\n\tVisuallyHidden,\n} from 'react-aria';\nimport {Checkbox} from '@/checkbox.tsx';\n\nexport type TableSelectAllCellProps<T> = {\n\treadonly column: GridNode<T>;\n\treadonly state: TableState<T>;\n};\n\nexport function TableSelectAllCell<T>(props: TableSelectAllCellProps<T>) {\n\tconst {column, state} = props;\n\tconst cellRef = useRef<HTMLTableHeaderCellElement>(null);\n\tconst {columnHeaderProps} = useTableColumnHeader(\n\t\t{node: column},\n\t\tstate,\n\t\tcellRef,\n\t);\n\tconst {checkboxProps} = useTableSelectAllCheckbox(state);\n\n\treturn (\n\t\t<th {...columnHeaderProps} ref={cellRef} className='px-4'>\n\t\t\t{state.selectionManager.selectionMode === 'single' ? (\n\t\t\t\t<VisuallyHidden>{checkboxProps['aria-label']}</VisuallyHidden>\n\t\t\t) : (\n\t\t\t\t<Checkbox {...checkboxProps} />\n\t\t\t)}\n\t\t</th>\n\t);\n}\n","import React, {useRef} from 'react';\nimport {type GridNode} from '@react-types/grid';\nimport {type TableState} from 'react-stately';\nimport {mergeProps, useFocusRing, useTableCell} from 'react-aria';\nimport {cx} from '@/cva.ts';\n\nexport type TableCellProps<T> = {\n\treadonly cell: GridNode<T>;\n\treadonly state: TableState<T>;\n};\n\nexport function TableCell<T>(props: TableCellProps<T>) {\n\tconst {cell, state} = props;\n\n\tconst cellRef = useRef<HTMLTableCellElement>(null);\n\n\tconst {gridCellProps} = useTableCell({node: cell}, state, cellRef);\n\n\tconst {isFocusVisible, focusProps} = useFocusRing();\n\n\treturn (\n\t\t<td\n\t\t\t{...mergeProps(gridCellProps, focusProps)}\n\t\t\tref={cellRef}\n\t\t\tclassName={cx(\n\t\t\t\t'p-4 outline-none border-y border-stone-800',\n\t\t\t\tisFocusVisible && 'shadow-stone-500',\n\t\t\t)}\n\t\t>\n\t\t\t{cell.rendered}\n\t\t</td>\n\t);\n}\n","import React, {useRef} from 'react';\nimport {type AriaTableProps, useTable} from 'react-aria';\nimport {type TableStateProps, useTableState} from 'react-stately';\nimport {TableRowGroup} from '@/table/table-row-group.tsx';\nimport {TableHeaderRow} from '@/table/table-header-row.tsx';\nimport {TableSelectAllCell} from '@/table/table-select-all-cell.tsx';\nimport {TableColumnHeader} from '@/table/table-column-header.tsx';\nimport {TableRow} from '@/table/table-row.tsx';\nimport {TableCheckboxCell} from '@/table/table-checkbox-cell.tsx';\nimport {TableCell} from '@/table/table-cell.tsx';\nimport {cx} from '@/cva.ts';\n\nexport type TableProps<T> = {\n\treadonly className?: string;\n} & AriaTableProps &\n\tTableStateProps<T>;\n\nexport function Table<T extends object>(props: TableProps<T>) {\n\tconst {className} = props;\n\n\tconst state = useTableState<T>(props);\n\n\tconst tableRef = useRef<HTMLTableElement>(null);\n\n\tconst {collection} = state;\n\n\tconst {gridProps} = useTable(props, state, tableRef);\n\n\treturn (\n\t\t<table\n\t\t\t{...gridProps}\n\t\t\tref={tableRef}\n\t\t\tclassName={cx('border-collapse', className)}\n\t\t>\n\t\t\t<TableRowGroup type='thead'>\n\t\t\t\t{collection.headerRows.map(headerRow => (\n\t\t\t\t\t<TableHeaderRow\n\t\t\t\t\t\tkey={headerRow.key}\n\t\t\t\t\t\titem={headerRow}\n\t\t\t\t\t\tstate={state}\n\t\t\t\t\t>\n\t\t\t\t\t\t{[...collection.getChildren!(headerRow.key)].map(\n\t\t\t\t\t\t\tcolumn =>\n\t\t\t\t\t\t\t\tcolumn.props.isSelectionCell ? (\n\t\t\t\t\t\t\t\t\t<TableSelectAllCell\n\t\t\t\t\t\t\t\t\t\tkey={column.key}\n\t\t\t\t\t\t\t\t\t\tcolumn={column}\n\t\t\t\t\t\t\t\t\t\tstate={state}\n\t\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t\t) : (\n\t\t\t\t\t\t\t\t\t<TableColumnHeader\n\t\t\t\t\t\t\t\t\t\tkey={column.key}\n\t\t\t\t\t\t\t\t\t\tcolumn={column}\n\t\t\t\t\t\t\t\t\t\tstate={state}\n\t\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t\t),\n\t\t\t\t\t\t)}\n\t\t\t\t\t</TableHeaderRow>\n\t\t\t\t))}\n\t\t\t</TableRowGroup>\n\t\t\t<TableRowGroup type='tbody'>\n\t\t\t\t{\n\t\t\t\t\t// The following is deprecated, but the body's children are not accesible via collection.getChildren\n\t\t\t\t\t[...collection.body.childNodes].map(row => (\n\t\t\t\t\t\t<TableRow key={row.key} item={row} state={state}>\n\t\t\t\t\t\t\t{[...collection.getChildren!(row.key)].map(cell =>\n\t\t\t\t\t\t\t\tcell.props.isSelectionCell ? (\n\t\t\t\t\t\t\t\t\t<TableCheckboxCell\n\t\t\t\t\t\t\t\t\t\tkey={cell.key}\n\t\t\t\t\t\t\t\t\t\tcell={cell}\n\t\t\t\t\t\t\t\t\t\tstate={state}\n\t\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t\t) : (\n\t\t\t\t\t\t\t\t\t<TableCell\n\t\t\t\t\t\t\t\t\t\tkey={cell.key}\n\t\t\t\t\t\t\t\t\t\tcell={cell}\n\t\t\t\t\t\t\t\t\t\tstate={state}\n\t\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t\t),\n\t\t\t\t\t\t\t)}\n\t\t\t\t\t\t</TableRow>\n\t\t\t\t\t))\n\t\t\t\t}\n\t\t\t</TableRowGroup>\n\t\t</table>\n\t);\n}\n","import {useEffect, useRef} from 'react';\nimport {type List} from 'immutable';\nimport type Fuse from 'fuse.js';\nimport {type IFuseOptions} from 'fuse.js';\n\n/**\n * Creates and initializes a Fuse instance lazily using the provided collection and options.\n *\n * @template T - The type of elements in the collection.\n *\n * @param {Array<T>} items - The collection to be searched.\n * @param {IFuseOptions<T>} [options] - The options to customize the search behavior.\n *\n * @returns {Fuse<T> | undefined} - The initialized Fuse instance, or undefined if the Fuse instance is not yet available.\n */\nexport function useFuse<T>(\n\titems: List<T>,\n\toptions?: IFuseOptions<T>,\n): Fuse<T> | undefined {\n\tconst fuseRef = useRef<Fuse<T>>();\n\n\tuseEffect(() => {\n\t\tvoid (async () => {\n\t\t\tconst fuse = await import('fuse.js');\n\t\t\tfuseRef.current = new fuse.default<T>(items.toArray(), options);\n\t\t})();\n\t\t// eslint-disable-next-line react-hooks/exhaustive-deps\n\t}, [items]);\n\treturn fuseRef.current;\n}\n","import {\n\ttype Key,\n\ttype ListData,\n\ttype ListOptions,\n\tuseListData,\n} from 'react-stately';\nimport {List, Set} from 'immutable';\nimport {useMemo} from 'react';\n\nexport type ImmutableListOptions<T> = Omit<ListOptions<T>, 'initialItems'> & {\n\treadonly initialItems?: Iterable<T>;\n};\n\nexport type ImmutableListData<T> = Omit<\n\tListData<T>,\n\t'items' | 'selectedKeys' | 'setSelectedKeys'\n> & {\n\treadonly items: List<T>;\n\treadonly selectedKeys: Set<Key> | 'all';\n\treadonly setSelectedKeys: (keys: Set<Key> | 'all') => void;\n};\n\nexport function useImmutableListData<T>(\n\toptions: ImmutableListOptions<T>,\n): ImmutableListData<T> {\n\tconst listData = useListData<T>({\n\t\t...options,\n\t\tinitialItems:\n\t\t\toptions.initialItems === undefined\n\t\t\t\t? undefined\n\t\t\t\t: [...options.initialItems],\n\t});\n\n\tconst items = useMemo(() => List(listData.items), [listData.items]);\n\n\tconst selectedKeys = useMemo(() => {\n\t\tconst {selectedKeys} = listData;\n\t\tif (selectedKeys === 'all') {\n\t\t\treturn 'all';\n\t\t}\n\n\t\treturn Set(selectedKeys);\n\t}, [listData]);\n\n\treturn {\n\t\t...listData,\n\t\titems,\n\t\tselectedKeys,\n\t\tsetSelectedKeys(keys: 'all' | Set<Key>) {\n\t\t\tif (keys === 'all') {\n\t\t\t\tlistData.setSelectedKeys('all');\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\t// @ts-expect-error should not need the string conversion symbol\n\t\t\tlistData.setSelectedKeys(keys);\n\t\t},\n\t};\n}\n","import {useMemo} from 'react';\nimport {type Collection, OrderedSet, Seq, type Set} from 'immutable';\nimport {type Key} from 'react-stately';\nimport {useFuse} from '@/hooks/use-fuse.ts';\nimport {\n\tuseImmutableListData,\n\ttype ImmutableListData,\n\ttype ImmutableListOptions,\n} from './use-immutable-list-data';\n\nexport type SearchableListOptions<T> = {\n\treadonly searchKeys?: Collection.Indexed<string>;\n} & ImmutableListOptions<T>;\n\nexport type SearchableListData<T> = {\n\treadonly filteredKeys: Set<Key>;\n} & ImmutableListData<T>;\n\nexport default function useSearchableListData<\n\tT extends Record<string, unknown>,\n>(options: SearchableListOptions<T>): SearchableListData<T> {\n\tconst {\n\t\tsearchKeys,\n\t\tgetKey = (value: T) => {\n\t\t\tif (Object.hasOwn(value, 'id')) {\n\t\t\t\treturn value.id as Key;\n\t\t\t}\n\n\t\t\tif (Object.hasOwn(value, 'key')) {\n\t\t\t\treturn value.key as Key;\n\t\t\t}\n\n\t\t\tthrow new Error(\n\t\t\t\t'searchable list data item does not have an id or key attribute, and getKey is undefined',\n\t\t\t);\n\t\t},\n\t} = options;\n\n\tconst listData = useImmutableListData(options);\n\n\tconst {items, selectedKeys, filterText} = listData;\n\n\tconst fuse = useFuse(items, {\n\t\tkeys: searchKeys?.toArray(),\n\t});\n\n\tconst filteredKeys = useMemo(() => {\n\t\tif (selectedKeys === 'all') {\n\t\t\treturn OrderedSet<Key>();\n\t\t}\n\n\t\tif (fuse === undefined || filterText === '') {\n\t\t\treturn Seq(items)\n\t\t\t\t.map(item => getKey(item))\n\t\t\t\t.toOrderedSet()\n\t\t\t\t.subtract(selectedKeys);\n\t\t}\n\n\t\tconst results = OrderedSet(\n\t\t\tfuse.search(filterText).map(result => getKey(result.item)),\n\t\t);\n\n\t\treturn results.subtract(selectedKeys);\n\t}, [selectedKeys, fuse, filterText, items, getKey]);\n\n\treturn {\n\t\t...listData,\n\t\tfilteredKeys,\n\t};\n}\n","import dynamic from 'next/dynamic';\nimport {ComponentType} from 'react';\n\nexport const GeostatsTileLayer: ComponentType = dynamic(\n\t() => import('./geostats-tile-layer.tsx'),\n\t{\n\t\tssr: false,\n\t},\n);\n","'use client';\nimport {createContext, useContext} from 'react';\n\nexport const modalContext = createContext<(() => void) | null>(null);\n\nexport function useCloseModal(): () => void {\n\tconst closeModal = useContext(modalContext);\n\n\tif (!closeModal) {\n\t\tthrow new Error('useCloseModal not used within a modal');\n\t}\n\n\treturn closeModal;\n}\n","import React, {type ReactNode} from 'react';\nimport {type AriaModalOverlayProps, Overlay, useModalOverlay} from 'react-aria';\nimport {type OverlayTriggerState} from 'react-stately';\n\nexport type ModalProps = {\n\treadonly state: OverlayTriggerState;\n\treadonly children: ReactNode;\n} & AriaModalOverlayProps;\n\nexport function Modal(props: ModalProps) {\n\tconst {state, children} = props;\n\tconst ref = React.useRef<HTMLDivElement>(null);\n\tconst {modalProps, underlayProps} = useModalOverlay(props, state, ref);\n\n\treturn (\n\t\t<Overlay>\n\t\t\t<div\n\t\t\t\t{...underlayProps}\n\t\t\t\tclassName='fixed inset-0 z-50 flex items-center justify-center bg-black/50'\n\t\t\t>\n\t\t\t\t<div\n\t\t\t\t\t{...modalProps}\n\t\t\t\t\tref={ref}\n\t\t\t\t\tclassName='rounded border border-stone-800 bg-stone-950 p-4'\n\t\t\t\t>\n\t\t\t\t\t{children}\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t</Overlay>\n\t);\n}\n","import {type VariantProps} from 'cva';\nimport {cva} from '@/cva.ts';\n\nexport const buttonVariants = cva({\n\tbase: 'flex size-fit items-center gap-1 truncate rounded fill-current font-bold transition-colors disabled:cursor-default',\n\tvariants: {\n\t\tsize: {\n\t\t\txs: 'text-xs',\n\t\t\tsm: 'p-1 text-sm',\n\t\t\tmd: 'p-2',\n\t\t\tlg: 'p-3 text-lg',\n\t\t\txl: 'p-4 text-xl',\n\t\t},\n\t\tvariant: {\n\t\t\tprimary:\n\t\t\t\t'bg-stone-100 text-stone-950 hover:bg-stone-300 hover:text-stone-800 disabled:bg-stone-500 disabled:text-stone-800',\n\t\t\tsecondary:\n\t\t\t\t'border border-stone-700 bg-stone-900  text-stone-200 hover:bg-stone-800 disabled:bg-stone-700 disabled:text-stone-800 ',\n\t\t\toutlined:\n\t\t\t\t'border border-stone-700 text-stone-300 hover:bg-stone-900 disabled:border-stone-800 disabled:bg-transparent disabled:text-stone-600',\n\t\t\tdestructive:\n\t\t\t\t'border border-red-600 bg-red-600 text-stone-50 hover:bg-red-500 disabled:border-stone-700 disabled:bg-stone-700 disabled:text-stone-800',\n\t\t\ttext: 'text-stone-300',\n\t\t},\n\t},\n\tdefaultVariants: {\n\t\tvariant: 'primary',\n\t\tsize: 'md',\n\t},\n});\n\nexport type ButtonVariantProps = VariantProps<typeof buttonVariants>;\n","'use client';\nimport React, {type ReactNode, type RefObject} from 'react';\nimport {type AriaButtonOptions, useButton, useObjectRef} from 'react-aria';\nimport {type VariantProps} from '@/cva.ts';\nimport {buttonVariants} from '@/button/button-variants.tsx';\n\nexport type ButtonProps = {\n\treadonly children?: ReactNode;\n\treadonly className?: string;\n\treadonly buttonRef?: RefObject<HTMLButtonElement>;\n} & AriaButtonOptions<'button'> &\n\tVariantProps<typeof buttonVariants>;\n\nexport function Button(props: ButtonProps) {\n\tconst {children, buttonRef} = props;\n\tconst ref = useObjectRef<HTMLButtonElement>(buttonRef);\n\tconst {buttonProps} = useButton(\n\t\t{\n\t\t\t...props,\n\t\t\t// Workaround for react/react-aria #1513\n\t\t\tonPress(event) {\n\t\t\t\tif (\n\t\t\t\t\tevent.pointerType === 'mouse' ||\n\t\t\t\t\tevent.pointerType === 'keyboard'\n\t\t\t\t) {\n\t\t\t\t\tprops.onPress?.(event);\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tsetTimeout(() => {\n\t\t\t\t\tprops.onPress?.(event);\n\t\t\t\t}, 1);\n\t\t\t},\n\t\t},\n\t\tref,\n\t);\n\treturn (\n\t\t<button\n\t\t\t{...buttonProps}\n\t\t\tref={buttonRef}\n\t\t\tclassName={buttonVariants(props)}\n\t\t>\n\t\t\t{children}\n\t\t</button>\n\t);\n}\n","'use client';\nimport React, {type ReactElement, type ReactNode} from 'react';\nimport {type OverlayTriggerProps, useOverlayTriggerState} from 'react-stately';\nimport {useOverlayTrigger} from 'react-aria';\nimport {Modal, type ModalProps} from '@/modal/modal.tsx';\nimport {Button} from '@/button/button.tsx';\nimport {type ButtonVariantProps} from '@/button/button-variants.tsx';\nimport {modalContext} from '@/modal/modal-context.ts';\n\nexport type ModalTriggerProps = {\n\treadonly className?: string;\n\treadonly children: ReactElement;\n\treadonly label: ReactNode;\n} & OverlayTriggerProps &\n\tOmit<ModalProps, 'state' | 'children'> &\n\tButtonVariantProps;\n\nexport function ModalTrigger(props: ModalTriggerProps) {\n\tconst {children, label, className} = props;\n\tconst state = useOverlayTriggerState(props);\n\tconst {triggerProps, overlayProps} = useOverlayTrigger(\n\t\t{type: 'dialog'},\n\t\tstate,\n\t);\n\n\treturn (\n\t\t<>\n\t\t\t<Button {...props} {...triggerProps} className={className}>\n\t\t\t\t{label}\n\t\t\t</Button>\n\t\t\t{state.isOpen && (\n\t\t\t\t<Modal state={state}>\n\t\t\t\t\t{React.cloneElement(\n\t\t\t\t\t\t<modalContext.Provider value={state.close}>\n\t\t\t\t\t\t\t{children}\n\t\t\t\t\t\t</modalContext.Provider>,\n\t\t\t\t\t\toverlayProps,\n\t\t\t\t\t)}\n\t\t\t\t</Modal>\n\t\t\t)}\n\t\t</>\n\t);\n}\n","'use client';\n\nimport React from 'react';\nimport {\n\tSwitchProps as AriaSwitchProps,\n\tSwitch as AriaSwitch,\n} from 'react-aria-components';\nimport {twMerge} from 'tailwind-merge';\n\nexport type SwitchProps = {\n\treadonly className?: string;\n\treadonly label?: string;\n} & AriaSwitchProps;\n\nexport function Switch(props: SwitchProps) {\n\tconst {label, className, ...rest} = props;\n\n\treturn (\n\t\t<AriaSwitch\n\t\t\t{...rest}\n\t\t\tclassName={twMerge(\n\t\t\t\t'group flex items-center gap-1 text-stone-300 text-sm',\n\t\t\t\tclassName,\n\t\t\t)}\n\t\t>\n\t\t\t<div className='me-2 w-[calc(theme(spacing.8)+4px)] rounded-full border border-stone-300 p-px transition-colors group-data-[selected=true]:border-stone-50 group-data-[selected=true]:bg-neutral-50'>\n\t\t\t\t<div className='size-4 rounded-full bg-stone-100 transition-all group-data-[selected=true]:translate-x-full group-data-[selected=true]:bg-stone-900' />\n\t\t\t</div>\n\t\t\t{label}\n\t\t</AriaSwitch>\n\t);\n}\n","import React, {type RefObject, type ReactNode} from 'react';\nimport {type AriaTextFieldProps, useTextField, useObjectRef} from 'react-aria';\nimport {cx} from './cva.ts';\n\nexport type TextFieldProps = {\n\treadonly className?: string;\n\treadonly icon?: ReactNode;\n\treadonly inputRef?: RefObject<HTMLInputElement>;\n} & AriaTextFieldProps;\n\nexport function TextField(props: TextFieldProps) {\n\tconst {label, isDisabled, className, description, icon, isRequired} = props;\n\tconst inputRef = useObjectRef(props.inputRef);\n\tconst {\n\t\tlabelProps,\n\t\tinputProps,\n\t\tdescriptionProps,\n\t\terrorMessageProps,\n\t\tisInvalid,\n\t\tvalidationErrors,\n\t} = useTextField(\n\t\t{\n\t\t\tvalidationBehavior: 'native',\n\t\t\t...props,\n\t\t},\n\t\tinputRef,\n\t);\n\n\treturn (\n\t\t<div data-disabled={isDisabled} className={cx('group', className)}>\n\t\t\t{label && (\n\t\t\t\t<label\n\t\t\t\t\t{...labelProps}\n\t\t\t\t\tclassName={cx(\n\t\t\t\t\t\t'text-stone-400 text-sm block mb-1 group-focus-within:text-stone-50 group-data-[disabled=true]:text-stone-500 transition-colors',\n\t\t\t\t\t\tisRequired && 'after:content-[\"*\"] after:ml-0.5',\n\t\t\t\t\t)}\n\t\t\t\t>\n\t\t\t\t\t{label}\n\t\t\t\t</label>\n\t\t\t)}\n\n\t\t\t<div className='flex items-center gap-2 rounded border border-stone-700 px-2 shadow-stone-800 transition-all group-focus-within:border-stone-50 group-focus-within:glow-sm group-data-[disabled=true]:border-stone-800'>\n\t\t\t\t{icon}\n\t\t\t\t<input\n\t\t\t\t\t{...inputProps}\n\t\t\t\t\tref={inputRef}\n\t\t\t\t\tclassName='min-w-0 grow bg-transparent py-2 text-stone-100 outline-none placeholder:text-stone-500 disabled:cursor-not-allowed disabled:text-stone-600'\n\t\t\t\t/>\n\t\t\t</div>\n\t\t\t{description === undefined ? null : (\n\t\t\t\t<div {...descriptionProps}>{description}</div>\n\t\t\t)}\n\t\t\t{isInvalid && (\n\t\t\t\t<div\n\t\t\t\t\t{...errorMessageProps}\n\t\t\t\t\tclassName='mt-1 text-xs text-red-400'\n\t\t\t\t>\n\t\t\t\t\t{validationErrors.join(' ')}\n\t\t\t\t</div>\n\t\t\t)}\n\t\t</div>\n\t);\n}\n","import React, {useRef} from 'react';\nimport {type AriaSearchFieldProps, useSearchField} from 'react-aria';\nimport {\n\ttype SearchFieldProps as SearchFieldStateProps,\n\tuseSearchFieldState,\n} from 'react-stately';\n// @ts-expect-error bad typings\nimport Search from '@material-design-icons/svg/round/search.svg';\n// @ts-expect-error bad typings\nimport Close from '@material-design-icons/svg/round/close.svg';\nimport {Button} from './button/button.tsx';\nimport {cx} from './cva.ts';\n\nexport type SearchFieldProps = {\n\treadonly className: string;\n} & AriaSearchFieldProps &\n\tSearchFieldStateProps;\n\nexport function SearchField(props: SearchFieldProps) {\n\tconst {label, className} = props;\n\tconst state = useSearchFieldState(props);\n\tconst inputRef = useRef<HTMLInputElement>(null);\n\tconst {labelProps, inputProps, clearButtonProps} = useSearchField(\n\t\tprops,\n\t\tstate,\n\t\tinputRef,\n\t);\n\n\treturn (\n\t\t<div className={cx('group', className)}>\n\t\t\t<label\n\t\t\t\t{...labelProps}\n\t\t\t\tclassName='text-stone-300 group-focus-within:text-stone-50'\n\t\t\t>\n\t\t\t\t{label}\n\t\t\t</label>\n\t\t\t<div className='flex items-center gap-1 rounded border border-stone-700 px-1 group-focus-within:border-stone-50'>\n\t\t\t\t<Search className='fill-stone-500 group-focus-within:fill-stone-50' />\n\t\t\t\t<input\n\t\t\t\t\t{...inputProps}\n\t\t\t\t\tref={inputRef}\n\t\t\t\t\tclassName='grow bg-transparent py-1 text-stone-200 outline-none'\n\t\t\t\t/>\n\t\t\t\t{state.value === '' ? null : (\n\t\t\t\t\t<Button {...clearButtonProps} variant='text'>\n\t\t\t\t\t\t<Close />\n\t\t\t\t\t</Button>\n\t\t\t\t)}\n\t\t\t</div>\n\t\t</div>\n\t);\n}\n","'use client';\nimport React, {useRef, type RefObject} from 'react';\nimport {\n\ttype AriaListBoxProps,\n\tmergeProps,\n\tuseFocusRing,\n\tuseListBox,\n\tuseListBoxSection,\n\tuseOption,\n} from 'react-aria';\nimport {type Node} from '@react-types/shared';\nimport {type ListProps, type ListState, useListState} from 'react-stately';\nimport {twMerge} from 'tailwind-merge';\nimport {cx} from './cva.ts';\n\nexport type ListBoxProps<T extends Record<string, unknown>> =\n\t| StatefulListBoxProps<T>\n\t| BaseListBoxProps<T>;\n\nexport function ListBox<T extends Record<string, unknown>>(\n\tprops: ListBoxProps<T>,\n) {\n\treturn 'state' in props ? (\n\t\t<BaseListBox {...props} />\n\t) : (\n\t\t<StatefulListBox {...props} />\n\t);\n}\n\ntype StatefulListBoxProps<T extends Record<string, unknown>> = ListProps<T> &\n\tOmit<BaseListBoxProps<T>, 'state'>;\n\nfunction StatefulListBox<T extends Record<string, unknown>>(\n\tprops: StatefulListBoxProps<T>,\n) {\n\tconst state = useListState<T>(props);\n\n\treturn <BaseListBox {...props} state={state} />;\n}\n\nexport type BaseListBoxProps<T extends Record<string, unknown>> = {\n\treadonly className?: string;\n\treadonly listBoxRef?: RefObject<HTMLUListElement>;\n\treadonly state: ListState<T>;\n} & AriaListBoxProps<T>;\n\nexport function BaseListBox<T extends Record<string, unknown>>(\n\tprops: BaseListBoxProps<T>,\n) {\n\tconst {label, state, className} = props;\n\n\tconst listBoxRef = useRef<HTMLUListElement>(null);\n\tconst {listBoxProps, labelProps} = useListBox<T>(props, state, listBoxRef);\n\n\treturn (\n\t\t<>\n\t\t\t{label ? (\n\t\t\t\t<label\n\t\t\t\t\t{...labelProps}\n\t\t\t\t\tclassName='mb-2 block px-2 text-xl text-stone-200'\n\t\t\t\t>\n\t\t\t\t\t{label}\n\t\t\t\t</label>\n\t\t\t) : null}\n\n\t\t\t<ul\n\t\t\t\t{...listBoxProps}\n\t\t\t\tref={listBoxRef}\n\t\t\t\tclassName={twMerge(\n\t\t\t\t\t'rounded overflow-y-auto scroll-smooth scrollbar-track-transparent scrollbar-thumb-stone-50 scrollbar-thin scrollbar-thumb-rounded',\n\t\t\t\t\tclassName,\n\t\t\t\t)}\n\t\t\t>\n\t\t\t\t{[...state.collection].map(item =>\n\t\t\t\t\titem.type === 'section' ? (\n\t\t\t\t\t\t<ListBoxSection\n\t\t\t\t\t\t\tkey={item.key}\n\t\t\t\t\t\t\tsection={item}\n\t\t\t\t\t\t\tstate={state}\n\t\t\t\t\t\t/>\n\t\t\t\t\t) : (\n\t\t\t\t\t\t<Option key={item.key} item={item} state={state} />\n\t\t\t\t\t),\n\t\t\t\t)}\n\t\t\t</ul>\n\t\t</>\n\t);\n}\n\nexport type ListBoxSectionProps<T> = {\n\treadonly section: Node<T>;\n\treadonly state: ListState<T>;\n};\n\nfunction ListBoxSection<T extends Record<string, unknown>>(\n\tprops: ListBoxSectionProps<T>,\n) {\n\tconst {section, state} = props;\n\n\tconst {itemProps, headingProps, groupProps} = useListBoxSection({\n\t\theading: section.rendered,\n\t\t'aria-label': section['aria-label'],\n\t});\n\t// If the section is not the first, add a separator element to provide visual separation.\n\t// The heading is rendered inside an <li> element, which contains\n\t// a <ul> with the child items.\n\treturn (\n\t\t<li {...itemProps} className='p-2'>\n\t\t\t{section.rendered && (\n\t\t\t\t<div\n\t\t\t\t\t{...headingProps}\n\t\t\t\t\tclassName={cx(\n\t\t\t\t\t\t'font-semibold py-2 text-sm text-stone-200 top-0',\n\t\t\t\t\t\tsection.key !== state.collection.getFirstKey() &&\n\t\t\t\t\t\t\t'mt-2',\n\t\t\t\t\t)}\n\t\t\t\t>\n\t\t\t\t\t{section.rendered}\n\t\t\t\t</div>\n\t\t\t)}\n\t\t\t<ul {...groupProps}>\n\t\t\t\t{[...state.collection.getChildren!(section.key)].map(node => (\n\t\t\t\t\t<Option key={node.key} item={node} state={state} />\n\t\t\t\t))}\n\t\t\t</ul>\n\t\t</li>\n\t);\n}\n\nexport type OptionProps<T extends Record<string, unknown>> = {\n\treadonly item: Node<T>;\n\treadonly state: ListState<T>;\n};\n\nfunction Option<T extends Record<string, unknown>>(props: OptionProps<T>) {\n\tconst {item, state} = props;\n\n\t// Get props for the option element\n\tconst ref = React.useRef(null);\n\tconst {isSelected, optionProps, isFocused, allowsSelection} = useOption(\n\t\t{key: item.key},\n\t\tstate,\n\t\tref,\n\t);\n\n\t// Determine whether we should show a keyboard\n\t// focus ring for accessibility\n\tconst {isFocusVisible, focusProps} = useFocusRing();\n\n\treturn (\n\t\t<li\n\t\t\t{...mergeProps(optionProps, focusProps)}\n\t\t\tref={ref}\n\t\t\tclassName={cx(\n\t\t\t\t'text-stone-300 p-2 border rounded border-transparent outline-none cursor-pointer data-[focus-visible=true]:border-stone-50',\n\t\t\t\tisSelected && 'bg-stone-50 text-stone-800',\n\t\t\t\tallowsSelection && !isSelected && 'hover:bg-stone-800',\n\t\t\t\tallowsSelection && isFocused && !isSelected && 'bg-stone-900',\n\t\t\t)}\n\t\t\tdata-focus-visible={isFocusVisible}\n\t\t>\n\t\t\t{item.rendered}\n\t\t</li>\n\t);\n}\n","import React, {type ForwardedRef, forwardRef} from 'react';\nimport {\n\ttype AriaPopoverProps,\n\tDismissButton,\n\tOverlay,\n\tusePopover,\n\tuseObjectRef,\n} from 'react-aria';\nimport type {OverlayTriggerState} from 'react-stately';\n\ntype PopoverProps = {\n\treadonly children: React.ReactNode;\n\treadonly state: OverlayTriggerState;\n} & Omit<AriaPopoverProps, 'popoverRef'>;\n\nconst Popover = forwardRef(function Popover(\n\tprops: PopoverProps,\n\tref: ForwardedRef<HTMLDivElement>,\n) {\n\tconst {children, state, offset = 8} = props;\n\n\tconst popoverRef = useObjectRef(ref);\n\n\tconst {popoverProps, underlayProps, arrowProps, placement} = usePopover(\n\t\t{\n\t\t\t...props,\n\t\t\toffset,\n\t\t\tpopoverRef,\n\t\t},\n\t\tstate,\n\t);\n\n\t// Const combinedOverlayStyle = {\n\t// \t...popoverProps.style,\n\t// \toverflow: 'visible',\n\t// };\n\t// style={combinedOverlayStyle}\n\n\treturn (\n\t\t<Overlay>\n\t\t\t<div {...underlayProps} className='fixed inset-0' />\n\t\t\t<div\n\t\t\t\t{...popoverProps}\n\t\t\t\tref={popoverRef}\n\t\t\t\tclassName='scroll-smooth rounded border border-stone-500 bg-stone-900 scrollbar-thin scrollbar-track-transparent scrollbar-thumb-stone-50 scrollbar-thumb-rounded'\n\t\t\t>\n\t\t\t\t<svg\n\t\t\t\t\t{...arrowProps}\n\t\t\t\t\tclassName='absolute size-4 fill-stone-900 stroke-stone-500 stroke-[0.5px] data-[placement=bottom]:bottom-full\n\t\t\t\t\t data-[placement=left]:left-full\n\t\t\t\t\t data-[placement=right]:right-full data-[placement=top]:top-full data-[placement=bottom]:-translate-x-1/2\n\t\t\t\t\t data-[placement=bottom]:rotate-180 data-[placement=left]:-rotate-90\n\t\t\t\t\t data-[placement=right]:rotate-90'\n\t\t\t\t\tdata-placement={placement}\n\t\t\t\t\tviewBox='0 0 12 12'\n\t\t\t\t>\n\t\t\t\t\t<path d='M0 0 L6 6 L12 0' />\n\t\t\t\t</svg>\n\t\t\t\t<DismissButton onDismiss={state.close} />\n\t\t\t\t{children}\n\t\t\t\t<DismissButton onDismiss={state.close} />\n\t\t\t</div>\n\t\t</Overlay>\n\t);\n});\n\nexport {Popover};\n","import React, {type ReactNode, RefObject} from 'react';\nimport {useSelectState, type SelectStateOptions} from 'react-stately';\nimport {\n\tuseSelect,\n\ttype AriaSelectProps,\n\tHiddenSelect,\n\ttype Placement,\n\tuseObjectRef,\n} from 'react-aria';\n// @ts-expect-error bad typings\nimport ArrowDropDown from '@material-design-icons/svg/round/arrow_drop_down.svg';\nimport {Button} from './button/button.tsx';\nimport {Popover} from './popover.tsx';\nimport {ListBox} from './list-box.tsx';\nimport {cx} from './cva.ts';\n\nexport type SelectProps<T extends Record<string, unknown>> = {\n\treadonly className?: string;\n\treadonly placeholder?: ReactNode;\n\treadonly popoverPlacement?: Placement;\n\treadonly selectRef?: RefObject<HTMLButtonElement>;\n} & AriaSelectProps<T> &\n\tSelectStateOptions<T>;\n\nexport function Select<T extends Record<string, unknown>>(\n\tprops: SelectProps<T>,\n) {\n\tconst {\n\t\tclassName,\n\t\tlabel,\n\t\tisDisabled,\n\t\tname,\n\t\tplaceholder,\n\t\tisRequired,\n\t\tselectRef,\n\t\tpopoverPlacement = 'bottom start',\n\t} = props;\n\tconst state = useSelectState({\n\t\tvalidationBehavior: 'native',\n\t\t...props,\n\t});\n\tconst {selectedItem, isFocused, isOpen} = state;\n\n\tconst triggerRef = useObjectRef(selectRef);\n\n\tconst {\n\t\tlabelProps,\n\t\ttriggerProps,\n\t\tvalueProps,\n\t\tmenuProps,\n\t\tisInvalid,\n\t\tvalidationErrors,\n\t\terrorMessageProps,\n\t} = useSelect(\n\t\t{\n\t\t\tvalidationBehavior: 'native',\n\t\t\t...props,\n\t\t},\n\t\tstate,\n\t\ttriggerRef,\n\t);\n\n\treturn (\n\t\t<div className={cx('w-fit group', className)}>\n\t\t\t{label && (\n\t\t\t\t<div\n\t\t\t\t\t{...labelProps}\n\t\t\t\t\tdata-disabled={isDisabled}\n\t\t\t\t\tclassName={cx(\n\t\t\t\t\t\t'text-stone-400 text-sm mb-1 data-[disabled=true]:text-stone-500 transition-color',\n\t\t\t\t\t\t(isFocused || isOpen) && 'text-stone-50',\n\t\t\t\t\t\tisRequired && 'after:content-[\"*\"] after:ms-0.5',\n\t\t\t\t\t)}\n\t\t\t\t>\n\t\t\t\t\t{label}\n\t\t\t\t</div>\n\t\t\t)}\n\t\t\t<HiddenSelect\n\t\t\t\tisDisabled={isDisabled}\n\t\t\t\tstate={state}\n\t\t\t\ttriggerRef={triggerRef}\n\t\t\t\tlabel={label}\n\t\t\t\tname={name}\n\t\t\t/>\n\t\t\t<Button\n\t\t\t\t{...triggerProps}\n\t\t\t\tbuttonRef={triggerRef}\n\t\t\t\tvariant='outlined'\n\t\t\t\tisDisabled={isDisabled}\n\t\t\t\tclassName={cx(\n\t\t\t\t\t'w-full flex group-focus-within:glow',\n\t\t\t\t\tisOpen && 'glow-sm shadow-stone-800 border-stone-50',\n\t\t\t\t)}\n\t\t\t>\n\t\t\t\t<span {...valueProps} className='grow text-left'>\n\t\t\t\t\t{selectedItem\n\t\t\t\t\t\t? selectedItem.rendered\n\t\t\t\t\t\t: (placeholder ?? 'Selecciona una opción')}\n\t\t\t\t</span>\n\t\t\t\t<ArrowDropDown aria-hidden='true' className='fill-current' />\n\t\t\t</Button>\n\t\t\t{isOpen && (\n\t\t\t\t<Popover\n\t\t\t\t\tstate={state}\n\t\t\t\t\ttriggerRef={triggerRef}\n\t\t\t\t\tplacement={popoverPlacement}\n\t\t\t\t>\n\t\t\t\t\t{/** @ts-expect-error children not necessary **/}\n\t\t\t\t\t<ListBox\n\t\t\t\t\t\t{...menuProps}\n\t\t\t\t\t\tstate={state}\n\t\t\t\t\t\tclassName='max-h-96'\n\t\t\t\t\t/>\n\t\t\t\t</Popover>\n\t\t\t)}\n\t\t\t{isInvalid && (\n\t\t\t\t<div\n\t\t\t\t\t{...errorMessageProps}\n\t\t\t\t\tclassName='mt-1 text-xs text-red-400'\n\t\t\t\t>\n\t\t\t\t\t{validationErrors.join(' ')}\n\t\t\t\t</div>\n\t\t\t)}\n\t\t</div>\n\t);\n}\n","'use client';\nimport React from 'react';\nimport {\n\tuseSeparator,\n\ttype SeparatorProps as AriaSeparatorProps,\n} from 'react-aria';\nimport {cx} from './cva.ts';\n\nexport type SeparatorProps = {\n\treadonly className?: string;\n} & AriaSeparatorProps;\n\nexport function Separator(props: SeparatorProps) {\n\tconst {className, orientation = 'horizontal'} = props;\n\tconst {separatorProps} = useSeparator(props);\n\n\treturn (\n\t\t<div\n\t\t\t{...separatorProps}\n\t\t\tclassName={cx(\n\t\t\t\t'bg-stone-800',\n\t\t\t\torientation === 'horizontal' && 'h-[1px] w-full my-8',\n\t\t\t\torientation === 'vertical' && 'w-[1px] h-full mx-8',\n\t\t\t\tclassName,\n\t\t\t)}\n\t\t/>\n\t);\n}\n","'use client';\n\nimport React, {type ReactNode, useRef} from 'react';\nimport {type AriaModalOverlayProps, Overlay, useModalOverlay} from 'react-aria';\nimport {type OverlayTriggerState} from 'react-stately';\nimport {motion} from 'framer-motion';\n\nexport type SidebarProps = {\n\treadonly state: OverlayTriggerState;\n\treadonly children: ReactNode;\n} & AriaModalOverlayProps;\n\nexport function Sidebar(props: SidebarProps) {\n\tconst {state, children} = props;\n\n\tconst ref = useRef<HTMLDivElement>(null);\n\n\tconst {modalProps, underlayProps} = useModalOverlay(props, state, ref);\n\n\t// High z-index required to overlay over Leaflet maps\n\treturn (\n\t\t<Overlay>\n\t\t\t{/** @ts-expect-error react-aria doesn't use animation props **/}\n\t\t\t<motion.div\n\t\t\t\tclassName='fixed inset-0 z-[1200] flex flex-row-reverse'\n\t\t\t\tanimate={{\n\t\t\t\t\tbackground: 'rgba(0,0,0,0.5)',\n\t\t\t\t}}\n\t\t\t\tinitial={{\n\t\t\t\t\tbackground: 'rgba(0, 0, 0, 0)',\n\t\t\t\t}}\n\t\t\t\texit={{\n\t\t\t\t\tbackground: 'rgba(0, 0, 0, 0)',\n\t\t\t\t}}\n\t\t\t\t{...underlayProps}\n\t\t\t>\n\t\t\t\t{/** @ts-expect-error react-aria doesn't use animation props **/}\n\t\t\t\t<motion.div\n\t\t\t\t\t{...modalProps}\n\t\t\t\t\tref={ref}\n\t\t\t\t\tanimate={{\n\t\t\t\t\t\tright: 0,\n\t\t\t\t\t}}\n\t\t\t\t\tinitial={{\n\t\t\t\t\t\tright: '-100%',\n\t\t\t\t\t}}\n\t\t\t\t\texit={{\n\t\t\t\t\t\tright: '-100%',\n\t\t\t\t\t}}\n\t\t\t\t\tclassName='relative border border-stone-800 bg-stone-950'\n\t\t\t\t>\n\t\t\t\t\t{children}\n\t\t\t\t</motion.div>\n\t\t\t</motion.div>\n\t\t</Overlay>\n\t);\n}\n","'use client';\nimport React, {type ReactElement, type ReactNode} from 'react';\nimport {type OverlayTriggerProps, useOverlayTriggerState} from 'react-stately';\nimport {useOverlayTrigger} from 'react-aria';\nimport {AnimatePresence} from 'framer-motion';\nimport {Button} from '@/button/button.tsx';\nimport {type ButtonVariantProps} from '@/button/button-variants.tsx';\nimport {Sidebar} from '@/sidebar.tsx';\n\nexport type SidebarTriggerProps = {\n\treadonly children: ReactElement;\n\treadonly icon: ReactNode;\n\treadonly className?: string;\n} & OverlayTriggerProps &\n\tButtonVariantProps;\n\nexport function SidebarTrigger(props: SidebarTriggerProps) {\n\tconst {children, icon} = props;\n\n\tconst state = useOverlayTriggerState(props);\n\tconst {triggerProps, overlayProps} = useOverlayTrigger(\n\t\t{type: 'dialog'},\n\t\tstate,\n\t);\n\n\treturn (\n\t\t<>\n\t\t\t<Button {...props} {...triggerProps}>\n\t\t\t\t{icon}\n\t\t\t</Button>\n\t\t\t<AnimatePresence>\n\t\t\t\t{state.isOpen && (\n\t\t\t\t\t<Sidebar isDismissable {...props} state={state}>\n\t\t\t\t\t\t{React.cloneElement(children, overlayProps)}\n\t\t\t\t\t</Sidebar>\n\t\t\t\t)}\n\t\t\t</AnimatePresence>\n\t\t</>\n\t);\n}\n","import React from 'react';\nimport Image, {type StaticImageData} from 'next/image';\nimport {cx} from '@/cva.ts';\n\nexport type SocialLinkProps = {\n\treadonly image: StaticImageData;\n\treadonly name: string;\n\treadonly href: string;\n\treadonly size?: number;\n\treadonly className?: string;\n};\nexport function SocialLink(props: SocialLinkProps) {\n\tconst {image, href, name, className, size = 24} = props;\n\treturn (\n\t\t<a\n\t\t\thref={href}\n\t\t\tclassName={cx('flex justify-center items-center', className)}\n\t\t\ttarget='_blank'\n\t\t\trel='noreferrer'\n\t\t>\n\t\t\t<Image src={image} alt={name} height={size} width={size} />\n\t\t</a>\n\t);\n}\n","'use client';\nimport React, {createContext, type ReactNode, useContext, useRef} from 'react';\nimport {type ToastState, useToastState} from '@react-stately/toast';\nimport {\n\ttype AriaToastProps,\n\ttype AriaToastRegionProps,\n\tuseToast,\n\tuseToastRegion,\n} from '@react-aria/toast';\nimport {AnimatePresence, motion, type Variants} from 'framer-motion';\nimport {omit} from 'lodash';\n// @ts-expect-error bad typings\nimport Close from '@material-design-icons/svg/round/close.svg';\nimport {Button} from './button/button.tsx';\nimport {cx} from './cva.ts';\n\nexport type ToastContent = {\n\tvariant?: 'success' | 'warn' | 'error';\n\ttitle: string;\n\ticon?: ReactNode;\n\tdescription?: string;\n};\n\ntype ToastProps = {\n\treadonly state: ToastState<ToastContent>;\n} & AriaToastProps<ToastContent>;\n\nconst toastVariants: Variants = {\n\tentering: {\n\t\topacity: 1,\n\t\ttop: 'auto',\n\t\tbottom: 'auto',\n\t\tright: 0,\n\t},\n\tinitial: {\n\t\topacity: 1,\n\t\ttop: 'auto',\n\t\tbottom: 128,\n\t\tright: 0,\n\t},\n\tinitialQueued: {\n\t\topacity: 0,\n\t\ttop: 256,\n\t\tright: 0,\n\t\tbottom: 'auto',\n\t},\n\texiting: {\n\t\tright: '-110%',\n\t},\n};\n\nfunction Toast(props: ToastProps) {\n\tconst {state, toast} = props;\n\tconst {animation, content} = toast;\n\tconst {title, description, icon, variant = 'success'} = content;\n\tconst ref = useRef<HTMLDivElement>(null);\n\tconst {toastProps, titleProps, descriptionProps, closeButtonProps} =\n\t\tuseToast(props, state, ref);\n\n\treturn (\n\t\t<motion.div\n\t\t\t{...omit(toastProps, [\n\t\t\t\t'onAnimationEnd',\n\t\t\t\t'onAnimationStart',\n\t\t\t\t'onDragStart',\n\t\t\t\t'onDragEnd',\n\t\t\t\t'onDrag',\n\t\t\t])}\n\t\t\tref={ref}\n\t\t\tlayout\n\t\t\tinitial={animation === 'queued' ? 'initialQueued' : 'initial'}\n\t\t\tanimate='entering'\n\t\t\texit='exiting'\n\t\t\tvariants={toastVariants}\n\t\t\tclassName={cx(\n\t\t\t\t'rounded flex p-2 items-center gap-2 relative max-w-2xl',\n\t\t\t\tvariant === 'success' && 'bg-green-400',\n\t\t\t\tvariant === 'error' && 'bg-red-400',\n\t\t\t\tvariant === 'warn' && 'bg-yellow-400',\n\t\t\t)}\n\t\t>\n\t\t\t<div>\n\t\t\t\t<div\n\t\t\t\t\t{...titleProps}\n\t\t\t\t\tclassName='flex gap-1 font-semibold text-stone-800'\n\t\t\t\t>\n\t\t\t\t\t{icon}\n\t\t\t\t\t{title}\n\t\t\t\t</div>\n\t\t\t\t{description && (\n\t\t\t\t\t<div {...descriptionProps} className='text-stone-700'>\n\t\t\t\t\t\t{description}\n\t\t\t\t\t</div>\n\t\t\t\t)}\n\t\t\t</div>\n\n\t\t\t{!toast.timeout && (\n\t\t\t\t<Button\n\t\t\t\t\t{...closeButtonProps}\n\t\t\t\t\tvariant='text'\n\t\t\t\t\tsize='xs'\n\t\t\t\t\tclassName={cx(\n\t\t\t\t\t\t'text-stone-800',\n\t\t\t\t\t\tvariant === 'success' && 'enabled:hover:bg-green-500',\n\t\t\t\t\t\tvariant === 'warn' && 'enabled:hover:bg-yellow-500',\n\t\t\t\t\t\tvariant === 'error' && 'enabled:hover:bg-red-500',\n\t\t\t\t\t)}\n\t\t\t\t>\n\t\t\t\t\t<Close className='fill-current' />\n\t\t\t\t</Button>\n\t\t\t)}\n\t\t</motion.div>\n\t);\n}\n\ntype ToastRegionProps = {\n\treadonly state: ToastState<ToastContent>;\n} & AriaToastRegionProps;\n\nfunction ToastRegion(props: ToastRegionProps) {\n\tconst {state} = props;\n\tconst ref = useRef<HTMLDivElement>(null);\n\n\tconst {regionProps} = useToastRegion(props, state, ref);\n\treturn (\n\t\t<motion.div\n\t\t\t{...omit(regionProps, [\n\t\t\t\t'onAnimationEnd',\n\t\t\t\t'onAnimationStart',\n\t\t\t\t'onDragStart',\n\t\t\t\t'onDragEnd',\n\t\t\t\t'onDrag',\n\t\t\t])}\n\t\t\tref={ref}\n\t\t\tlayout\n\t\t\tclassName='fixed bottom-4 right-4 z-[1050] flex flex-col gap-4 outline-none'\n\t\t>\n\t\t\t<AnimatePresence>\n\t\t\t\t{state.visibleToasts.map(toast => (\n\t\t\t\t\t<Toast key={toast.key} toast={toast} state={state} />\n\t\t\t\t))}\n\t\t\t</AnimatePresence>\n\t\t</motion.div>\n\t);\n}\n\nconst toastContext = createContext<ToastState<ToastContent> | null>(null);\n\nexport function useToasts() {\n\tconst toasts = useContext(toastContext);\n\tif (toasts === null) {\n\t\tthrow new Error('useToast must be called within a ToastProvider');\n\t}\n\n\treturn toasts;\n}\n\nexport type ToastProviderProps = {\n\treadonly children: ReactNode;\n};\n\nexport function ToastProvider(props: ToastProviderProps) {\n\tconst {children} = props;\n\tconst state = useToastState<ToastContent>({\n\t\tmaxVisibleToasts: 5,\n\t});\n\n\treturn (\n\t\t<>\n\t\t\t<toastContext.Provider value={state}>\n\t\t\t\t{children}\n\t\t\t</toastContext.Provider>\n\t\t\t<ToastRegion {...props} state={state} />\n\t\t</>\n\t);\n}\n","'use client';\n\nimport {useEffect} from 'react';\nimport {type ToastContent, useToasts} from './toast.tsx';\n\n/**\n * Represents the properties for HashSpyToaster component.\n */\nexport type HashSpyToasterProps = {\n\treadonly toast: ToastContent;\n\treadonly hash: string;\n};\n\n/**\n * Displays a toast message if the current hash matches one of the specified hashes.\n *\n * @param {HashSpyToasterProps} props - The props object containing toast and hash values.\n *\n * @returns {null} - This method does not return any value.\n */\nexport function HashSpyToaster(props: HashSpyToasterProps): null {\n\tconst {toast, hash} = props;\n\n\tconst toasts = useToasts();\n\n\tuseEffect(() => {\n\t\tconst hashes = window.location.hash.slice(1).split(',');\n\t\tif (hashes.includes(hash)) {\n\t\t\ttoasts.add(toast);\n\t\t}\n\t\t// eslint-disable-next-line react-hooks/exhaustive-deps\n\t}, [toast, hash]);\n\n\treturn null;\n}\n","import {Key, ListProps, useListState} from 'react-stately';\n\nexport type ReorderableListStateProps<T extends Record<string, unknown>> = {\n\treadonly onReorder: (key: Key, previous?: Key, next?: Key) => void;\n} & ListProps<T>;\n\nexport default function useReorderableListState<\n\tT extends Record<string, unknown>,\n>(props: ReorderableListStateProps<T>) {\n\tconst {onReorder} = props;\n\tconst state = useListState(props);\n\n\treturn {\n\t\t...state,\n\t\treorder(key: Key, previous?: Key, next?: Key) {\n\t\t\tonReorder(key, previous, next);\n\t\t},\n\t};\n}\n","import React from 'react';\n\nexport function Spacer() {\n\treturn <div className='grow' />;\n}\n","import React, {useMemo, useState} from 'react';\nimport {Map, Seq} from 'immutable';\nimport {type Key} from 'react-stately';\n// @ts-expect-error bad typings\nimport DragHandle from '@material-design-icons/svg/round/drag_handle.svg';\n// @ts-expect-error bad typings\nimport Remove from '@material-design-icons/svg/round/remove.svg';\nimport {Spacer} from '@/spacer.tsx';\nimport {Button} from '@/button/button.tsx';\nimport useReorderableListState, {\n\ttype ReorderableListStateProps,\n} from '@/hooks/use-reorderable-list-state.ts';\nimport {cx} from '@/cva.ts';\n\nexport type ListPrioritizerProps<T extends Record<string, unknown>> = {\n\treadonly onRemove: (key: Key) => void;\n\treadonly className?: string;\n} & ReorderableListStateProps<T>;\n\nexport function ListPrioritizer<T extends Record<string, unknown>>(\n\tprops: ListPrioritizerProps<T>,\n) {\n\tconst {onRemove, className} = props;\n\n\tconst {collection, reorder} = useReorderableListState(props);\n\n\tconst [dragStartY, setDragStartY] = useState(0);\n\n\tconst [deltaY, setDeltaY] = useState(0);\n\n\tconst [activityReferences, setActivityReferences] =\n\t\tuseState<Map<Key, HTMLDivElement>>(Map());\n\n\tconst [draggedActivity, setDraggedActivity] = useState<Key | undefined>();\n\n\tconst handleMove = (deltaY: number, key: Key) => {\n\t\tsetDeltaY(deltaY);\n\n\t\tconst previousKey = collection.getKeyBefore(key);\n\t\tif (previousKey !== null && previousKey !== undefined) {\n\t\t\tconst previousContainer = activityReferences.get(key);\n\t\t\tif (\n\t\t\t\tpreviousContainer !== undefined &&\n\t\t\t\tdeltaY < -(previousContainer.clientHeight / 2)\n\t\t\t) {\n\t\t\t\tsetDragStartY(previousContainer.getBoundingClientRect().y);\n\t\t\t\tsetDeltaY(0);\n\t\t\t\treorder(key, previousKey);\n\t\t\t}\n\t\t}\n\n\t\tconst nextKey = collection.getKeyAfter(key);\n\t\tif (nextKey !== null && nextKey !== undefined) {\n\t\t\tconst nextContainer = activityReferences.get(key);\n\t\t\tif (\n\t\t\t\tnextContainer !== undefined &&\n\t\t\t\tdeltaY > nextContainer.clientHeight\n\t\t\t) {\n\t\t\t\tsetDragStartY(\n\t\t\t\t\tnextContainer.getBoundingClientRect().y +\n\t\t\t\t\t\tnextContainer.clientHeight / 2,\n\t\t\t\t);\n\t\t\t\tsetDeltaY(0);\n\t\t\t\treorder(key, undefined, nextKey);\n\t\t\t}\n\t\t}\n\t};\n\n\tconst touchStartHandler = (key: Key) => (event: React.TouchEvent) => {\n\t\tsetDraggedActivity(key);\n\t\tconst rect = event.currentTarget.getBoundingClientRect();\n\t\tsetDragStartY(rect.y + rect.height / 2);\n\t};\n\n\tconst dragStartHandler = (key: Key) => (event: React.DragEvent) => {\n\t\tevent.dataTransfer.setDragImage(new Image(), 0, 0);\n\t\tsetDraggedActivity(key);\n\t\tconst rect = event.currentTarget.getBoundingClientRect();\n\t\tsetDragStartY(rect.y + rect.height / 2);\n\t};\n\n\tconst touchHandler = (key: Key) => (event: React.TouchEvent) => {\n\t\tif (event.touches.length !== 1) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst deltaY = event.touches[0].clientY - dragStartY;\n\n\t\thandleMove(deltaY, key);\n\t};\n\n\tconst dragHandler = (key: Key) => (event: React.DragEvent) => {\n\t\tif (event.clientY === 0) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst deltaY = event.clientY - dragStartY;\n\n\t\thandleMove(deltaY, key);\n\t};\n\n\tconst dragEndHandler = () => {\n\t\tsetDraggedActivity(undefined);\n\t\tsetDragStartY(0);\n\t\tsetDeltaY(0);\n\t};\n\n\tconst draggedActivityOffset = useMemo(() => {\n\t\tif (draggedActivity === undefined) {\n\t\t\treturn;\n\t\t}\n\n\t\tif (draggedActivity === collection.getFirstKey() && deltaY < 0) {\n\t\t\treturn '0px';\n\t\t}\n\n\t\tif (draggedActivity === collection.getLastKey() && deltaY > 0) {\n\t\t\treturn '0px';\n\t\t}\n\n\t\treturn `${deltaY}px`;\n\t}, [collection, deltaY, draggedActivity]);\n\n\treturn (\n\t\t<div\n\t\t\tclassName={cx(\n\t\t\t\t'grow basis-5/12 border border-stone-700 rounded divide-stone-700 divide-y',\n\t\t\t\tclassName,\n\t\t\t)}\n\t\t>\n\t\t\t{Seq(collection).map(activity => (\n\t\t\t\t<div\n\t\t\t\t\tkey={activity.key}\n\t\t\t\t\tclassName='relative'\n\t\t\t\t\tstyle={{\n\t\t\t\t\t\theight:\n\t\t\t\t\t\t\tdraggedActivity === activity.key\n\t\t\t\t\t\t\t\t? `${activityReferences.get(activity.key)?.clientHeight ?? 0}px`\n\t\t\t\t\t\t\t\t: undefined,\n\t\t\t\t\t}}\n\t\t\t\t>\n\t\t\t\t\t<div\n\t\t\t\t\t\tref={element => {\n\t\t\t\t\t\t\tif (element !== null) {\n\t\t\t\t\t\t\t\tsetActivityReferences(current =>\n\t\t\t\t\t\t\t\t\tcurrent.set(activity.key, element),\n\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}}\n\t\t\t\t\t\tclassName={cx(\n\t\t\t\t\t\t\tdraggedActivity === activity.key &&\n\t\t\t\t\t\t\t\t'absolute z-10 bg-stone-900 w-full border-y border-stone-700',\n\t\t\t\t\t\t\tdraggedActivity === undefined &&\n\t\t\t\t\t\t\t\t'hover:bg-stone-900',\n\t\t\t\t\t\t\t'flex items-center gap-4 rounded grow text-stone-200 p-2 group select-none left-0',\n\t\t\t\t\t\t)}\n\t\t\t\t\t\tstyle={{\n\t\t\t\t\t\t\ttop:\n\t\t\t\t\t\t\t\tdraggedActivity === activity.key\n\t\t\t\t\t\t\t\t\t? draggedActivityOffset\n\t\t\t\t\t\t\t\t\t: undefined,\n\t\t\t\t\t\t}}\n\t\t\t\t\t>\n\t\t\t\t\t\t<div\n\t\t\t\t\t\t\tdraggable\n\t\t\t\t\t\t\tclassName='cursor-grab touch-none fill-stone-400'\n\t\t\t\t\t\t\tonTouchStart={touchStartHandler(activity.key)}\n\t\t\t\t\t\t\tonTouchMove={touchHandler(activity.key)}\n\t\t\t\t\t\t\tonTouchEnd={dragEndHandler}\n\t\t\t\t\t\t\tonDragStart={dragStartHandler(activity.key)}\n\t\t\t\t\t\t\tonDrag={dragHandler(activity.key)}\n\t\t\t\t\t\t\tonDragEnd={dragEndHandler}\n\t\t\t\t\t\t>\n\t\t\t\t\t\t\t<DragHandle />\n\t\t\t\t\t\t</div>\n\n\t\t\t\t\t\t{activity.rendered}\n\t\t\t\t\t\t<Spacer />\n\t\t\t\t\t\t<Button\n\t\t\t\t\t\t\tclassName='bg-transparent hover:bg-stone-700'\n\t\t\t\t\t\t\tvariant='text'\n\t\t\t\t\t\t\tonPress={() => {\n\t\t\t\t\t\t\t\tonRemove(activity.key);\n\t\t\t\t\t\t\t}}\n\t\t\t\t\t\t>\n\t\t\t\t\t\t\t<Remove className='fill-current' />\n\t\t\t\t\t\t</Button>\n\t\t\t\t\t</div>\n\t\t\t\t</div>\n\t\t\t))}\n\t\t</div>\n\t);\n}\n","import React, {type RefObject} from 'react';\nimport {\n\ttype AriaGridListProps,\n\tuseGridList,\n\tuseGridListItem,\n\tuseFocusRing,\n\tmergeProps,\n\tuseGridListSelectionCheckbox,\n\tuseObjectRef,\n} from 'react-aria';\nimport {\n\tuseListState,\n\ttype ListProps as ListStateProps,\n\ttype ListState,\n\ttype Node,\n} from 'react-stately';\nimport {Checkbox} from './checkbox.tsx';\nimport {cx} from './cva.ts';\n\nexport type ListProps<T extends Record<string, unknown>> = {\n\treadonly className?: string;\n\treadonly listRef?: RefObject<HTMLUListElement>;\n} & AriaGridListProps<T> &\n\tListStateProps<T>;\n\nexport function List<T extends Record<string, unknown>>(props: ListProps<T>) {\n\tconst {className} = props;\n\tconst state = useListState(props);\n\tconst listRef = useObjectRef(props.listRef);\n\n\tconst {gridProps} = useGridList(props, state, listRef);\n\n\treturn (\n\t\t<ul\n\t\t\t{...gridProps}\n\t\t\tref={listRef}\n\t\t\tclassName={cx(\n\t\t\t\t'border border-stone-700 divide-y divide-stone-700 rounded',\n\t\t\t\tclassName,\n\t\t\t)}\n\t\t>\n\t\t\t{[...state.collection].map(item => (\n\t\t\t\t<ListItem key={item.key} item={item} state={state} />\n\t\t\t))}\n\t\t</ul>\n\t);\n}\n\ntype ListItemProps<T extends Record<string, unknown>> = {\n\treadonly state: ListState<T>;\n\treadonly item: Node<T>;\n\treadonly listItemRef?: RefObject<HTMLLIElement>;\n};\n\nfunction ListCheckbox<T extends Record<string, unknown>>(\n\tprops: ListItemProps<T>,\n) {\n\tconst {state, item} = props;\n\tconst {checkboxProps} = useGridListSelectionCheckbox(\n\t\t{\n\t\t\tkey: item.key,\n\t\t},\n\t\tstate,\n\t);\n\treturn <Checkbox {...checkboxProps} />;\n}\n\nexport function ListItem<T extends Record<string, unknown>>(\n\tprops: ListItemProps<T>,\n) {\n\tconst {item, state} = props;\n\tconst itemRef = useObjectRef(props.listItemRef);\n\tconst {rowProps, gridCellProps} = useGridListItem(\n\t\t{node: item},\n\t\tstate,\n\t\titemRef,\n\t);\n\n\tconst {focusProps} = useFocusRing();\n\n\tconst selectable =\n\t\tstate.selectionManager.selectionMode !== 'none' &&\n\t\tstate.selectionManager.selectionBehavior === 'toggle';\n\n\treturn (\n\t\t<li\n\t\t\t{...mergeProps(rowProps, focusProps)}\n\t\t\tref={itemRef}\n\t\t\tclassName={cx('p-2', selectable && 'cursor-pointer')}\n\t\t>\n\t\t\t<div\n\t\t\t\t{...gridCellProps}\n\t\t\t\tclassName={cx('text-stone-300 flex items-center gap-4')}\n\t\t\t>\n\t\t\t\t{selectable && <ListCheckbox state={state} item={item} />}\n\t\t\t\t{item.rendered}\n\t\t\t</div>\n\t\t</li>\n\t);\n}\n","import React from 'react';\nimport {cx} from './cva.ts';\n\nexport type LoadingSpinnerProps = {\n\treadonly className?: string;\n};\n\nexport function LoadingSpinner(props: LoadingSpinnerProps) {\n\tconst {className} = props;\n\treturn (\n\t\t<svg\n\t\t\tclassName={cx('animate-spin w-4 h-4', className)}\n\t\t\tviewBox='0 0 50 50'\n\t\t>\n\t\t\t<circle\n\t\t\t\tclassName='animate-spin-path stroke-current stroke-4'\n\t\t\t\tcx='25'\n\t\t\t\tcy='25'\n\t\t\t\tr='20'\n\t\t\t\tfill='none'\n\t\t\t\tstrokeWidth='5'\n\t\t\t/>\n\t\t</svg>\n\t);\n}\n","import {type ReactNode, type RefObject} from 'react';\nimport {\n\ttype AriaNumberFieldProps,\n\tuseLocale,\n\tuseNumberField,\n\tuseObjectRef,\n} from 'react-aria';\nimport {type NumberFieldStateOptions, useNumberFieldState} from 'react-stately';\nimport {twJoin} from 'tailwind-merge';\n// @ts-expect-error bad typings\nimport ArrowDropDown from '@material-design-icons/svg/round/arrow_drop_down.svg';\n// @ts-expect-error bad typings\nimport ArrowDropUp from '@material-design-icons/svg/round/arrow_drop_up.svg';\nimport {Button} from '@/button/button.tsx';\nimport {cx} from '@/cva.ts';\n\nexport type NumberFieldProps = {\n\treadonly className?: string;\n\treadonly name?: string;\n\treadonly icon?: ReactNode;\n\treadonly inputRef?: RefObject<HTMLInputElement>;\n} & AriaNumberFieldProps &\n\tOmit<NumberFieldStateOptions, 'locale'>;\n\nexport function NumberField(props: NumberFieldProps) {\n\tconst {locale} = useLocale();\n\tconst {label, className, icon, isDisabled, name, isRequired} = props;\n\tconst state = useNumberFieldState({\n\t\tvalidationBehavior: 'native',\n\t\t...props,\n\t\tlocale,\n\t});\n\tconst inputRef = useObjectRef(props.inputRef);\n\tconst {\n\t\tlabelProps,\n\t\tgroupProps,\n\t\tinputProps,\n\t\tincrementButtonProps,\n\t\tdecrementButtonProps,\n\t\terrorMessageProps,\n\t\tisInvalid,\n\t\tvalidationErrors,\n\t} = useNumberField(\n\t\t{\n\t\t\tvalidationBehavior: 'native',\n\t\t\t...props,\n\t\t},\n\t\tstate,\n\t\tinputRef,\n\t);\n\treturn (\n\t\t<div data-disabled={isDisabled} className={twJoin('group', className)}>\n\t\t\t<label\n\t\t\t\t{...labelProps}\n\t\t\t\tclassName={cx(\n\t\t\t\t\t'block text-stone-400 group-focus-within:text-stone-50 text-sm mb-1 group-data-[disabled=true]:text-stone-500 transition-colors',\n\t\t\t\t\tisRequired && 'after:content-[\"*\"] after:ml-0.5',\n\t\t\t\t)}\n\t\t\t>\n\t\t\t\t{label}\n\t\t\t</label>\n\n\t\t\t<div\n\t\t\t\t{...groupProps}\n\t\t\t\tclassName='flex w-full items-center gap-2 rounded border border-stone-700 ps-2 shadow-stone-800 transition-all group-focus-within:border-stone-50 group-focus-within:glow-sm group-data-[disabled=true]:border-stone-800'\n\t\t\t>\n\t\t\t\t{icon}\n\t\t\t\t<input\n\t\t\t\t\t{...inputProps}\n\t\t\t\t\tref={inputRef}\n\t\t\t\t\tname={name}\n\t\t\t\t\tclassName='min-w-0 grow bg-transparent py-2 text-stone-200 outline-none disabled:cursor-not-allowed disabled:text-stone-600'\n\t\t\t\t/>\n\t\t\t\t<div className='flex-none basis-4 flex-col items-center justify-around fill-stone-400'>\n\t\t\t\t\t<Button {...incrementButtonProps} variant='text' size='xs'>\n\t\t\t\t\t\t<ArrowDropUp viewBox='0 0 24 24' className='size-4' />\n\t\t\t\t\t</Button>\n\t\t\t\t\t<Button {...decrementButtonProps} variant='text' size='xs'>\n\t\t\t\t\t\t<ArrowDropDown viewBox='0 0 24 24' className='size-4' />\n\t\t\t\t\t</Button>\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t\t{isInvalid && (\n\t\t\t\t<div\n\t\t\t\t\t{...errorMessageProps}\n\t\t\t\t\tclassName='mt-1 text-xs text-red-400'\n\t\t\t\t>\n\t\t\t\t\t{validationErrors.join(' ')}\n\t\t\t\t</div>\n\t\t\t)}\n\t\t</div>\n\t);\n}\n","import React, {type ReactElement, type ReactNode} from 'react';\nimport {type OverlayTriggerProps, useOverlayTriggerState} from 'react-stately';\nimport {mergeProps, type Placement, useOverlayTrigger} from 'react-aria';\n\nimport {Button, type ButtonProps} from '@/button/button.tsx';\n\nimport {Popover} from '@/popover.tsx';\n\nexport type PopoverButtonTriggerProps = {\n\treadonly className?: string;\n\treadonly label: ReactNode;\n\treadonly children: ReactElement;\n\treadonly placement: Placement;\n} & OverlayTriggerProps &\n\tButtonProps;\n\nexport function PopoverButtonTrigger(props: PopoverButtonTriggerProps) {\n\tconst {label, children, placement} = props;\n\tconst buttonRef = React.useRef<HTMLButtonElement>(null);\n\tconst state = useOverlayTriggerState(props);\n\tconst {triggerProps, overlayProps} = useOverlayTrigger(\n\t\t{type: 'dialog'},\n\t\tstate,\n\t\tbuttonRef,\n\t);\n\n\treturn (\n\t\t<>\n\t\t\t<Button {...mergeProps(triggerProps, props)} buttonRef={buttonRef}>\n\t\t\t\t{label}\n\t\t\t</Button>\n\t\t\t{state.isOpen && (\n\t\t\t\t<Popover\n\t\t\t\t\t{...props}\n\t\t\t\t\ttriggerRef={buttonRef}\n\t\t\t\t\tstate={state}\n\t\t\t\t\tplacement={placement}\n\t\t\t\t>\n\t\t\t\t\t{React.cloneElement(children, overlayProps)}\n\t\t\t\t</Popover>\n\t\t\t)}\n\t\t</>\n\t);\n}\n","'use client';\n\nimport React, {type ReactNode} from 'react';\nimport {motion} from 'framer-motion';\n\nexport type AnimatedLayoutContainerProps = {\n\treadonly children: ReactNode;\n\treadonly className?: string;\n};\n\nexport function AnimatedLayoutContainer(\n\tprops: AnimatedLayoutContainerProps,\n) {\n\tconst {children, className} = props;\n\treturn (\n\t\t<motion.div layout className={className}>\n\t\t\t{children}\n\t\t</motion.div>\n\t);\n}\n","import React, {useRef} from 'react';\nimport {\n\ttype AriaTagGroupProps,\n\ttype AriaTagProps,\n\tuseFocusRing,\n\tuseTag,\n\tuseTagGroup,\n} from 'react-aria';\nimport {Set} from 'immutable';\nimport {type Key, type ListState, type Node, useListState} from 'react-stately';\n// @ts-expect-error bad typings\nimport Close from '@material-design-icons/svg/round/close.svg';\nimport {Button} from './button/button.tsx';\n\nexport type TagGroupProps<T extends Record<string, unknown>> = {\n\treadonly className?: string;\n\treadonly onRemove?: (keys: Set<Key>) => void;\n} & Omit<AriaTagGroupProps<T>, 'onRemove'>;\n\nexport function TagGroup<T extends Record<string, unknown>>(\n\tprops: TagGroupProps<T>,\n) {\n\tconst {className, label, description, errorMessage, onRemove} = props;\n\tconst divRef = useRef<HTMLDivElement>(null);\n\n\tconst state = useListState(props);\n\n\tconst {gridProps, labelProps, descriptionProps, errorMessageProps} =\n\t\tuseTagGroup(\n\t\t\t{\n\t\t\t\t...props,\n\t\t\t\tonRemove:\n\t\t\t\t\tonRemove === undefined\n\t\t\t\t\t\t? undefined\n\t\t\t\t\t\t: keys => {\n\t\t\t\t\t\t\t\tonRemove(Set(keys));\n\t\t\t\t\t\t\t},\n\t\t\t},\n\t\t\tstate,\n\t\t\tdivRef,\n\t\t);\n\n\treturn (\n\t\t<div className={className}>\n\t\t\t<div {...labelProps} className='mb-1 text-sm text-stone-300'>\n\t\t\t\t{label}\n\t\t\t</div>\n\t\t\t<div {...gridProps} ref={divRef} className='flex flex-wrap gap-2'>\n\t\t\t\t{[...state.collection].map(item => (\n\t\t\t\t\t<Tag key={item.key} item={item} state={state} />\n\t\t\t\t))}\n\t\t\t</div>\n\t\t\t{description === undefined ? null : (\n\t\t\t\t<div {...descriptionProps}>{description}</div>\n\t\t\t)}\n\t\t\t{errorMessage === undefined ? null : (\n\t\t\t\t<div {...errorMessageProps}> {errorMessage} </div>\n\t\t\t)}\n\t\t</div>\n\t);\n}\n\ntype TagProps<T> = {\n\treadonly item: Node<T>;\n\treadonly state: ListState<T>;\n} & AriaTagProps<T>;\n\nfunction Tag<T>(props: TagProps<T>) {\n\tconst {item, state} = props;\n\n\tconst ref = useRef(null);\n\n\tconst {focusProps, isFocusVisible} = useFocusRing({\n\t\twithin: true,\n\t});\n\n\tconst {rowProps, gridCellProps, removeButtonProps, allowsRemoving} = useTag(\n\t\tprops,\n\t\tstate,\n\t\tref,\n\t);\n\n\treturn (\n\t\t<div\n\t\t\tref={ref}\n\t\t\t{...rowProps}\n\t\t\t{...focusProps}\n\t\t\tdata-focus-visible={isFocusVisible}\n\t\t>\n\t\t\t<div\n\t\t\t\t{...gridCellProps}\n\t\t\t\tclassName='flex items-center gap-2 rounded border border-stone-700 px-2 text-stone-300'\n\t\t\t>\n\t\t\t\t{item.rendered}\n\t\t\t\t{allowsRemoving && (\n\t\t\t\t\t<Button {...removeButtonProps} variant='text' size='sm'>\n\t\t\t\t\t\t<Close className='fill-current' />\n\t\t\t\t\t</Button>\n\t\t\t\t)}\n\t\t\t</div>\n\t\t</div>\n\t);\n}\n","import React, {type ReactNode, useRef} from 'react';\nimport {type AriaComboBoxProps, useComboBox} from 'react-aria';\nimport {\n\ttype ComboBoxState,\n\ttype ComboBoxStateOptions,\n\tuseComboBoxState,\n} from 'react-stately';\n// @ts-expect-error bad typings\nimport ArrowDropDown from '@material-design-icons/svg/round/arrow_drop_down.svg';\nimport {BaseListBox} from '@/list-box.tsx';\nimport {Button} from '@/button';\nimport {Popover} from '@/popover.tsx';\nimport {cx} from '@/cva.ts';\n\nexport type ComboBoxProps<T extends Record<string, unknown>> =\n\t| StatefulComboBoxProps<T>\n\t| BaseComboBoxProps<T>;\n\nexport function ComboBox<T extends Record<string, unknown>>(\n\tprops: ComboBoxProps<T>,\n) {\n\treturn 'state' in props ? (\n\t\t<BaseComboBox {...props} />\n\t) : (\n\t\t<StatefulComboBox {...props} />\n\t);\n}\n\nexport type StatefulComboBoxProps<T extends Record<string, unknown>> = Omit<\n\tBaseComboBoxProps<T>,\n\t'state'\n> &\n\tComboBoxStateOptions<T>;\n\nexport function StatefulComboBox<T extends Record<string, unknown>>(\n\tprops: StatefulComboBoxProps<T>,\n) {\n\tconst state = useComboBoxState<T>(props);\n\n\treturn <BaseComboBox {...props} state={state} />;\n}\n\nexport type BaseComboBoxProps<T extends Record<string, unknown>> = {\n\treadonly icon?: ReactNode;\n\treadonly className?: string;\n\treadonly state: ComboBoxState<T>;\n} & AriaComboBoxProps<T>;\n\nexport function BaseComboBox<T extends Record<string, unknown>>(\n\tprops: BaseComboBoxProps<T>,\n) {\n\tconst {icon, state, className} = props;\n\n\tconst buttonObjectRef = useRef<HTMLButtonElement>(null);\n\tconst inputObjectRef = useRef<HTMLInputElement>(null);\n\tconst listBoxObjectRef = useRef<HTMLUListElement>(null);\n\tconst popoverObjectRef = useRef<HTMLDivElement>(null);\n\n\tconst {buttonProps, inputProps, listBoxProps, labelProps} = useComboBox<T>(\n\t\t{\n\t\t\t...props,\n\t\t\tinputRef: inputObjectRef,\n\t\t\tbuttonRef: buttonObjectRef,\n\t\t\tlistBoxRef: listBoxObjectRef,\n\t\t\tpopoverRef: popoverObjectRef,\n\t\t},\n\t\tstate,\n\t);\n\n\treturn (\n\t\t<div className={cx('group w-fit', className)}>\n\t\t\t<label\n\t\t\t\t{...labelProps}\n\t\t\t\tclassName='mb-1 text-sm text-stone-300 transition-colors group-focus-within:text-stone-50'\n\t\t\t>\n\t\t\t\t{props.label}\n\t\t\t</label>\n\t\t\t<div className='flex w-full rounded border border-stone-700 bg-stone-950 text-stone-300 transition-all group-focus-within:border-stone-50 group-focus-within:shadow-stone-800 group-focus-within:glow-sm'>\n\t\t\t\t{icon}\n\t\t\t\t<input\n\t\t\t\t\t{...inputProps}\n\t\t\t\t\tref={inputObjectRef}\n\t\t\t\t\tclassName='grow bg-transparent p-1 outline-0 placeholder:text-stone-500'\n\t\t\t\t/>\n\t\t\t\t<Button\n\t\t\t\t\t{...buttonProps}\n\t\t\t\t\tbuttonRef={buttonObjectRef}\n\t\t\t\t\tvariant='text'\n\t\t\t\t>\n\t\t\t\t\t<ArrowDropDown\n\t\t\t\t\t\taria-hidden='true'\n\t\t\t\t\t\tclassName='fill-current'\n\t\t\t\t\t/>\n\t\t\t\t</Button>\n\t\t\t\t{state.isOpen ? (\n\t\t\t\t\t<Popover\n\t\t\t\t\t\tref={popoverObjectRef}\n\t\t\t\t\t\tstate={state}\n\t\t\t\t\t\ttriggerRef={inputObjectRef}\n\t\t\t\t\t\tplacement='bottom start'\n\t\t\t\t\t>\n\t\t\t\t\t\t{/* @ts-expect-error children prop is passed in by react-aria */}\n\t\t\t\t\t\t<BaseListBox\n\t\t\t\t\t\t\t{...listBoxProps}\n\t\t\t\t\t\t\tlistBoxRef={listBoxObjectRef}\n\t\t\t\t\t\t\tstate={state}\n\t\t\t\t\t\t\tclassName='max-h-96'\n\t\t\t\t\t\t/>\n\t\t\t\t\t</Popover>\n\t\t\t\t) : null}\n\t\t\t</div>\n\t\t</div>\n\t);\n}\n","import React, {useMemo} from 'react';\nimport {useListState, type Key} from 'react-stately';\nimport {type List, Seq, Set} from 'immutable';\nimport {type CollectionElement} from '@react-types/shared';\nimport {useId} from 'react-aria';\nimport {ComboBox} from './combo-box.tsx';\nimport {TagGroup} from './tag-group.tsx';\nimport {cx} from './cva.ts';\n\nexport type ComboBoxTagMultiSelectProps<T extends Record<string, unknown>> = {\n\treadonly label?: string;\n\treadonly children: (item: T) => CollectionElement<T>;\n\treadonly items: List<T>;\n\treadonly filteredKeys: Set<Key>;\n\treadonly filterText: string;\n\treadonly setFilterText: (filterText: string) => void;\n\treadonly selectedKeys: Set<Key> | 'all';\n\treadonly setSelectedKeys: (keys: Set<Key> | 'all') => void;\n\treadonly className?: string;\n\treadonly searchPlaceholder?: string;\n};\n\nexport function ComboBoxTagMultiSelect<T extends Record<string, unknown>>(\n\tprops: ComboBoxTagMultiSelectProps<T>,\n) {\n\tconst {\n\t\titems,\n\t\tfilteredKeys,\n\t\tsetSelectedKeys,\n\t\tfilterText,\n\t\tsetFilterText,\n\t\tselectedKeys,\n\t\tchildren,\n\t\tlabel,\n\t\tclassName,\n\t\tsearchPlaceholder,\n\t} = props;\n\tconst {collection, selectionManager} = useListState<T>({\n\t\titems,\n\t\tchildren,\n\t\tselectedKeys,\n\t\tonSelectionChange(keys) {\n\t\t\tsetSelectedKeys(Set(keys));\n\t\t},\n\t\tselectionMode: 'multiple',\n\t});\n\n\tconst id = useId();\n\n\tconst selectedItems = useMemo(\n\t\t() =>\n\t\t\tSeq(selectionManager.selectedKeys)\n\t\t\t\t.map(key => collection.getItem(key)!.value!)\n\t\t\t\t.toList(),\n\t\t[collection, selectionManager],\n\t);\n\tconst filteredItems = useMemo(\n\t\t() =>\n\t\t\tSeq(filteredKeys)\n\t\t\t\t.map(key => collection.getItem(key)!.value!)\n\t\t\t\t.toList(),\n\t\t[collection, filteredKeys],\n\t);\n\n\treturn (\n\t\t<div className={cx('group w-fit', className)}>\n\t\t\t{label === undefined ? null : (\n\t\t\t\t<p\n\t\t\t\t\tclassName='text-sm text-stone-300 group-focus-within:text-stone-50'\n\t\t\t\t\tid={id}\n\t\t\t\t>\n\t\t\t\t\t{label}\n\t\t\t\t</p>\n\t\t\t)}\n\n\t\t\t<TagGroup\n\t\t\t\taria-labelledby={id}\n\t\t\t\titems={selectedItems}\n\t\t\t\tclassName={cx(\n\t\t\t\t\t(selectedKeys === 'all' || selectedKeys.size > 0) && 'mb-2',\n\t\t\t\t)}\n\t\t\t\tonRemove={keys => {\n\t\t\t\t\tfor (const key of keys) {\n\t\t\t\t\t\tselectionManager.toggleSelection(key);\n\t\t\t\t\t}\n\t\t\t\t}}\n\t\t\t>\n\t\t\t\t{children}\n\t\t\t</TagGroup>\n\t\t\t<ComboBox\n\t\t\t\taria-labelledby={id}\n\t\t\t\tplaceholder={searchPlaceholder}\n\t\t\t\titems={filteredItems}\n\t\t\t\tinputValue={filterText}\n\t\t\t\tclassName='w-full'\n\t\t\t\tonInputChange={setFilterText}\n\t\t\t\tonSelectionChange={(key: Key | null) => {\n\t\t\t\t\tif (key === null) {\n\t\t\t\t\t\tif (filterText !== '') {\n\t\t\t\t\t\t\tsetFilterText('');\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\n\t\t\t\t\tsetFilterText('');\n\t\t\t\t\tif (selectedKeys === 'all') {\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\n\t\t\t\t\tsetSelectedKeys(selectedKeys.add(key));\n\t\t\t\t}}\n\t\t\t>\n\t\t\t\t{children}\n\t\t\t</ComboBox>\n\t\t</div>\n\t);\n}\n","import {type ComponentProps, type ReactNode} from 'react';\nimport {type VariantProps} from 'cva';\nimport {buttonVariants} from '@/button/button-variants';\n\n// eslint-disable-next-line @typescript-eslint/naming-convention\nexport type ALinkButtonProps = {\n\treadonly children: ReactNode;\n\treadonly className?: string;\n} & ComponentProps<'a'> &\n\tVariantProps<typeof buttonVariants>;\n\n// eslint-disable-next-line @typescript-eslint/naming-convention\nexport function ALinkButton(props: ALinkButtonProps) {\n\tconst {children} = props;\n\treturn (\n\t\t// eslint-disable-next-line react/jsx-no-target-blank\n\t\t<a rel='noreferrer' {...props} className={buttonVariants(props)}>\n\t\t\t{children}\n\t\t</a>\n\t);\n}\n","'use client';\nimport React, {type ReactNode, useRef} from 'react';\nimport {type AriaDialogProps, useDialog} from 'react-aria';\nimport {cx} from './cva.ts';\n\nexport type DialogProps = {\n\treadonly title?: ReactNode;\n\treadonly children: ReactNode;\n\treadonly className?: string;\n} & AriaDialogProps;\n\nexport function Dialog(props: DialogProps) {\n\tconst {title, children, className} = props;\n\n\tconst ref = useRef(null);\n\n\tconst {dialogProps, titleProps} = useDialog(props, ref);\n\n\treturn (\n\t\t<div\n\t\t\t{...dialogProps}\n\t\t\tref={ref}\n\t\t\tclassName={cx('outline-none text-stone-300', className)}\n\t\t>\n\t\t\t{title === undefined ? null : (\n\t\t\t\t<h3 {...titleProps} className='mb-2 text-2xl font-bold'>\n\t\t\t\t\t{title}\n\t\t\t\t</h3>\n\t\t\t)}\n\t\t\t{children}\n\t\t</div>\n\t);\n}\n","'use client';\nimport React, {type ReactNode, useState} from 'react';\n// @ts-expect-error bad typings\nimport ArrowDropDown from '@material-design-icons/svg/round/arrow_drop_down.svg';\n// @ts-expect-error bad typings\nimport ArrowDropUp from '@material-design-icons/svg/round/arrow_drop_up.svg';\nimport {AnimatePresence, motion} from 'framer-motion';\nimport {cx} from './cva.ts';\n\nexport type DropdownProps = BaseDropdownProps | StatefulDropDownProps;\n\nexport function Dropdown(props: DropdownProps) {\n\treturn 'isOpen' in props ? (\n\t\t<BaseDropdown {...props} />\n\t) : (\n\t\t<StatefulDropDown {...props} />\n\t);\n}\n\nexport type StatefulDropDownProps = Omit<\n\tBaseDropdownProps,\n\t'isOpen' | 'onToggle'\n> & {\n\treadonly isInitiallyOpen?: boolean;\n};\n\nexport function StatefulDropDown(props: StatefulDropDownProps) {\n\tconst {isInitiallyOpen = false} = props;\n\tconst [isOpen, setIsOpen] = useState(isInitiallyOpen);\n\treturn <BaseDropdown isOpen={isOpen} onToggle={setIsOpen} {...props} />;\n}\n\nexport type BaseDropdownProps = {\n\treadonly isOpen: boolean;\n\treadonly onToggle: (isOpen: boolean) => void;\n\treadonly label: ReactNode;\n\treadonly children: ReactNode;\n\treadonly className?: string;\n};\n\nexport function BaseDropdown(props: BaseDropdownProps) {\n\tconst {isOpen, onToggle, label, children, className} = props;\n\n\treturn (\n\t\t<div\n\t\t\tclassName={cx(\n\t\t\t\t'overflow-hidden rounded border border-stone-800',\n\t\t\t\tclassName,\n\t\t\t)}\n\t\t>\n\t\t\t<div\n\t\t\t\tclassName='flex cursor-pointer border-b border-stone-800 p-2 font-bold text-stone-50 transition-colors hover:bg-stone-900'\n\t\t\t\tonClick={() => {\n\t\t\t\t\tonToggle(!isOpen);\n\t\t\t\t}}\n\t\t\t>\n\t\t\t\t<div className='grow'>{label}</div>\n\t\t\t\t{isOpen ? (\n\t\t\t\t\t<ArrowDropUp className='fill-current' />\n\t\t\t\t) : (\n\t\t\t\t\t<ArrowDropDown className='fill-current' />\n\t\t\t\t)}\n\t\t\t</div>\n\t\t\t<AnimatePresence>\n\t\t\t\t{isOpen && (\n\t\t\t\t\t<motion.div\n\t\t\t\t\t\tlayout\n\t\t\t\t\t\tclassName='p-2 text-stone-300'\n\t\t\t\t\t\tinitial={{\n\t\t\t\t\t\t\theight: 0,\n\t\t\t\t\t\t}}\n\t\t\t\t\t\tanimate={{\n\t\t\t\t\t\t\theight: 'auto',\n\t\t\t\t\t\t}}\n\t\t\t\t\t\texit={{\n\t\t\t\t\t\t\theight: 0,\n\t\t\t\t\t\t}}\n\t\t\t\t\t>\n\t\t\t\t\t\t{children}\n\t\t\t\t\t</motion.div>\n\t\t\t\t)}\n\t\t\t</AnimatePresence>\n\t\t</div>\n\t);\n}\n","import React, {\n\ttype ChangeEvent,\n\ttype ComponentProps,\n\ttype ReactNode,\n\tuseRef,\n\tuseState,\n} from 'react';\nimport {type FileDropItem, mergeProps, useDrop, useFocusRing} from 'react-aria';\nimport {type FormValidationProps, useFormValidation} from '@react-aria/form';\nimport {useFormValidationState} from '@react-stately/form';\nimport {omit} from 'lodash';\nimport {cx} from './cva.ts';\n\nexport type FileDropZoneProps = {\n\treadonly className?: string;\n\treadonly name?: string;\n\treadonly label?: ReactNode;\n\treadonly acceptedMimeTypes?: string[];\n\treadonly error?: string;\n} & FormValidationProps<File | undefined> &\n\tOmit<ComponentProps<'input'>, 'type' | 'accept' | 'ref'>;\n\nconst imageMimeTypes = new Set<string>([\n\t'image/png',\n\t'image/jpg',\n\t'image/jpeg',\n\t'image/webp',\n]);\n\nexport function FileDropZone(props: FileDropZoneProps) {\n\tconst {label, className, acceptedMimeTypes, error} = props;\n\n\tconst [file, setFile] = useState<File>();\n\n\tconst state = useFormValidationState({\n\t\tvalidationBehavior: 'native',\n\t\t...props,\n\t\tvalue: file,\n\t});\n\n\tconst {commitValidation} = state;\n\n\tconst {isInvalid, validationErrors} = state.displayValidation;\n\n\tconst inputRef = useRef<HTMLInputElement>(null);\n\n\tuseFormValidation<File>(props, state, inputRef);\n\n\tconst ref = useRef<HTMLDivElement>(null);\n\n\tconst {isFocusVisible, focusProps} = useFocusRing();\n\n\tconst {dropProps, isDropTarget} = useDrop({\n\t\tref,\n\t\tonDrop(event) {\n\t\t\tconst item = event.items.find(item => item.kind === 'file') as\n\t\t\t\t| FileDropItem\n\t\t\t\t| undefined;\n\t\t\tif (item === undefined) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\t(async () => {\n\t\t\t\tconst file = await item.getFile();\n\t\t\t\tsetFile(file);\n\t\t\t\tcommitValidation();\n\t\t\t})();\n\t\t},\n\t});\n\n\tconst inputChangeHandler = (event: ChangeEvent<HTMLInputElement>) => {\n\t\tif (props.onChange) {\n\t\t\tprops.onChange(event);\n\t\t}\n\n\t\tif (event.target.files === null || event.target.files.length === 0) {\n\t\t\treturn;\n\t\t}\n\n\t\tsetFile(event.target.files[0]);\n\t\tcommitValidation();\n\t};\n\n\tconst dropZoneClickHandler = () => {\n\t\tconst input = inputRef.current;\n\t\tif (input !== null) {\n\t\t\tinput.click();\n\t\t}\n\t};\n\n\treturn (\n\t\t<div\n\t\t\t{...mergeProps(dropProps, focusProps)}\n\t\t\tref={ref}\n\t\t\trole='button'\n\t\t\ttabIndex={0}\n\t\t\tclassName={cx(\n\t\t\t\t'rounded border border-dashed border-stone-500 p-4 text-stone-500 hover:bg-stone-800 outline-none flex flex-col justify-center items-center text-center',\n\t\t\t\tisDropTarget && 'bg-stone-800',\n\t\t\t\tisFocusVisible && 'border-stone-50',\n\t\t\t\tclassName,\n\t\t\t)}\n\t\t\tonClick={dropZoneClickHandler}\n\t\t>\n\t\t\t<input\n\t\t\t\t{...omit(props, [\n\t\t\t\t\t'className',\n\t\t\t\t\t'acceptedMimeTypes',\n\t\t\t\t\t'label',\n\t\t\t\t\t'error',\n\t\t\t\t])}\n\t\t\t\tref={inputRef}\n\t\t\t\ttype='file'\n\t\t\t\tclassName='hidden'\n\t\t\t\taccept={acceptedMimeTypes?.join(',')}\n\t\t\t\tonChange={inputChangeHandler}\n\t\t\t/>\n\t\t\t{!isInvalid && file && imageMimeTypes.has(file.type) && (\n\t\t\t\t<img\n\t\t\t\t\tsrc={URL.createObjectURL(file)}\n\t\t\t\t\talt='Submitted image'\n\t\t\t\t\theight={128}\n\t\t\t\t\twidth={128}\n\t\t\t\t/>\n\t\t\t)}\n\t\t\t<div className='mt-2 text-stone-500'>\n\t\t\t\t{file ? file.name : label}\n\t\t\t</div>\n\n\t\t\t{(error ?? isInvalid) && (\n\t\t\t\t<div className='mt-2 text-red-400'>\n\t\t\t\t\t{error ?? validationErrors.join(' ')}\n\t\t\t\t</div>\n\t\t\t)}\n\t\t</div>\n\t);\n}\n"],"mappings":"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","names":["Image","cva","compose","cx","cva","jsx","useRef","jsx","jsx","useRef","jsx","useRef","mergeProps","useFocusRing","jsx","jsxs","useRef","useTableColumnHeader","VisuallyHidden","jsx","useRef","mergeProps","useFocusRing","jsx","useRef","useTableCell","jsx","useRef","jsx","jsxs","GeostatsTileLayer","jsx","modalContext","buttonVariants","cva","jsx","React","jsx","jsxs","useObjectRef","jsx","jsxs","useRef","List","Set","useMemo","useRef","jsx","jsxs","React","useRef","mergeProps","useFocusRing","twMerge","Fragment","jsx","jsxs","Overlay","useObjectRef","jsx","jsxs","Popover","useObjectRef","jsx","jsxs","jsx","useRef","Overlay","useModalOverlay","jsx","React","useOverlayTriggerState","useOverlayTrigger","Fragment","jsx","jsxs","twMerge","jsx","jsxs","createContext","useContext","useRef","AnimatePresence","motion","omit","Close","Fragment","jsx","jsxs","createContext","useEffect","useListState","jsx","useMemo","Seq","jsx","jsxs","useFocusRing","mergeProps","useObjectRef","useListState","jsx","jsxs","jsx","useObjectRef","ArrowDropDown","jsx","jsxs","React","useOverlayTriggerState","mergeProps","useOverlayTrigger","Fragment","jsx","jsxs","motion","jsx","useRef","useFocusRing","Set","useListState","Close","jsx","jsxs","useRef","ArrowDropDown","jsx","jsxs","useMemo","useListState","Seq","Set","jsx","jsxs","jsx","useRef","jsx","jsxs","useState","ArrowDropDown","ArrowDropUp","AnimatePresence","motion","jsx","jsxs","useRef","useState","mergeProps","useFocusRing","omit","jsx","jsxs","Image","defineConfig","twMerge","omit","jsx","useRef","mergeProps","useFocusRing","useTableColumnHeader","jsxs","useTableHeaderRow","useTableRowGroup","useTableRow","useCheckbox","usePress","VisuallyHidden","useToggleState","useTableSelectAllCheckbox","useTableCell","useTableSelectionCheckbox","useTable","useTableState","dynamic","React","Overlay","useModalOverlay","createContext","useContext","useButton","useObjectRef","useOverlayTriggerState","useOverlayTrigger","Fragment","useTextField","useEffect","useListData","List","Set","useMemo","OrderedSet","Seq","useSearchField","useSearchFieldState","Search","Close","useListBox","useListBoxSection","useOption","useListState","forwardRef","DismissButton","usePopover","useSelectState","useSelect","HiddenSelect","ArrowDropDown","useSeparator","motion","AnimatePresence","AriaSwitch","useToastState","useToast","useToastRegion","useState","Map","DragHandle","Remove","useGridList","useGridListItem","useGridListSelectionCheckbox","useLocale","useNumberField","useNumberFieldState","twJoin","ArrowDropUp","useTag","useTagGroup","useComboBox","useComboBoxState","useId","useDialog","useDrop","useFormValidation","useFormValidationState","cva","compose","cx","paperVariants","GeostatsTileLayer","modalContext","buttonVariants","Popover","toastContext","jsx","cx","Image"]}